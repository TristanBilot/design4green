{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js\";\nimport React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Graph extends Component {\n  async componentWillReceiveProps(nextProps) {\n    // used to pass the dataframe when loaded by parent page\n    // this.setState({ dataframe: nextProps.dataframe });\n    await this.timeout(100);\n    this.setState(() => {\n      this.state.dataframe = nextProps.dataframe;\n      this.getGanttGraph();\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      graph: []\n    };\n    this.taskFields = {\n      id: 'TaskID',\n      name: 'TaskName',\n      startDate: 'StartDate',\n      endDate: 'EndDate',\n      duration: 'Duration',\n      progress: 'Progress',\n      dependency: 'Predecessor',\n      child: 'subtasks',\n      resourceInfo: 'resources'\n    };\n    this.resourceFields = {\n      id: 'resourceId',\n      name: 'resourceName'\n    };\n    this.splitterSettings = {\n      columnIndex: 2\n    };\n    this.projectStartDate = new Date('03/25/2019');\n    this.projectEndDate = new Date('07/28/2019');\n    this.gridLines = 'Both';\n    this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n    this.timelineSettings = {\n      topTier: {\n        unit: 'Week',\n        format: 'MMM dd, y'\n      },\n      bottomTier: {\n        unit: 'Day'\n      }\n    };\n    this.labelSettings = {\n      leftLabel: 'TaskName',\n      rightLabel: 'resources'\n    };\n  }\n\n  async componentWillMount() {\n    await this.getGanttGraph();\n  } // {\n  //     TaskID: 1,\n  //     TaskName: 'Project initiation',\n  //     StartDate: new Date('04/02/2019'),\n  //     EndDate: new Date('04/21/2019'),\n  //     subtasks: [\n\n\n  async getGanttGraph(criterions) {\n    console.log(\"this.state.dataframe\");\n    console.log(this.state.dataframe);\n    if (this.state.dataframe == null) return [];\n    let df = this.getGanttInfoAsDataframe([\"STR-1.07\", \"STR-1.C09\", \"STR-1.16\", \"STR-3.C06\", \"STR-3.C05\", \"STR-3.07\"]);\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let graph = [];\n    let day = 1000 * 60 * 60 * 24;\n    let baseXPosition = new Date(2014, 2, 22);\n    let widthOfCycleLife = 4;\n    let i = 1;\n    df.chain(row => {\n      console.log(\"ZIZI\");\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      let begXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day);\n      let endXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day + widthOfCycleLife * day);\n      graph.push({\n        TaskID: i++,\n        TaskName: row.get(\"Use Case\"),\n        StartDate: begXPosition,\n        EndDate: endXPosition,\n        subtasks: []\n      }); // graph.push([\n      // row.get(\"CRITERES\"),\n      // row.get(\"Use Case\"),\n      // row.get(\"Etape Cycle de Vie\"),\n      // begXPosition,\n      // endXPosition,\n      // null,\n      // 100,\n      // null,\n      // ])\n\n      console.log(row.get(\"Etape Cycle de Vie\"));\n    });\n    this.setState({\n      graph: graph\n    });\n  }\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []; // for each id, fetch the required column infos \n\n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row.get(\"ID\") === id).select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    return totalDf;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  toolbarClick(args) {\n    if (args.item.id === \"GanttExport_excelexport\") {\n      this.ganttInstance.excelExport();\n    } else if (args.item.id === \"GanttExport_csvexport\") {\n      this.ganttInstance.csvExport();\n    } else if (args.item.id === \"GanttExport_pdfexport\") {\n      this.ganttInstance.pdfExport();\n    }\n  }\n\n  render() {\n    console.log(this.state.dataframe);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-pane\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: /*#__PURE__*/_jsxDEV(GanttComponent, {\n          id: \"GanttExport\",\n          ref: gantt => this.ganttInstance = gantt,\n          dataSource: this.graph,\n          dateFormat: 'MMM dd, y',\n          treeColumnIndex: 1,\n          allowExcelExport: true,\n          allowPdfExport: true,\n          allowSelection: true,\n          showColumnMenu: false,\n          highlightWeekends: true,\n          allowUnscheduledTasks: true,\n          projectStartDate: this.projectStartDate,\n          projectEndDate: this.projectEndDate,\n          splitterSettings: this.splitterSettings,\n          taskFields: this.taskFields,\n          timelineSettings: this.timelineSettings,\n          labelSettings: this.labelSettings,\n          toolbarClick: this.toolbarClick.bind(this),\n          height: \"410px\",\n          gridLines: this.gridLines,\n          toolbar: this.toolbar,\n          resourceFields: this.resourceFields,\n          resources: editingResources,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskID\",\n              width: \"60\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskName\",\n              width: \"250\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"StartDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"EndDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Predecessor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"resources\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Selection, Toolbar, ExcelExport, PdfExport]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js"],"names":["React","Component","GanttComponent","Inject","Selection","Toolbar","ExcelExport","PdfExport","ColumnsDirective","ColumnDirective","editingData","editingResources","DataFrame","Graph","componentWillReceiveProps","nextProps","timeout","setState","state","dataframe","getGanttGraph","constructor","props","graph","taskFields","id","name","startDate","endDate","duration","progress","dependency","child","resourceInfo","resourceFields","splitterSettings","columnIndex","projectStartDate","Date","projectEndDate","gridLines","toolbar","timelineSettings","topTier","unit","format","bottomTier","labelSettings","leftLabel","rightLabel","componentWillMount","criterions","console","log","df","getGanttInfoAsDataframe","cycleLifeCategories","day","baseXPosition","widthOfCycleLife","i","chain","row","cycleLifeIndex","indexOf","get","begXPosition","getTime","endXPosition","push","TaskID","TaskName","StartDate","EndDate","subtasks","ids","dfs","forEach","filter","select","totalDf","union","translatePriorityToInteger","sortDataframe","withColumn","translateCycleLifeToInteger","sortBy","priority","priorities","set","cycleLife","delay","Promise","res","setTimeout","toolbarClick","args","item","ganttInstance","excelExport","csvExport","pdfExport","render","gantt","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\nimport DataFrame from \"dataframe-js\";\n\nclass Graph extends Component {\n\n    async componentWillReceiveProps(nextProps) {\n        // used to pass the dataframe when loaded by parent page\n        // this.setState({ dataframe: nextProps.dataframe });\n        await this.timeout(100)\n        this.setState(() => {\n            this.state.dataframe = nextProps.dataframe\n            this.getGanttGraph()\n        })\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataframe: null,\n            graph: [],\n        }\n\n        this.taskFields = {\n            id: 'TaskID',\n            name: 'TaskName',\n            startDate: 'StartDate',\n            endDate: 'EndDate',\n            duration: 'Duration',\n            progress: 'Progress',\n            dependency: 'Predecessor',\n            child: 'subtasks',\n            resourceInfo: 'resources'\n        };\n        this.resourceFields = {\n            id: 'resourceId',\n            name: 'resourceName'\n        };\n        this.splitterSettings = {\n            columnIndex: 2\n        };\n        this.projectStartDate = new Date('03/25/2019');\n        this.projectEndDate = new Date('07/28/2019');\n        this.gridLines = 'Both';\n        this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n        this.timelineSettings = {\n            topTier: {\n                unit: 'Week',\n                format: 'MMM dd, y',\n            },\n            bottomTier: {\n                unit: 'Day',\n            },\n        };\n        this.labelSettings = {\n            leftLabel: 'TaskName',\n            rightLabel: 'resources'\n        };\n    }\n\n    async componentWillMount() {\n        await this.getGanttGraph()\n    }\n\n    // {\n    //     TaskID: 1,\n    //     TaskName: 'Project initiation',\n    //     StartDate: new Date('04/02/2019'),\n    //     EndDate: new Date('04/21/2019'),\n    //     subtasks: [\n\n    async getGanttGraph(criterions) {\n        console.log(\"this.state.dataframe\")\n        console.log(this.state.dataframe)\n        if (this.state.dataframe == null)\n            return []\n    \n        let df = this.getGanttInfoAsDataframe([\n            \"STR-1.07\",\n            \"STR-1.C09\",\n            \"STR-1.16\",\n            \"STR-3.C06\",\n            \"STR-3.C05\",\n            \"STR-3.07\"\n        ])\n    \n        let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n            'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n        let graph = []\n        let day = 1000*60*60*24\n        let baseXPosition = new Date(2014, 2, 22)\n        let widthOfCycleLife = 4\n        let i = 1\n\n        df.chain(row => {\n            console.log(\"ZIZI\")\n            let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n            let begXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day)\n            let endXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day + widthOfCycleLife * day)\n    \n            graph.push({\n                TaskID: i++,\n                TaskName: row.get(\"Use Case\"),\n                StartDate: begXPosition,\n                EndDate: endXPosition,\n                subtasks: []\n            })\n            // graph.push([\n            // row.get(\"CRITERES\"),\n            // row.get(\"Use Case\"),\n            // row.get(\"Etape Cycle de Vie\"),\n            // begXPosition,\n            // endXPosition,\n            // null,\n            // 100,\n            // null,\n            // ])\n            console.log(row.get(\"Etape Cycle de Vie\"))\n        })\n    \n        this.setState({\n            graph: graph,\n        })\n        }\n\n    getGanttInfoAsDataframe(ids) {\n        let dfs = []\n    \n        // for each id, fetch the required column infos \n        ids.forEach(id => {\n            let df = this.state.dataframe.filter(row => row\n            .get(\"ID\") === id)\n            .select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n            dfs.push(df)\n        })\n        \n        // merge all the rows dataframes in one dataframe\n        let totalDf = new DataFrame([]);\n        dfs.forEach(df => {\n            totalDf = totalDf.union(df)\n        })\n    \n        // parse the priority to integers\n        totalDf = totalDf.chain(this.translatePriorityToInteger)\n        totalDf = this.sortDataframe(totalDf)\n        return totalDf\n    }\n\n    sortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n      }\n\n    translatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    toolbarClick(args) {\n        if (args.item.id === \"GanttExport_excelexport\") {\n            this.ganttInstance.excelExport();\n        }\n        else if (args.item.id === \"GanttExport_csvexport\") {\n            this.ganttInstance.csvExport();\n        }\n        else if (args.item.id === \"GanttExport_pdfexport\") {\n            this.ganttInstance.pdfExport();\n        }\n    }\n    render() {\n        console.log(this.state.dataframe)\n        return (<div className='control-pane'>\n        <div className='control-section'>\n          <GanttComponent id='GanttExport' ref={gantt => this.ganttInstance = gantt} dataSource={this.graph} dateFormat={'MMM dd, y'} treeColumnIndex={1} allowExcelExport={true} allowPdfExport={true} allowSelection={true} showColumnMenu={false} highlightWeekends={true} allowUnscheduledTasks={true} projectStartDate={this.projectStartDate} projectEndDate={this.projectEndDate} splitterSettings={this.splitterSettings} taskFields={this.taskFields} timelineSettings={this.timelineSettings} labelSettings={this.labelSettings} toolbarClick={this.toolbarClick.bind(this)} height='410px' gridLines={this.gridLines} toolbar={this.toolbar} resourceFields={this.resourceFields} resources={editingResources}>\n            <ColumnsDirective>\n              <ColumnDirective field='TaskID' width='60'></ColumnDirective>\n              <ColumnDirective field='TaskName' width='250'></ColumnDirective>\n              <ColumnDirective field='StartDate'></ColumnDirective>\n              <ColumnDirective field='EndDate'></ColumnDirective>\n              <ColumnDirective field='Duration'></ColumnDirective>\n              <ColumnDirective field='Predecessor'></ColumnDirective>\n              <ColumnDirective field='resources'></ColumnDirective>\n              <ColumnDirective field='Progress'></ColumnDirective>\n            </ColumnsDirective>\n            <Inject services={[Selection, Toolbar, ExcelExport, PdfExport]}/>\n          </GanttComponent>\n        </div>\n      </div>);\n    }\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}