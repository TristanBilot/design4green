{"ast":null,"code":"import { parentsUntil, getActualProperties } from '@syncfusion/ej2-grids';\nimport { setCssInGridPopUp } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, removeClass, getValue, addClass, closest, setValue, extend } from '@syncfusion/ej2-base';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * The Selection module is used to handle cell and row selection.\n */\n\nvar Selection =\n/** @class */\nfunction () {\n  function Selection(gantt) {\n    this.isSelectionFromChart = false;\n    this.multipleIndexes = [];\n    this.selectedRowIndexes = [];\n    this.enableSelectMultiTouch = false;\n    this.openPopup = false;\n    this.parent = gantt;\n    this.bindEvents();\n    this.parent.treeGrid.selectedRowIndex = this.parent.selectedRowIndex;\n    this.parent.treeGrid.allowSelection = this.parent.allowSelection;\n    this.parent.treeGrid.grid.selectionSettings.enableToggle = this.parent.selectionSettings.enableToggle;\n    this.parent.treeGrid.selectionSettings = getActualProperties(this.parent.selectionSettings);\n    this.wireEvents();\n  }\n  /**\n   * Get module\n   *\n   * @returns {string} .\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'selection';\n  };\n\n  Selection.prototype.wireEvents = function () {\n    this.parent.on('selectRowByIndex', this.selectRowByIndex, this);\n\n    if (this.parent.isAdaptive) {\n      this.parent.on('chartMouseClick', this.mouseUpHandler, this);\n      this.parent.on('treeGridClick', this.popUpClickHandler, this);\n    } else {\n      this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n    }\n  };\n  /**\n   * To update selected index.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  Selection.prototype.selectRowByIndex = function () {\n    if ((this.parent.selectedRowIndex !== -1 || this.parent.staticSelectedRowIndex !== -1) && this.parent.isLoad) {\n      this.selectRow(this.parent.staticSelectedRowIndex !== -1 ? this.parent.staticSelectedRowIndex : this.parent.selectedRowIndex);\n      this.parent.staticSelectedRowIndex = -1;\n    }\n  };\n  /**\n   * To bind selection events.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  Selection.prototype.bindEvents = function () {\n    this.parent.treeGrid.rowSelecting = this.rowSelecting.bind(this);\n    this.parent.treeGrid.rowSelected = this.rowSelected.bind(this);\n    this.parent.treeGrid.rowDeselecting = this.rowDeselecting.bind(this);\n    this.parent.treeGrid.rowDeselected = this.rowDeselected.bind(this);\n    this.parent.treeGrid.cellSelecting = this.cellSelecting.bind(this);\n    this.parent.treeGrid.cellSelected = this.cellSelected.bind(this);\n    this.parent.treeGrid.cellDeselecting = this.cellDeselecting.bind(this);\n    this.parent.treeGrid.cellDeselected = this.cellDeselected.bind(this);\n  };\n\n  Selection.prototype.rowSelecting = function (args) {\n    if (!this.parent.isGanttChartRendered) {\n      args.cancel = true;\n      return;\n    }\n\n    args.isCtrlPressed = this.isMultiCtrlRequest;\n    args.isShiftPressed = this.isMultiShiftRequest;\n    args.target = this.actualTarget;\n\n    if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n      delete args.foreignKeyData;\n    }\n\n    this.parent.trigger('rowSelecting', args);\n  };\n\n  Selection.prototype.rowSelected = function (args) {\n    var rowIndexes = 'rowIndexes';\n    var index = this.parent.selectionSettings.type === 'Multiple' && !isNullOrUndefined(args[rowIndexes]) ? args[rowIndexes] : [args.rowIndex];\n    this.addRemoveClass(index);\n    this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n    this.parent.setProperties({\n      selectedRowIndex: this.parent.treeGrid.grid.selectedRowIndex\n    }, true);\n\n    if (this.isMultiShiftRequest) {\n      this.selectedRowIndexes = index;\n    }\n\n    if (this.parent.autoFocusTasks) {\n      this.parent.ganttChartModule.updateScrollLeft(getValue('data.ganttProperties.left', args));\n    }\n\n    args.target = this.actualTarget;\n\n    if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n      delete args.foreignKeyData;\n    }\n\n    this.prevRowIndex = args.rowIndex;\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems(args);\n    }\n\n    this.parent.trigger('rowSelected', args);\n  };\n\n  Selection.prototype.rowDeselecting = function (args) {\n    args.target = this.actualTarget;\n    args.isInteracted = this.isInteracted;\n    this.parent.trigger('rowDeselecting', args);\n  };\n\n  Selection.prototype.rowDeselected = function (args) {\n    var index;\n    var isContains;\n\n    if (this.multipleIndexes.length !== 0) {\n      index = this.multipleIndexes;\n    } else {\n      if (!isNullOrUndefined(args.rowIndexes)) {\n        for (var i = 0; i < args.rowIndexes.length; i++) {\n          if (args.rowIndexes[i] === args.rowIndex) {\n            isContains = true;\n          }\n        }\n\n        if (isContains) {\n          index = args.rowIndexes;\n        } else {\n          index = [args.rowIndex];\n        }\n      } else {\n        index = [args.rowIndex];\n      }\n    }\n\n    this.addRemoveClass(index);\n    this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n    this.parent.setProperties({\n      selectedRowIndex: -1\n    }, true);\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n\n    if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive && this.selectedRowIndexes.length === 0) {\n      this.hidePopUp();\n    }\n\n    args.target = this.actualTarget;\n    args.isInteracted = this.isInteracted;\n    this.parent.trigger('rowDeselected', args);\n    this.isInteracted = false;\n    this.multipleIndexes = [];\n  };\n\n  Selection.prototype.cellSelecting = function (args) {\n    var callBackPromise = new Deferred();\n    this.parent.trigger('cellSelecting', args, function (cellselectingArgs) {\n      callBackPromise.resolve(cellselectingArgs);\n    });\n    return callBackPromise;\n  };\n\n  Selection.prototype.cellSelected = function (args) {\n    this.parent.trigger('cellSelected', args);\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n\n  Selection.prototype.cellDeselecting = function (args) {\n    this.parent.trigger('cellDeselecting', args);\n  };\n\n  Selection.prototype.cellDeselected = function (args) {\n    this.parent.trigger('cellDeselected', args);\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  /**\n   * Selects a cell by given index.\n   *\n   * @param  {IIndex} cellIndex - Defines the row and column indexes.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.selectCell = function (cellIndex, isToggle) {\n    this.parent.treeGrid.selectCell(cellIndex, isToggle);\n  };\n  /**\n   * Selects a collection of cells by row and column indexes.\n   *\n   * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.selectCells = function (rowCellIndexes) {\n    this.parent.treeGrid.grid.selectCells(rowCellIndexes);\n  };\n  /**\n   * Selects a row by given index.\n   *\n   * @param  {number} index - Defines the row index.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @param {boolean} isPreventFocus .\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.selectRow = function (index, isToggle, isPreventFocus) {\n    var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children); // eslint-disable-next-line\n\n    var selectedRow = ganttRow.filter(function (e) {\n      return parseInt(e.getAttribute('aria-rowindex'), 0) === index;\n    })[0];\n    var condition;\n\n    if (index === -1 || isNullOrUndefined(selectedRow) || this.parent.selectionSettings.mode === 'Cell') {\n      return;\n    }\n\n    if (this.parent.showActiveElement && !isPreventFocus) {\n      this.parent.treeGrid.grid.selectionModule.preventFocus = true;\n    } else {\n      this.parent.treeGrid.grid.selectionModule.preventFocus = false;\n    }\n\n    if (!isNullOrUndefined(this.selectedClass) && this.selectedClass === selectedRow && !isToggle) {\n      condition = true;\n    }\n\n    if (condition !== true) {\n      this.parent.treeGrid.selectRow(index, isToggle);\n    }\n\n    this.parent.treeGrid.grid.selectionModule.preventFocus = this.parent.treeGrid.grid.selectionModule.preventFocus === true ? false : this.parent.treeGrid.grid.selectionModule.preventFocus;\n    this.prevRowIndex = index;\n    this.selectedClass = selectedRow;\n  };\n  /**\n   * Selects a collection of rows by indexes.\n   *\n   * @param  {number[]} records - Defines the collection of row indexes.\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.selectRows = function (records) {\n    if (!isNullOrUndefined(records) && records.length > 0) {\n      this.parent.treeGrid.selectRows(records);\n    }\n  };\n  /**\n   * Gets the collection of selected row indexes.\n   *\n   * @returns {number[]} .\n   */\n\n\n  Selection.prototype.getSelectedRowIndexes = function () {\n    return this.parent.treeGrid.getSelectedRowIndexes();\n  };\n  /**\n   * Gets the collection of selected row and cell indexes.\n   *\n   * @returns {number[]} .\n   */\n\n\n  Selection.prototype.getSelectedRowCellIndexes = function () {\n    return this.parent.treeGrid.getSelectedRowCellIndexes();\n  };\n  /**\n   * Gets the collection of selected records.\n   *\n   * @returns {Object[]} .\n   */\n\n\n  Selection.prototype.getSelectedRecords = function () {\n    return this.parent.treeGrid.getSelectedRecords();\n  };\n  /**\n   * Get the selected records for cell selection.\n   *\n   * @returns {IGanttData[]} .\n   */\n\n\n  Selection.prototype.getCellSelectedRecords = function () {\n    var cellDetails = this.parent.selectionModule.getSelectedRowCellIndexes();\n    var cellSelectedRecords = [];\n\n    for (var i = 0; i < cellDetails.length; i++) {\n      cellSelectedRecords.push(this.parent.currentViewData[cellDetails[i].rowIndex]);\n    }\n\n    return cellSelectedRecords;\n  };\n  /**\n   * Gets the collection of selected rows.\n   *\n   * @returns {Element[]} .\n   */\n\n\n  Selection.prototype.getSelectedRows = function () {\n    return this.parent.treeGrid.getSelectedRows();\n  };\n  /**\n   * Deselects the current selected rows and cells.\n   *\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.clearSelection = function () {\n    this.addRemoveClass(this.selectedRowIndexes);\n    this.parent.treeGrid.clearSelection();\n    this.parent.selectedRowIndex = -1;\n    this.selectedRowIndexes = [];\n    this.selectedClass = null;\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n\n    this.isInteracted = false;\n  };\n\n  Selection.prototype.highlightSelectedRows = function (e, fromChart) {\n    this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch;\n    this.isMultiShiftRequest = e.shiftKey;\n    this.actualTarget = e.target;\n    this.isInteracted = true;\n    this.isSelectionFromChart = fromChart;\n\n    if (fromChart) {\n      var selectedRow = closest(e.target, 'tr.e-chart-row');\n      var rIndex = parseInt(selectedRow.getAttribute('aria-rowindex'), 10);\n      var isToggle = this.parent.selectionSettings.enableToggle;\n\n      if (this.parent.selectionSettings.type === 'Single' || !this.isMultiCtrlRequest && !this.isMultiShiftRequest) {\n        this.selectRow(rIndex, isToggle);\n      } else {\n        if (this.isMultiShiftRequest) {\n          this.selectRowsByRange(isNullOrUndefined(this.prevRowIndex) ? rIndex : this.prevRowIndex, rIndex);\n        } else {\n          setValue('isMultiCtrlRequest', true, this.parent.treeGrid.grid.selectionModule);\n          this.parent.treeGrid.grid.selectionModule.addRowsToSelection([rIndex]);\n          var isUnSelected = this.selectedRowIndexes.indexOf(rIndex) > -1;\n\n          if (isUnSelected) {\n            this.addRemoveClass([rIndex]);\n          }\n        }\n      }\n    }\n  };\n\n  Selection.prototype.getselectedrowsIndex = function (startIndex, endIndex) {\n    var indexes = []; // eslint-disable-next-line\n\n    var _a = startIndex < endIndex ? {\n      i: startIndex,\n      max: endIndex\n    } : {\n      i: endIndex,\n      max: startIndex\n    },\n        i = _a.i,\n        max = _a.max;\n\n    for (; i <= max; i++) {\n      indexes.push(i);\n    }\n\n    if (startIndex > endIndex) {\n      indexes.reverse();\n    }\n\n    this.selectedRowIndexes = indexes;\n  };\n  /**\n   * Selects a range of rows from start and end row indexes.\n   *\n   * @param  {number} startIndex - Defines the start row index.\n   * @param  {number} endIndex - Defines the end row index.\n   * @returns {void} .\n   */\n\n\n  Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n    this.isSelectionFromChart = true;\n    this.getselectedrowsIndex(startIndex, endIndex);\n    this.selectRows(this.selectedRowIndexes);\n  };\n\n  Selection.prototype.addRemoveClass = function (records) {\n    var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n\n    var _loop_1 = function (i) {\n      var selectedRow = ganttRow.filter(function (e) {\n        // eslint-disable-next-line\n        return parseInt(e.getAttribute('aria-rowindex'), 0) === records[i];\n      })[0];\n\n      if (!isNullOrUndefined(selectedRow)) {\n        // eslint-disable-next-line\n        this_1.getSelectedRowIndexes().indexOf(records[i]) > -1 ? this_1.addClass(selectedRow) : this_1.removeClass(selectedRow);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < records.length; i++) {\n      _loop_1(i);\n    }\n  };\n\n  Selection.prototype.addClass = function (selectedRow) {\n    addClass([selectedRow], 'e-active');\n    selectedRow.setAttribute('aria-selected', 'true');\n  };\n\n  Selection.prototype.removeClass = function (selectedRow) {\n    removeClass([selectedRow], 'e-active');\n    selectedRow.removeAttribute('aria-selected');\n  };\n\n  Selection.prototype.showPopup = function (e) {\n    if (this.isSelectionFromChart) {\n      setCssInGridPopUp(this.parent.element.querySelector('.e-ganttpopup'), e, 'e-rowselect e-icons e-icon-rowselect' + (this.enableSelectMultiTouch && (this.getSelectedRecords().length > 1 || this.getSelectedRowCellIndexes().length > 1) ? ' e-spanclicked' : ''));\n      document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n      this.openPopup = true;\n    } else if (this.selectedRowIndexes.length === 0) {\n      this.hidePopUp();\n    }\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Selection.prototype.hidePopUp = function () {\n    if (this.openPopup) {\n      document.getElementsByClassName('e-ganttpopup')[0].style.display = 'none';\n      this.openPopup = false;\n    } else {\n      document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n    }\n  };\n\n  Selection.prototype.popUpClickHandler = function (e) {\n    var target = e.target;\n    var grid = this.parent.treeGrid.grid;\n    var $popUpElemet = closest(target, '.e-ganttpopup') ? closest(target, '.e-ganttpopup') : closest(target, '.e-gridpopup');\n\n    if ($popUpElemet) {\n      var spanElement = $popUpElemet.querySelector('.' + 'e-rowselect');\n\n      if (closest(target, '.e-ganttpopup') && !spanElement.classList.contains('e-spanclicked')) {\n        this.enableSelectMultiTouch = true;\n        spanElement.classList.add('e-spanclicked');\n      } else if (closest(target, '.e-gridpopup') && spanElement.classList.contains('e-spanclicked')) {\n        this.openPopup = true;\n        this.enableSelectMultiTouch = true;\n      } else {\n        this.hidePopUp();\n        this.enableSelectMultiTouch = false;\n\n        if (closest(target, '.e-ganttpopup')) {\n          spanElement.classList.remove('e-spanclicked');\n        }\n      }\n    } else if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n      var $tr = closest(target, '.e-rowcell');\n\n      if ($tr && this.selectedRowIndexes.length === 0) {\n        this.hidePopUp();\n      }\n    }\n\n    if (grid) {\n      setValue('enableSelectMultiTouch', this.enableSelectMultiTouch, grid.selectionModule);\n    }\n  };\n  /**\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Selection.prototype.mouseUpHandler = function (e) {\n    var isTaskbarEdited = false;\n    var targetElement = null;\n\n    if (e.target.closest('.e-rowcell')) {\n      targetElement = e.target;\n    } else if (e.target.closest('.e-chart-row')) {\n      targetElement = e.target.closest('.e-left-label-container') || e.target.closest('.e-taskbar-main-container') || e.target.closest('.e-right-label-container');\n    }\n\n    if (this.parent.focusModule) {\n      this.parent.focusModule.setActiveElement(targetElement);\n    }\n\n    if (this.parent.editModule && this.parent.editSettings.allowTaskbarEditing && this.parent.editModule.taskbarEditModule) {\n      var taskbarEdit = this.parent.editModule.taskbarEditModule;\n\n      if (taskbarEdit.isMouseDragged || taskbarEdit.tapPointOnFocus) {\n        isTaskbarEdited = true;\n      }\n    }\n\n    if (!isTaskbarEdited && this.parent.element.contains(e.target)) {\n      var parent_1 = parentsUntil(e.target, 'e-chart-row');\n      var isSelected = e.target.classList.contains('e-rowcell') || e.target.classList.contains('e-row') || e.target.classList.contains('e-treegridexpand') || e.target.classList.contains('e-treegridcollapse') || !isNullOrUndefined(parent_1);\n      this.popUpClickHandler(e);\n\n      if (this.parent.selectionSettings.mode !== 'Cell' && isSelected) {\n        if (closest(e.target, 'tr.e-chart-row')) {\n          this.highlightSelectedRows(e, true);\n        } else {\n          this.highlightSelectedRows(e, false);\n        }\n\n        if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n          if (this.selectedRowIndexes.length > 0) {\n            this.showPopup(e);\n          } else {\n            this.hidePopUp();\n          }\n        }\n      } else {\n        this.isSelectionFromChart = false;\n      }\n    }\n  };\n  /**\n   * To add class for selected records in virtualization mode.\n   *\n   * @param {number} i .\n   * @returns {void} .\n   * @hidden\n   */\n\n\n  Selection.prototype.maintainSelectedRecords = function (i) {\n    var index = this.parent.selectionModule.getSelectedRowIndexes().indexOf(i);\n\n    if (index > -1) {\n      this.addRemoveClass([i]);\n    }\n  };\n  /**\n   * To destroy the selection module.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  Selection.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('selectRowByIndex', this.selectRowByIndex);\n\n    if (this.parent.isAdaptive) {\n      this.parent.off('chartMouseClick', this.mouseUpHandler);\n      this.parent.off('treeGridClick', this.popUpClickHandler);\n    } else {\n      this.parent.off('chartMouseUp', this.mouseUpHandler);\n    }\n  };\n\n  return Selection;\n}();\n\nexport { Selection };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/selection.js"],"names":["parentsUntil","getActualProperties","setCssInGridPopUp","isNullOrUndefined","removeClass","getValue","addClass","closest","setValue","extend","Deferred","Selection","gantt","isSelectionFromChart","multipleIndexes","selectedRowIndexes","enableSelectMultiTouch","openPopup","parent","bindEvents","treeGrid","selectedRowIndex","allowSelection","grid","selectionSettings","enableToggle","wireEvents","prototype","getModuleName","on","selectRowByIndex","isAdaptive","mouseUpHandler","popUpClickHandler","staticSelectedRowIndex","isLoad","selectRow","rowSelecting","bind","rowSelected","rowDeselecting","rowDeselected","cellSelecting","cellSelected","cellDeselecting","cellDeselected","args","isGanttChartRendered","cancel","isCtrlPressed","isMultiCtrlRequest","isShiftPressed","isMultiShiftRequest","target","actualTarget","foreignKeyData","Object","keys","length","trigger","rowIndexes","index","type","rowIndex","addRemoveClass","getSelectedRowIndexes","setProperties","autoFocusTasks","ganttChartModule","updateScrollLeft","prevRowIndex","toolbarModule","refreshToolbarItems","isInteracted","isContains","i","hidePopUp","callBackPromise","cellselectingArgs","resolve","selectCell","cellIndex","isToggle","selectCells","rowCellIndexes","isPreventFocus","ganttRow","slice","call","chartBodyContent","querySelector","children","selectedRow","filter","e","parseInt","getAttribute","condition","mode","showActiveElement","selectionModule","preventFocus","selectedClass","selectRows","records","getSelectedRowCellIndexes","getSelectedRecords","getCellSelectedRecords","cellDetails","cellSelectedRecords","push","currentViewData","getSelectedRows","clearSelection","highlightSelectedRows","fromChart","ctrlKey","shiftKey","rIndex","selectRowsByRange","addRowsToSelection","isUnSelected","indexOf","getselectedrowsIndex","startIndex","endIndex","indexes","_a","max","reverse","_loop_1","this_1","setAttribute","removeAttribute","showPopup","element","document","getElementsByClassName","style","display","$popUpElemet","spanElement","classList","contains","add","remove","$tr","isTaskbarEdited","targetElement","focusModule","setActiveElement","editModule","editSettings","allowTaskbarEditing","taskbarEditModule","taskbarEdit","isMouseDragged","tapPointOnFocus","parent_1","isSelected","maintainSelectedRecords","destroy","isDestroyed","off"],"mappings":"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","sourcesContent":["import { parentsUntil, getActualProperties } from '@syncfusion/ej2-grids';\nimport { setCssInGridPopUp } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, removeClass, getValue, addClass, closest, setValue, extend } from '@syncfusion/ej2-base';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * The Selection module is used to handle cell and row selection.\n */\nvar Selection = /** @class */ (function () {\n    function Selection(gantt) {\n        this.isSelectionFromChart = false;\n        this.multipleIndexes = [];\n        this.selectedRowIndexes = [];\n        this.enableSelectMultiTouch = false;\n        this.openPopup = false;\n        this.parent = gantt;\n        this.bindEvents();\n        this.parent.treeGrid.selectedRowIndex = this.parent.selectedRowIndex;\n        this.parent.treeGrid.allowSelection = this.parent.allowSelection;\n        this.parent.treeGrid.grid.selectionSettings.enableToggle = this.parent.selectionSettings.enableToggle;\n        this.parent.treeGrid.selectionSettings = getActualProperties(this.parent.selectionSettings);\n        this.wireEvents();\n    }\n    /**\n     * Get module\n     *\n     * @returns {string} .\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'selection';\n    };\n    Selection.prototype.wireEvents = function () {\n        this.parent.on('selectRowByIndex', this.selectRowByIndex, this);\n        if (this.parent.isAdaptive) {\n            this.parent.on('chartMouseClick', this.mouseUpHandler, this);\n            this.parent.on('treeGridClick', this.popUpClickHandler, this);\n        }\n        else {\n            this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n        }\n    };\n    /**\n     * To update selected index.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.selectRowByIndex = function () {\n        if ((this.parent.selectedRowIndex !== -1 || this.parent.staticSelectedRowIndex !== -1) && this.parent.isLoad) {\n            this.selectRow(this.parent.staticSelectedRowIndex !== -1 ? this.parent.staticSelectedRowIndex : this.parent.selectedRowIndex);\n            this.parent.staticSelectedRowIndex = -1;\n        }\n    };\n    /**\n     * To bind selection events.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.bindEvents = function () {\n        this.parent.treeGrid.rowSelecting = this.rowSelecting.bind(this);\n        this.parent.treeGrid.rowSelected = this.rowSelected.bind(this);\n        this.parent.treeGrid.rowDeselecting = this.rowDeselecting.bind(this);\n        this.parent.treeGrid.rowDeselected = this.rowDeselected.bind(this);\n        this.parent.treeGrid.cellSelecting = this.cellSelecting.bind(this);\n        this.parent.treeGrid.cellSelected = this.cellSelected.bind(this);\n        this.parent.treeGrid.cellDeselecting = this.cellDeselecting.bind(this);\n        this.parent.treeGrid.cellDeselected = this.cellDeselected.bind(this);\n    };\n    Selection.prototype.rowSelecting = function (args) {\n        if (!this.parent.isGanttChartRendered) {\n            args.cancel = true;\n            return;\n        }\n        args.isCtrlPressed = this.isMultiCtrlRequest;\n        args.isShiftPressed = this.isMultiShiftRequest;\n        args.target = this.actualTarget;\n        if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n            delete args.foreignKeyData;\n        }\n        this.parent.trigger('rowSelecting', args);\n    };\n    Selection.prototype.rowSelected = function (args) {\n        var rowIndexes = 'rowIndexes';\n        var index = (this.parent.selectionSettings.type === 'Multiple' && !isNullOrUndefined(args[rowIndexes])) ?\n            args[rowIndexes] : [args.rowIndex];\n        this.addRemoveClass(index);\n        this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n        this.parent.setProperties({ selectedRowIndex: this.parent.treeGrid.grid.selectedRowIndex }, true);\n        if (this.isMultiShiftRequest) {\n            this.selectedRowIndexes = index;\n        }\n        if (this.parent.autoFocusTasks) {\n            this.parent.ganttChartModule.updateScrollLeft(getValue('data.ganttProperties.left', args));\n        }\n        args.target = this.actualTarget;\n        if (!isNullOrUndefined(args.foreignKeyData) && Object.keys(args.foreignKeyData).length === 0) {\n            delete args.foreignKeyData;\n        }\n        this.prevRowIndex = args.rowIndex;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems(args);\n        }\n        this.parent.trigger('rowSelected', args);\n    };\n    Selection.prototype.rowDeselecting = function (args) {\n        args.target = this.actualTarget;\n        args.isInteracted = this.isInteracted;\n        this.parent.trigger('rowDeselecting', args);\n    };\n    Selection.prototype.rowDeselected = function (args) {\n        var index;\n        var isContains;\n        if (this.multipleIndexes.length !== 0) {\n            index = this.multipleIndexes;\n        }\n        else {\n            if (!isNullOrUndefined(args.rowIndexes)) {\n                for (var i = 0; i < args.rowIndexes.length; i++) {\n                    if (args.rowIndexes[i] === args.rowIndex) {\n                        isContains = true;\n                    }\n                }\n                if (isContains) {\n                    index = args.rowIndexes;\n                }\n                else {\n                    index = [args.rowIndex];\n                }\n            }\n            else {\n                index = [args.rowIndex];\n            }\n        }\n        this.addRemoveClass(index);\n        this.selectedRowIndexes = extend([], this.getSelectedRowIndexes(), [], true);\n        this.parent.setProperties({ selectedRowIndex: -1 }, true);\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n        if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive\n            && this.selectedRowIndexes.length === 0) {\n            this.hidePopUp();\n        }\n        args.target = this.actualTarget;\n        args.isInteracted = this.isInteracted;\n        this.parent.trigger('rowDeselected', args);\n        this.isInteracted = false;\n        this.multipleIndexes = [];\n    };\n    Selection.prototype.cellSelecting = function (args) {\n        var callBackPromise = new Deferred();\n        this.parent.trigger('cellSelecting', args, function (cellselectingArgs) {\n            callBackPromise.resolve(cellselectingArgs);\n        });\n        return callBackPromise;\n    };\n    Selection.prototype.cellSelected = function (args) {\n        this.parent.trigger('cellSelected', args);\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    Selection.prototype.cellDeselecting = function (args) {\n        this.parent.trigger('cellDeselecting', args);\n    };\n    Selection.prototype.cellDeselected = function (args) {\n        this.parent.trigger('cellDeselected', args);\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    /**\n     * Selects a cell by given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void} .\n     */\n    Selection.prototype.selectCell = function (cellIndex, isToggle) {\n        this.parent.treeGrid.selectCell(cellIndex, isToggle);\n    };\n    /**\n     * Selects a collection of cells by row and column indexes.\n     *\n     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.\n     * @returns {void} .\n     */\n    Selection.prototype.selectCells = function (rowCellIndexes) {\n        this.parent.treeGrid.grid.selectCells(rowCellIndexes);\n    };\n    /**\n     * Selects a row by given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @param {boolean} isPreventFocus .\n     * @returns {void} .\n     */\n    Selection.prototype.selectRow = function (index, isToggle, isPreventFocus) {\n        var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n        // eslint-disable-next-line\n        var selectedRow = ganttRow.filter(function (e) { return parseInt(e.getAttribute('aria-rowindex'), 0) === index; })[0];\n        var condition;\n        if (index === -1 || isNullOrUndefined(selectedRow) || this.parent.selectionSettings.mode === 'Cell') {\n            return;\n        }\n        if (this.parent.showActiveElement && !isPreventFocus) {\n            this.parent.treeGrid.grid.selectionModule.preventFocus = true;\n        }\n        else {\n            this.parent.treeGrid.grid.selectionModule.preventFocus = false;\n        }\n        if ((!isNullOrUndefined(this.selectedClass) && (this.selectedClass === selectedRow) && (!isToggle))) {\n            condition = true;\n        }\n        if (condition !== true) {\n            this.parent.treeGrid.selectRow(index, isToggle);\n        }\n        this.parent.treeGrid.grid.selectionModule.preventFocus = this.parent.treeGrid.grid.selectionModule.preventFocus === true ?\n            false : this.parent.treeGrid.grid.selectionModule.preventFocus;\n        this.prevRowIndex = index;\n        this.selectedClass = selectedRow;\n    };\n    /**\n     * Selects a collection of rows by indexes.\n     *\n     * @param  {number[]} records - Defines the collection of row indexes.\n     * @returns {void} .\n     */\n    Selection.prototype.selectRows = function (records) {\n        if (!isNullOrUndefined(records) && records.length > 0) {\n            this.parent.treeGrid.selectRows(records);\n        }\n    };\n    /**\n     * Gets the collection of selected row indexes.\n     *\n     * @returns {number[]} .\n     */\n    Selection.prototype.getSelectedRowIndexes = function () {\n        return this.parent.treeGrid.getSelectedRowIndexes();\n    };\n    /**\n     * Gets the collection of selected row and cell indexes.\n     *\n     * @returns {number[]} .\n     */\n    Selection.prototype.getSelectedRowCellIndexes = function () {\n        return this.parent.treeGrid.getSelectedRowCellIndexes();\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @returns {Object[]} .\n     */\n    Selection.prototype.getSelectedRecords = function () {\n        return this.parent.treeGrid.getSelectedRecords();\n    };\n    /**\n     * Get the selected records for cell selection.\n     *\n     * @returns {IGanttData[]} .\n     */\n    Selection.prototype.getCellSelectedRecords = function () {\n        var cellDetails = this.parent.selectionModule.getSelectedRowCellIndexes();\n        var cellSelectedRecords = [];\n        for (var i = 0; i < cellDetails.length; i++) {\n            cellSelectedRecords.push(this.parent.currentViewData[cellDetails[i].rowIndex]);\n        }\n        return cellSelectedRecords;\n    };\n    /**\n     * Gets the collection of selected rows.\n     *\n     * @returns {Element[]} .\n     */\n    Selection.prototype.getSelectedRows = function () {\n        return this.parent.treeGrid.getSelectedRows();\n    };\n    /**\n     * Deselects the current selected rows and cells.\n     *\n     * @returns {void} .\n     */\n    Selection.prototype.clearSelection = function () {\n        this.addRemoveClass(this.selectedRowIndexes);\n        this.parent.treeGrid.clearSelection();\n        this.parent.selectedRowIndex = -1;\n        this.selectedRowIndexes = [];\n        this.selectedClass = null;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n        this.isInteracted = false;\n    };\n    Selection.prototype.highlightSelectedRows = function (e, fromChart) {\n        this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch;\n        this.isMultiShiftRequest = e.shiftKey;\n        this.actualTarget = e.target;\n        this.isInteracted = true;\n        this.isSelectionFromChart = fromChart;\n        if (fromChart) {\n            var selectedRow = closest(e.target, 'tr.e-chart-row');\n            var rIndex = parseInt(selectedRow.getAttribute('aria-rowindex'), 10);\n            var isToggle = this.parent.selectionSettings.enableToggle;\n            if (this.parent.selectionSettings.type === 'Single' || (!this.isMultiCtrlRequest && !this.isMultiShiftRequest)) {\n                this.selectRow(rIndex, isToggle);\n            }\n            else {\n                if (this.isMultiShiftRequest) {\n                    this.selectRowsByRange(isNullOrUndefined(this.prevRowIndex) ? rIndex : this.prevRowIndex, rIndex);\n                }\n                else {\n                    setValue('isMultiCtrlRequest', true, this.parent.treeGrid.grid.selectionModule);\n                    this.parent.treeGrid.grid.selectionModule.addRowsToSelection([rIndex]);\n                    var isUnSelected = this.selectedRowIndexes.indexOf(rIndex) > -1;\n                    if (isUnSelected) {\n                        this.addRemoveClass([rIndex]);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getselectedrowsIndex = function (startIndex, endIndex) {\n        var indexes = [];\n        // eslint-disable-next-line\n        var _a = (startIndex < endIndex) ?\n            { i: startIndex, max: endIndex } : { i: endIndex, max: startIndex }, i = _a.i, max = _a.max;\n        for (; i <= max; i++) {\n            indexes.push(i);\n        }\n        if (startIndex > endIndex) {\n            indexes.reverse();\n        }\n        this.selectedRowIndexes = indexes;\n    };\n    /**\n     * Selects a range of rows from start and end row indexes.\n     *\n     * @param  {number} startIndex - Defines the start row index.\n     * @param  {number} endIndex - Defines the end row index.\n     * @returns {void} .\n     */\n    Selection.prototype.selectRowsByRange = function (startIndex, endIndex) {\n        this.isSelectionFromChart = true;\n        this.getselectedrowsIndex(startIndex, endIndex);\n        this.selectRows(this.selectedRowIndexes);\n    };\n    Selection.prototype.addRemoveClass = function (records) {\n        var ganttRow = [].slice.call(this.parent.ganttChartModule.chartBodyContent.querySelector('tbody').children);\n        var _loop_1 = function (i) {\n            var selectedRow = ganttRow.filter(function (e) {\n                // eslint-disable-next-line\n                return parseInt(e.getAttribute('aria-rowindex'), 0) === records[i];\n            })[0];\n            if (!isNullOrUndefined(selectedRow)) {\n                // eslint-disable-next-line\n                this_1.getSelectedRowIndexes().indexOf(records[i]) > -1 ? this_1.addClass(selectedRow) : this_1.removeClass(selectedRow);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < records.length; i++) {\n            _loop_1(i);\n        }\n    };\n    Selection.prototype.addClass = function (selectedRow) {\n        addClass([selectedRow], 'e-active');\n        selectedRow.setAttribute('aria-selected', 'true');\n    };\n    Selection.prototype.removeClass = function (selectedRow) {\n        removeClass([selectedRow], 'e-active');\n        selectedRow.removeAttribute('aria-selected');\n    };\n    Selection.prototype.showPopup = function (e) {\n        if (this.isSelectionFromChart) {\n            setCssInGridPopUp(this.parent.element.querySelector('.e-ganttpopup'), e, 'e-rowselect e-icons e-icon-rowselect' +\n                ((this.enableSelectMultiTouch &&\n                    (this.getSelectedRecords().length > 1 || this.getSelectedRowCellIndexes().length > 1)) ? ' e-spanclicked' : ''));\n            document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n            this.openPopup = true;\n        }\n        else if (this.selectedRowIndexes.length === 0) {\n            this.hidePopUp();\n        }\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.hidePopUp = function () {\n        if (this.openPopup) {\n            document.getElementsByClassName('e-ganttpopup')[0].style.display = 'none';\n            this.openPopup = false;\n        }\n        else {\n            document.getElementsByClassName('e-gridpopup')[0].style.display = 'none';\n        }\n    };\n    Selection.prototype.popUpClickHandler = function (e) {\n        var target = e.target;\n        var grid = this.parent.treeGrid.grid;\n        var $popUpElemet = closest(target, '.e-ganttpopup') ?\n            closest(target, '.e-ganttpopup') : closest(target, '.e-gridpopup');\n        if ($popUpElemet) {\n            var spanElement = $popUpElemet.querySelector('.' + 'e-rowselect');\n            if (closest(target, '.e-ganttpopup') &&\n                !spanElement.classList.contains('e-spanclicked')) {\n                this.enableSelectMultiTouch = true;\n                spanElement.classList.add('e-spanclicked');\n            }\n            else if (closest(target, '.e-gridpopup') &&\n                spanElement.classList.contains('e-spanclicked')) {\n                this.openPopup = true;\n                this.enableSelectMultiTouch = true;\n            }\n            else {\n                this.hidePopUp();\n                this.enableSelectMultiTouch = false;\n                if (closest(target, '.e-ganttpopup')) {\n                    spanElement.classList.remove('e-spanclicked');\n                }\n            }\n        }\n        else if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n            var $tr = closest(target, '.e-rowcell');\n            if ($tr && this.selectedRowIndexes.length === 0) {\n                this.hidePopUp();\n            }\n        }\n        if (grid) {\n            setValue('enableSelectMultiTouch', this.enableSelectMultiTouch, grid.selectionModule);\n        }\n    };\n    /**\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.mouseUpHandler = function (e) {\n        var isTaskbarEdited = false;\n        var targetElement = null;\n        if (e.target.closest('.e-rowcell')) {\n            targetElement = e.target;\n        }\n        else if (e.target.closest('.e-chart-row')) {\n            targetElement = e.target.closest('.e-left-label-container') ||\n                e.target.closest('.e-taskbar-main-container') || e.target.closest('.e-right-label-container');\n        }\n        if (this.parent.focusModule) {\n            this.parent.focusModule.setActiveElement(targetElement);\n        }\n        if (this.parent.editModule && this.parent.editSettings.allowTaskbarEditing && this.parent.editModule.taskbarEditModule) {\n            var taskbarEdit = this.parent.editModule.taskbarEditModule;\n            if (taskbarEdit.isMouseDragged || taskbarEdit.tapPointOnFocus) {\n                isTaskbarEdited = true;\n            }\n        }\n        if (!isTaskbarEdited && this.parent.element.contains(e.target)) {\n            var parent_1 = parentsUntil(e.target, 'e-chart-row');\n            var isSelected = e.target.classList.contains('e-rowcell') ||\n                e.target.classList.contains('e-row') ||\n                e.target.classList.contains('e-treegridexpand') ||\n                e.target.classList.contains('e-treegridcollapse') || !isNullOrUndefined(parent_1);\n            this.popUpClickHandler(e);\n            if (this.parent.selectionSettings.mode !== 'Cell' && isSelected) {\n                if (closest(e.target, 'tr.e-chart-row')) {\n                    this.highlightSelectedRows(e, true);\n                }\n                else {\n                    this.highlightSelectedRows(e, false);\n                }\n                if (this.parent.selectionSettings.type === 'Multiple' && this.parent.isAdaptive) {\n                    if (this.selectedRowIndexes.length > 0) {\n                        this.showPopup(e);\n                    }\n                    else {\n                        this.hidePopUp();\n                    }\n                }\n            }\n            else {\n                this.isSelectionFromChart = false;\n            }\n        }\n    };\n    /**\n     * To add class for selected records in virtualization mode.\n     *\n     * @param {number} i .\n     * @returns {void} .\n     * @hidden\n     */\n    Selection.prototype.maintainSelectedRecords = function (i) {\n        var index = this.parent.selectionModule.getSelectedRowIndexes().indexOf(i);\n        if (index > -1) {\n            this.addRemoveClass([i]);\n        }\n    };\n    /**\n     * To destroy the selection module.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('selectRowByIndex', this.selectRowByIndex);\n        if (this.parent.isAdaptive) {\n            this.parent.off('chartMouseClick', this.mouseUpHandler);\n            this.parent.off('treeGridClick', this.popUpClickHandler);\n        }\n        else {\n            this.parent.off('chartMouseUp', this.mouseUpHandler);\n        }\n    };\n    return Selection;\n}());\nexport { Selection };\n"]},"metadata":{},"sourceType":"module"}