{"ast":null,"code":"import { isNullOrUndefined as isNOU, getValue, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { TreeGrid, Edit } from '@syncfusion/ej2-treegrid';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * To handle cell edit action on default columns and custom columns\n */\n\nvar CellEdit =\n/** @class */\nfunction () {\n  function CellEdit(ganttObj) {\n    /**\n     * @private\n     */\n    this.isCellEdit = false;\n    this.parent = ganttObj;\n    this.bindTreeGridProperties();\n  }\n  /**\n   * Bind all editing related properties from Gantt to TreeGrid\n   *\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.bindTreeGridProperties = function () {\n    this.parent.treeGrid.editSettings.allowEditing = this.parent.editSettings.allowEditing;\n    this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n    this.parent.treeGrid.editSettings.mode = 'Cell';\n    this.parent.treeGrid.cellEdit = this.ensureEditCell.bind(this);\n\n    if (this.parent.editSettings.allowEditing) {\n      TreeGrid.Inject(Edit);\n    }\n  };\n  /**\n   * Ensure current cell was editable or not\n   *\n   * @param {CellEditArgs} args .\n   * @returns {void | Deferred} .\n   */\n\n\n  CellEdit.prototype.ensureEditCell = function (args) {\n    var _this = this;\n\n    var data = args.rowData;\n    var field = args.columnName;\n    this.editedColumn = this.parent.getColumnByField(field, this.parent.ganttColumns);\n    var taskSettings = this.parent.taskFields;\n\n    if (this.parent.readOnly) {\n      args.cancel = true;\n      return;\n    }\n\n    if (this.parent.editSettings.mode === 'Dialog') {\n      args.cancel = true;\n      return;\n    }\n\n    if (data.hasChildRecords && (field === taskSettings.endDate || field === taskSettings.duration || field === taskSettings.dependency || field === taskSettings.progress || field === taskSettings.work || field === 'taskType')) {\n      args.cancel = true;\n    } else {\n      var callBackPromise_1 = new Deferred();\n      this.parent.trigger('cellEdit', args, function (arg) {\n        if (data.level === 0 && _this.parent.viewType === 'ResourceView') {\n          arg.cancel = true;\n        }\n\n        callBackPromise_1.resolve(arg);\n\n        if (!arg.cancel) {\n          if (arg.columnName === _this.parent.taskFields.notes) {\n            _this.openNotesEditor(arg);\n          } else {\n            _this.isCellEdit = true;\n\n            if (!isNOU(_this.parent.toolbarModule)) {\n              _this.parent.toolbarModule.refreshToolbarItems();\n            }\n          }\n        }\n      });\n      return callBackPromise_1;\n    }\n  };\n  /**\n   * To render edit dialog and to focus on notes tab\n   *\n   * @param {CellEditArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.openNotesEditor = function (args) {\n    var taskSettings = this.parent.taskFields;\n    var data = args.rowData;\n    var field = args.columnName;\n\n    if (field === taskSettings.notes && !this.parent.showInlineNotes) {\n      args.cancel = true;\n      var columnTypes = this.parent.editModule.dialogModule.updatedEditFields.map(function (x) {\n        return x.type;\n      });\n      var index = columnTypes.indexOf('Notes');\n\n      if (index !== -1) {\n        this.parent.editModule.dialogModule.openEditDialog(data.ganttProperties.rowUniqueID);\n        var tabObj = document.getElementById(this.parent.element.id + '_Tab').ej2_instances[0];\n        tabObj.selectedItem = index;\n      }\n    }\n\n    if (field === taskSettings.notes && this.parent.showInlineNotes === true) {\n      this.isCellEdit = true;\n    }\n  };\n\n  CellEdit.prototype.isValueChange = function (args, field) {\n    var data = getValue('data', args);\n    var editedValue = data[field];\n    var previousValue = getValue('previousData', args);\n\n    if (isNOU(editedValue) && !isNOU(previousValue) || !isNOU(editedValue) && isNOU(previousValue)) {\n      return true;\n    } else if (!isNOU(editedValue) && !isNOU(previousValue)) {\n      if (editedValue instanceof Date) {\n        return editedValue.getTime() !== data.taskData[field].getTime() ? true : false;\n      } else if (field === this.parent.taskFields.resourceInfo) {\n        return editedValue !== previousValue ? true : false;\n      } else if (editedValue !== data.taskData[field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Initiate cell save action on Gantt with arguments from TreeGrid\n   *\n   * @param {object} args .\n   * @param {object} editedObj .\n   * @returns {void} .\n   * @private\n   */\n\n\n  CellEdit.prototype.initiateCellEdit = function (args, editedObj) {\n    var column = getValue('column', args);\n    var data = getValue('data', args);\n    var editedArgs = {};\n    editedArgs.action = 'CellEditing';\n    editedArgs.data = this.parent.getTaskByUniqueID(data.uniqueID);\n    var previousValue = getValue('previousData', args);\n    var editedValue = this.parent.allowUnscheduledTasks ? data[column.field] : (isNullOrUndefined(data[column.field]) || data[column.field] === '') && (this.parent.taskFields.duration === column.field || this.parent.taskFields.startDate === column.field || this.parent.taskFields.endDate === column.field) ? previousValue : data[column.field];\n\n    if (!isNOU(data)) {\n      data[column.field] = previousValue;\n      editedArgs.data[column.field] = previousValue;\n      this.parent.initiateEditAction(true);\n      this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n\n      if (column.field === this.parent.taskFields.name) {\n        this.taskNameEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.startDate) {\n        this.startDateEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.endDate) {\n        this.endDateEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.duration) {\n        this.durationEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.resourceInfo) {\n        this.resourceEdited(editedArgs, editedObj, data);\n      } else if (column.field === this.parent.taskFields.progress) {\n        this.progressEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.baselineStartDate || column.field === this.parent.taskFields.baselineEndDate) {\n        this.baselineEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.dependency) {\n        this.dependencyEdited(editedArgs, previousValue);\n      } else if (column.field === this.parent.taskFields.notes) {\n        this.notedEdited(editedArgs);\n      } else if (column.field === this.parent.taskFields.work) {\n        this.workEdited(editedArgs);\n      } else if (column.field === 'taskType' && !isNOU(this.parent.taskFields.work)) {\n        this.typeEdited(editedArgs, editedObj);\n      } else if (column.field === this.parent.taskFields.manual) {\n        this.taskmodeEdited(editedArgs);\n      } else {\n        this.parent.setRecordValue('taskData.' + column.field, editedArgs.data[column.field], editedArgs.data);\n        this.parent.editModule.initiateSaveAction(editedArgs);\n      }\n    } else {\n      this.parent.editModule.endEditAction(args);\n    }\n\n    this.isCellEdit = false;\n\n    if (!isNOU(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n  /**\n   * To update task name cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.taskNameEdited = function (args) {\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.name, args.data[this.parent.taskFields.name], args.data);\n    this.parent.setRecordValue('taskName', args.data[this.parent.taskFields.name], args.data.ganttProperties, true);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task notes cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.notedEdited = function (args) {\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.notes, args.data[this.parent.taskFields.notes], args.data);\n    this.parent.setRecordValue('notes', args.data[this.parent.taskFields.notes], args.data.ganttProperties, true);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task schedule mode cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.taskmodeEdited = function (args) {\n    this.parent.setRecordValue('isAutoSchedule', !args.data[this.parent.taskFields.manual], args.data.ganttProperties, true);\n    this.parent.editModule.updateTaskScheduleModes(args.data);\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task start date cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.startDateEdited = function (args) {\n    var ganttData = args.data;\n    var ganttProb = args.data.ganttProperties;\n    var currentValue = args.data[this.parent.taskFields.startDate];\n    currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n    currentValue = this.parent.dateValidationModule.checkStartDate(currentValue);\n\n    if (isNOU(currentValue)) {\n      if (!ganttData.hasChildRecords) {\n        this.parent.setRecordValue('startDate', null, ganttProb, true);\n        this.parent.setRecordValue('duration', null, ganttProb, true);\n        this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n\n        if (this.parent.allowUnscheduledTasks && isNOU(this.parent.taskFields.endDate)) {\n          this.parent.setRecordValue('endDate', null, ganttProb, true);\n        }\n      }\n    } else if (ganttProb.endDate || !isNOU(ganttProb.duration)) {\n      this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n      this.parent.dateValidationModule.calculateEndDate(ganttData);\n    } else if (isNOU(ganttProb.endDate) && isNOU(ganttProb.duration)) {\n      this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n    }\n\n    this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n    this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n    this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n    this.updateEditedRecord(args);\n  };\n\n  CellEdit.prototype.validateEndDateWithSegments = function (ganttProp) {\n    var ganttSegments = [];\n    var segments = ganttProp.segments;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      var endDate = segment.endDate;\n      endDate = !isNullOrUndefined(ganttProp.endDate) && endDate.getTime() < ganttProp.endDate.getTime() && i !== segments.length - 1 ? endDate : ganttProp.endDate;\n      segment.duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n\n      if (segments.length > 0 && endDate.getTime() < segment.startDate.getTime() && endDate.getTime() <= ganttProp.endDate.getTime()) {\n        segments[i - 1].duration = this.parent.dataOperation.getDuration(segments[i - 1].startDate, ganttProp.endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n        continue;\n      }\n\n      ganttSegments.push(segment);\n    }\n\n    return ganttSegments;\n  };\n  /**\n   * To update task end date cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.endDateEdited = function (args) {\n    var ganttProb = args.data.ganttProperties;\n    var currentValue = args.data[this.parent.taskFields.endDate];\n    currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n\n    if (isNOU(currentValue)) {\n      this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n      this.parent.setRecordValue('duration', null, ganttProb, true);\n      this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n    } else {\n      if (currentValue.getHours() === 0 && this.parent.defaultEndTime !== 86400) {\n        this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, currentValue);\n      }\n\n      currentValue = this.parent.dateValidationModule.checkEndDate(currentValue, ganttProb);\n      this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n\n      if (!isNOU(ganttProb.startDate) && isNOU(ganttProb.duration)) {\n        if (this.parent.dateValidationModule.compareDates(ganttProb.endDate, ganttProb.startDate) === -1) {\n          this.parent.setRecordValue('endDate', new Date(ganttProb.startDate.getTime()), ganttProb, true);\n          this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, ganttProb.endDate);\n        }\n      } else if (!isNOU(ganttProb.duration) && isNOU(ganttProb.startDate)) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(ganttProb.endDate, ganttProb.duration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n      }\n\n      if (!isNullOrUndefined(ganttProb.segments)) {\n        ganttProb.segments = this.validateEndDateWithSegments(ganttProb);\n      }\n\n      if (this.compareDatesFromRecord(ganttProb) === -1) {\n        this.parent.dateValidationModule.calculateDuration(args.data);\n      } else {\n        this.parent.editModule.revertCellEdit(args);\n      }\n\n      this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n\n      if (ganttProb.isMilestone) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n      }\n    }\n\n    if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n      this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), args.data.ganttProperties, true);\n      this.parent.dataOperation.updateMappingData(args.data, 'segments');\n    }\n\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'duration');\n    this.parent.editModule.updateResourceRelatedFields(args.data, 'endDate');\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update duration cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.durationEdited = function (args) {\n    var ganttProb = args.data.ganttProperties;\n    var durationString = args.data[this.parent.taskFields.duration];\n    this.parent.dataOperation.updateDurationValue(durationString, ganttProb);\n    this.updateDates(args);\n    this.parent.editModule.updateResourceRelatedFields(args.data, 'duration');\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update start date, end date based on duration\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.updateDates = function (args) {\n    var ganttProb = args.data.ganttProperties;\n    var endDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.endDate);\n    var startDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.startDate);\n    var currentDuration = ganttProb.duration;\n\n    if (isNOU(currentDuration)) {\n      this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n      this.parent.setRecordValue('endDate', null, ganttProb, true);\n    } else {\n      if (isNOU(startDate) && !isNOU(endDate)) {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(endDate, currentDuration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n      }\n\n      if (currentDuration !== 0 && ganttProb.isMilestone) {\n        this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n      }\n\n      if (!isNullOrUndefined(ganttProb.segments) && ganttProb.segments.length > 0) {\n        this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), ganttProb, true);\n        this.parent.dataOperation.updateMappingData(args.data, 'segments');\n      }\n\n      this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n      this.parent.dateValidationModule.calculateEndDate(args.data);\n    }\n\n    this.parent.dataOperation.updateWidthLeft(args.data);\n    this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n    this.parent.dataOperation.updateMappingData(args.data, 'duration');\n  };\n  /**\n   * To update progress cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.progressEdited = function (args) {\n    var ganttRecord = args.data;\n    this.parent.setRecordValue('progress', ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress], ganttRecord.ganttProperties, true);\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.progress, ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress], args.data);\n\n    if (!ganttRecord.ganttProperties.isAutoSchedule) {\n      this.parent.setRecordValue('autoWidth', this.parent.dataOperation.calculateWidth(ganttRecord, false), ganttRecord.ganttProperties, true);\n    }\n\n    if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n      this.parent.editModule.taskbarEditModule.updateSegmentProgress(args.data.ganttProperties);\n    }\n\n    if (!args.data.hasChildRecords) {\n      var width = ganttRecord.ganttProperties.isAutoSchedule ? ganttRecord.ganttProperties.width : ganttRecord.ganttProperties.autoWidth;\n      this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(width, ganttRecord.ganttProperties.progress), ganttRecord.ganttProperties, true);\n    }\n\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update baselines with new baseline start date and baseline end date\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.baselineEdited = function (args) {\n    var ganttRecord = args.data.ganttProperties;\n    var baseLineStartDate = args.data[this.parent.taskFields.baselineStartDate];\n    var baseLineEndDate = args.data[this.parent.taskFields.baselineEndDate];\n\n    if (baseLineEndDate && baseLineEndDate.getHours() === 0 && this.parent.defaultEndTime !== 86400) {\n      this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, baseLineEndDate);\n    }\n\n    this.parent.setRecordValue('baselineStartDate', this.parent.dateValidationModule.checkBaselineStartDate(baseLineStartDate), ganttRecord, true);\n    this.parent.setRecordValue('baselineEndDate', this.parent.dateValidationModule.checkBaselineEndDate(baseLineEndDate), ganttRecord, true);\n\n    if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {\n      this.parent.setRecordValue('baselineLeft', this.parent.dataOperation.calculateBaselineLeft(ganttRecord), ganttRecord, true);\n      this.parent.setRecordValue('baselineWidth', this.parent.dataOperation.calculateBaselineWidth(ganttRecord), ganttRecord, true);\n    }\n\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To update task's resource cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @param {object} editedObj .\n   * @param {IGanttData} previousData .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.resourceEdited = function (args, editedObj, previousData) {\n    var resourceSettings = this.parent.resourceFields;\n    var editedResourceId = editedObj[this.parent.taskFields.resourceInfo];\n\n    if (editedResourceId) {\n      var tempResourceInfo = this.parent.dataOperation.setResourceInfo(editedObj);\n      var editedResouceLength = tempResourceInfo.length;\n      var previousResource = previousData.ganttProperties.resourceInfo;\n      var index = void 0;\n      var editedResources = [];\n      var resourceData = this.parent.resources;\n      var newIndex = void 0;\n\n      var _loop_1 = function (count) {\n        if (previousResource) {\n          var previousResourceLength = previousResource.length;\n\n          for (newIndex = 0; newIndex < previousResourceLength; newIndex++) {\n            if (previousResource[newIndex][resourceSettings.id] === editedResourceId[count]) {\n              index = newIndex;\n              break;\n            } else {\n              index = -1;\n            }\n          }\n        }\n\n        if (!isNOU(index) && index !== -1) {\n          editedResources.push(previousResource[index]);\n        } else {\n          var resource = resourceData.filter(function (resourceInfo) {\n            return editedResourceId[count] === resourceInfo[resourceSettings.id];\n          });\n          var ganttDataResource = extend({}, resource[0]);\n          ganttDataResource[resourceSettings.unit] = 100;\n          editedResources.push(ganttDataResource);\n        }\n      };\n\n      for (var count = 0; count < editedResouceLength; count++) {\n        _loop_1(count);\n      }\n\n      args.data.ganttProperties.resourceInfo = editedResources;\n      this.parent.dataOperation.updateMappingData(args.data, 'resourceInfo');\n      this.parent.editModule.updateResourceRelatedFields(args.data, 'resource');\n\n      if (this.parent.viewType === 'ResourceView') {\n        this.parent.editModule.dialogModule.isResourceUpdate = true;\n        this.parent.editModule.dialogModule.previousResource = previousResource;\n      }\n\n      this.updateDates(args);\n      this.updateEditedRecord(args);\n    }\n  };\n  /**\n   * To update task's predecessor cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} editedArgs .\n   * @param {object} cellEditArgs .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.dependencyEdited = function (editedArgs, cellEditArgs) {\n    this.parent.predecessorModule.updateUnscheduledDependency(editedArgs.data);\n\n    if (!this.parent.connectorLineEditModule.updatePredecessor(editedArgs.data, editedArgs.data[this.parent.taskFields.dependency], editedArgs)) {\n      this.parent.editModule.revertCellEdit(cellEditArgs);\n    }\n  };\n  /**\n   * To update task's work cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} editedArgs .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.workEdited = function (editedArgs) {\n    var ganttProb = editedArgs.data.ganttProperties;\n    var workValue = editedArgs.data[this.parent.taskFields.work];\n    this.parent.setRecordValue('work', workValue, ganttProb, true);\n    this.parent.editModule.updateResourceRelatedFields(editedArgs.data, 'work');\n    this.updateDates(editedArgs);\n    this.updateEditedRecord(editedArgs);\n  };\n  /**\n   * To update task type cell with new value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @param {object} editedObj .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.typeEdited = function (args, editedObj) {\n    var key = 'taskType';\n    var ganttProb = args.data.ganttProperties;\n    var taskType = editedObj[key];\n    this.parent.setRecordValue('taskType', taskType, ganttProb, true); //this.parent.dataOperation.updateMappingData(args.data, 'taskType');\n\n    this.updateEditedRecord(args);\n  };\n  /**\n   * To compare start date and end date from Gantt record\n   *\n   * @param {ITaskData} ganttRecord .\n   * @returns {number} .\n   */\n\n\n  CellEdit.prototype.compareDatesFromRecord = function (ganttRecord) {\n    var sDate = this.parent.dateValidationModule.getValidStartDate(ganttRecord);\n    var eDate = this.parent.dateValidationModule.getValidEndDate(ganttRecord);\n    return this.parent.dateValidationModule.compareDates(sDate, eDate);\n  };\n  /**\n   * To start method save action with edited cell value\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  CellEdit.prototype.updateEditedRecord = function (args) {\n    this.parent.editModule.initiateUpdateAction(args);\n  };\n  /**\n   * To remove all public private properties\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  CellEdit.prototype.destroy = function () {\n    // Destroy Method\n    this.parent.editModule.cellEditModule = undefined;\n  };\n\n  return CellEdit;\n}();\n\nexport { CellEdit };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.js"],"names":["isNullOrUndefined","isNOU","getValue","extend","TreeGrid","Edit","Deferred","CellEdit","ganttObj","isCellEdit","parent","bindTreeGridProperties","prototype","treeGrid","editSettings","allowEditing","allowNextRowEdit","mode","cellEdit","ensureEditCell","bind","Inject","args","_this","data","rowData","field","columnName","editedColumn","getColumnByField","ganttColumns","taskSettings","taskFields","readOnly","cancel","hasChildRecords","endDate","duration","dependency","progress","work","callBackPromise_1","trigger","arg","level","viewType","resolve","notes","openNotesEditor","toolbarModule","refreshToolbarItems","showInlineNotes","columnTypes","editModule","dialogModule","updatedEditFields","map","x","type","index","indexOf","openEditDialog","ganttProperties","rowUniqueID","tabObj","document","getElementById","element","id","ej2_instances","selectedItem","isValueChange","editedValue","previousValue","Date","getTime","taskData","resourceInfo","initiateCellEdit","editedObj","column","editedArgs","action","getTaskByUniqueID","uniqueID","allowUnscheduledTasks","startDate","initiateEditAction","setRecordValue","name","taskNameEdited","startDateEdited","endDateEdited","durationEdited","resourceEdited","progressEdited","baselineStartDate","baselineEndDate","baselineEdited","dependencyEdited","notedEdited","workEdited","typeEdited","manual","taskmodeEdited","initiateSaveAction","endEditAction","updateEditedRecord","updateTaskScheduleModes","ganttData","ganttProb","currentValue","dateValidationModule","checkStartDate","calculateEndDate","dataOperation","updateWidthLeft","updateMappingData","validateEndDateWithSegments","ganttProp","ganttSegments","segments","i","length","segment","getDuration","durationUnit","isAutoSchedule","isMilestone","push","getHours","defaultEndTime","setTime","checkEndDate","compareDates","getStartDate","compareDatesFromRecord","calculateDuration","revertCellEdit","setSegmentsInfo","updateResourceRelatedFields","durationString","updateDurationValue","updateDates","getDateFromFormat","currentDuration","ganttRecord","calculateWidth","taskbarEditModule","updateSegmentProgress","width","autoWidth","getProgressWidth","baseLineStartDate","baseLineEndDate","checkBaselineStartDate","checkBaselineEndDate","calculateBaselineLeft","calculateBaselineWidth","previousData","resourceSettings","resourceFields","editedResourceId","tempResourceInfo","setResourceInfo","editedResouceLength","previousResource","editedResources","resourceData","resources","newIndex","_loop_1","count","previousResourceLength","resource","filter","ganttDataResource","unit","isResourceUpdate","cellEditArgs","predecessorModule","updateUnscheduledDependency","connectorLineEditModule","updatePredecessor","workValue","key","taskType","sDate","getValidStartDate","eDate","getValidEndDate","initiateUpdateAction","destroy","cellEditModule","undefined"],"mappings":"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","sourcesContent":["import { isNullOrUndefined as isNOU, getValue, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { TreeGrid, Edit } from '@syncfusion/ej2-treegrid';\nimport { Deferred } from '@syncfusion/ej2-data';\n/**\n * To handle cell edit action on default columns and custom columns\n */\nvar CellEdit = /** @class */ (function () {\n    function CellEdit(ganttObj) {\n        /**\n         * @private\n         */\n        this.isCellEdit = false;\n        this.parent = ganttObj;\n        this.bindTreeGridProperties();\n    }\n    /**\n     * Bind all editing related properties from Gantt to TreeGrid\n     *\n     * @returns {void} .\n     */\n    CellEdit.prototype.bindTreeGridProperties = function () {\n        this.parent.treeGrid.editSettings.allowEditing = this.parent.editSettings.allowEditing;\n        this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n        this.parent.treeGrid.editSettings.mode = 'Cell';\n        this.parent.treeGrid.cellEdit = this.ensureEditCell.bind(this);\n        if (this.parent.editSettings.allowEditing) {\n            TreeGrid.Inject(Edit);\n        }\n    };\n    /**\n     * Ensure current cell was editable or not\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void | Deferred} .\n     */\n    CellEdit.prototype.ensureEditCell = function (args) {\n        var _this = this;\n        var data = args.rowData;\n        var field = args.columnName;\n        this.editedColumn = this.parent.getColumnByField(field, this.parent.ganttColumns);\n        var taskSettings = this.parent.taskFields;\n        if (this.parent.readOnly) {\n            args.cancel = true;\n            return;\n        }\n        if (this.parent.editSettings.mode === 'Dialog') {\n            args.cancel = true;\n            return;\n        }\n        if (data.hasChildRecords && (field === taskSettings.endDate || field === taskSettings.duration\n            || field === taskSettings.dependency || field === taskSettings.progress\n            || field === taskSettings.work || field === 'taskType')) {\n            args.cancel = true;\n        }\n        else {\n            var callBackPromise_1 = new Deferred();\n            this.parent.trigger('cellEdit', args, function (arg) {\n                if (data.level === 0 && _this.parent.viewType === 'ResourceView') {\n                    arg.cancel = true;\n                }\n                callBackPromise_1.resolve(arg);\n                if (!arg.cancel) {\n                    if (arg.columnName === _this.parent.taskFields.notes) {\n                        _this.openNotesEditor(arg);\n                    }\n                    else {\n                        _this.isCellEdit = true;\n                        if (!isNOU(_this.parent.toolbarModule)) {\n                            _this.parent.toolbarModule.refreshToolbarItems();\n                        }\n                    }\n                }\n            });\n            return callBackPromise_1;\n        }\n    };\n    /**\n     * To render edit dialog and to focus on notes tab\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.openNotesEditor = function (args) {\n        var taskSettings = this.parent.taskFields;\n        var data = args.rowData;\n        var field = args.columnName;\n        if ((field === taskSettings.notes && !this.parent.showInlineNotes)) {\n            args.cancel = true;\n            var columnTypes = this.parent.editModule.dialogModule.updatedEditFields.map(function (x) { return x.type; });\n            var index = columnTypes.indexOf('Notes');\n            if (index !== -1) {\n                this.parent.editModule.dialogModule.openEditDialog(data.ganttProperties.rowUniqueID);\n                var tabObj = document.getElementById(this.parent.element.id + '_Tab').ej2_instances[0];\n                tabObj.selectedItem = index;\n            }\n        }\n        if (field === taskSettings.notes && this.parent.showInlineNotes === true) {\n            this.isCellEdit = true;\n        }\n    };\n    CellEdit.prototype.isValueChange = function (args, field) {\n        var data = getValue('data', args);\n        var editedValue = data[field];\n        var previousValue = getValue('previousData', args);\n        if ((isNOU(editedValue) && !isNOU(previousValue)) || (!isNOU(editedValue) && isNOU(previousValue))) {\n            return true;\n        }\n        else if (!isNOU(editedValue) && !isNOU(previousValue)) {\n            if (editedValue instanceof Date) {\n                return editedValue.getTime() !== data.taskData[field].getTime() ? true : false;\n            }\n            else if (field === this.parent.taskFields.resourceInfo) {\n                return editedValue !== previousValue ? true : false;\n            }\n            else if (editedValue !== data.taskData[field]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Initiate cell save action on Gantt with arguments from TreeGrid\n     *\n     * @param {object} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.initiateCellEdit = function (args, editedObj) {\n        var column = getValue('column', args);\n        var data = getValue('data', args);\n        var editedArgs = {};\n        editedArgs.action = 'CellEditing';\n        editedArgs.data = this.parent.getTaskByUniqueID(data.uniqueID);\n        var previousValue = getValue('previousData', args);\n        var editedValue = this.parent.allowUnscheduledTasks ? data[column.field] : ((isNullOrUndefined(data[column.field])\n            || data[column.field] === '') && (this.parent.taskFields.duration === column.field ||\n            this.parent.taskFields.startDate === column.field || this.parent.taskFields.endDate === column.field)) ? previousValue\n            : data[column.field];\n        if (!isNOU(data)) {\n            data[column.field] = previousValue;\n            editedArgs.data[column.field] = previousValue;\n            this.parent.initiateEditAction(true);\n            this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n            if (column.field === this.parent.taskFields.name) {\n                this.taskNameEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.startDate) {\n                this.startDateEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.endDate) {\n                this.endDateEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.duration) {\n                this.durationEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.resourceInfo) {\n                this.resourceEdited(editedArgs, editedObj, data);\n            }\n            else if (column.field === this.parent.taskFields.progress) {\n                this.progressEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.baselineStartDate\n                || column.field === this.parent.taskFields.baselineEndDate) {\n                this.baselineEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.dependency) {\n                this.dependencyEdited(editedArgs, previousValue);\n            }\n            else if (column.field === this.parent.taskFields.notes) {\n                this.notedEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.work) {\n                this.workEdited(editedArgs);\n            }\n            else if (column.field === 'taskType' && !isNOU(this.parent.taskFields.work)) {\n                this.typeEdited(editedArgs, editedObj);\n            }\n            else if (column.field === this.parent.taskFields.manual) {\n                this.taskmodeEdited(editedArgs);\n            }\n            else {\n                this.parent.setRecordValue('taskData.' + column.field, editedArgs.data[column.field], editedArgs.data);\n                this.parent.editModule.initiateSaveAction(editedArgs);\n            }\n        }\n        else {\n            this.parent.editModule.endEditAction(args);\n        }\n        this.isCellEdit = false;\n        if (!isNOU(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    /**\n     * To update task name cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskNameEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.name, args.data[this.parent.taskFields.name], args.data);\n        this.parent.setRecordValue('taskName', args.data[this.parent.taskFields.name], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task notes cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.notedEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.notes, args.data[this.parent.taskFields.notes], args.data);\n        this.parent.setRecordValue('notes', args.data[this.parent.taskFields.notes], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task schedule mode cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskmodeEdited = function (args) {\n        this.parent.setRecordValue('isAutoSchedule', !args.data[this.parent.taskFields.manual], args.data.ganttProperties, true);\n        this.parent.editModule.updateTaskScheduleModes(args.data);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task start date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.startDateEdited = function (args) {\n        var ganttData = args.data;\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.startDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        currentValue = this.parent.dateValidationModule.checkStartDate(currentValue);\n        if (isNOU(currentValue)) {\n            if (!ganttData.hasChildRecords) {\n                this.parent.setRecordValue('startDate', null, ganttProb, true);\n                this.parent.setRecordValue('duration', null, ganttProb, true);\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                if (this.parent.allowUnscheduledTasks && isNOU(this.parent.taskFields.endDate)) {\n                    this.parent.setRecordValue('endDate', null, ganttProb, true);\n                }\n            }\n        }\n        else if (ganttProb.endDate || !isNOU(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(ganttData);\n        }\n        else if (isNOU(ganttProb.endDate) && isNOU(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n        }\n        this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n        this.updateEditedRecord(args);\n    };\n    CellEdit.prototype.validateEndDateWithSegments = function (ganttProp) {\n        var ganttSegments = [];\n        var segments = ganttProp.segments;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            var endDate = segment.endDate;\n            endDate = (!isNullOrUndefined(ganttProp.endDate)) && endDate.getTime() <\n                ganttProp.endDate.getTime() && i !== segments.length - 1 ? endDate : ganttProp.endDate;\n            segment.duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n            if (segments.length > 0 && endDate.getTime() < segment.startDate.getTime()\n                && endDate.getTime() <= ganttProp.endDate.getTime()) {\n                segments[i - 1].duration = this.parent.dataOperation.getDuration(segments[i - 1].startDate, ganttProp.endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n                continue;\n            }\n            ganttSegments.push(segment);\n        }\n        return ganttSegments;\n    };\n    /**\n     * To update task end date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.endDateEdited = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.endDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        if (isNOU(currentValue)) {\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            this.parent.setRecordValue('duration', null, ganttProb, true);\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        }\n        else {\n            if ((currentValue.getHours() === 0 && this.parent.defaultEndTime !== 86400)) {\n                this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, currentValue);\n            }\n            currentValue = this.parent.dateValidationModule.checkEndDate(currentValue, ganttProb);\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            if (!isNOU(ganttProb.startDate) && isNOU(ganttProb.duration)) {\n                if (this.parent.dateValidationModule.compareDates(ganttProb.endDate, ganttProb.startDate) === -1) {\n                    this.parent.setRecordValue('endDate', new Date(ganttProb.startDate.getTime()), ganttProb, true);\n                    this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, ganttProb.endDate);\n                }\n            }\n            else if (!isNOU(ganttProb.duration) && isNOU(ganttProb.startDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(ganttProb.endDate, ganttProb.duration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (!isNullOrUndefined(ganttProb.segments)) {\n                ganttProb.segments = this.validateEndDateWithSegments(ganttProb);\n            }\n            if (this.compareDatesFromRecord(ganttProb) === -1) {\n                this.parent.dateValidationModule.calculateDuration(args.data);\n            }\n            else {\n                this.parent.editModule.revertCellEdit(args);\n            }\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            if (ganttProb.isMilestone) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n        }\n        if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n            this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), args.data.ganttProperties, true);\n            this.parent.dataOperation.updateMappingData(args.data, 'segments');\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'endDate');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update duration cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.durationEdited = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var durationString = args.data[this.parent.taskFields.duration];\n        this.parent.dataOperation.updateDurationValue(durationString, ganttProb);\n        this.updateDates(args);\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'duration');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update start date, end date based on duration\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateDates = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var endDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.endDate);\n        var startDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.startDate);\n        var currentDuration = ganttProb.duration;\n        if (isNOU(currentDuration)) {\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n            this.parent.setRecordValue('endDate', null, ganttProb, true);\n        }\n        else {\n            if (isNOU(startDate) && !isNOU(endDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(endDate, currentDuration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (currentDuration !== 0 && ganttProb.isMilestone) {\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n            if (!isNullOrUndefined(ganttProb.segments) && ganttProb.segments.length > 0) {\n                this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), ganttProb, true);\n                this.parent.dataOperation.updateMappingData(args.data, 'segments');\n            }\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(args.data);\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n    };\n    /**\n     * To update progress cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.progressEdited = function (args) {\n        var ganttRecord = args.data;\n        this.parent.setRecordValue('progress', (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), ganttRecord.ganttProperties, true);\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.progress, (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), args.data);\n        if (!ganttRecord.ganttProperties.isAutoSchedule) {\n            this.parent.setRecordValue('autoWidth', this.parent.dataOperation.calculateWidth(ganttRecord, false), ganttRecord.ganttProperties, true);\n        }\n        if (!isNullOrUndefined(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n            this.parent.editModule.taskbarEditModule.updateSegmentProgress(args.data.ganttProperties);\n        }\n        if (!args.data.hasChildRecords) {\n            var width = ganttRecord.ganttProperties.isAutoSchedule ? ganttRecord.ganttProperties.width :\n                ganttRecord.ganttProperties.autoWidth;\n            this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(width, ganttRecord.ganttProperties.progress), ganttRecord.ganttProperties, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update baselines with new baseline start date and baseline end date\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.baselineEdited = function (args) {\n        var ganttRecord = args.data.ganttProperties;\n        var baseLineStartDate = args.data[this.parent.taskFields.baselineStartDate];\n        var baseLineEndDate = args.data[this.parent.taskFields.baselineEndDate];\n        if (baseLineEndDate && baseLineEndDate.getHours() === 0 && this.parent.defaultEndTime !== 86400) {\n            this.parent.dateValidationModule.setTime(this.parent.defaultEndTime, baseLineEndDate);\n        }\n        this.parent.setRecordValue('baselineStartDate', this.parent.dateValidationModule.checkBaselineStartDate(baseLineStartDate), ganttRecord, true);\n        this.parent.setRecordValue('baselineEndDate', this.parent.dateValidationModule.checkBaselineEndDate(baseLineEndDate), ganttRecord, true);\n        if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {\n            this.parent.setRecordValue('baselineLeft', this.parent.dataOperation.calculateBaselineLeft(ganttRecord), ganttRecord, true);\n            this.parent.setRecordValue('baselineWidth', this.parent.dataOperation.calculateBaselineWidth(ganttRecord), ganttRecord, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task's resource cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @param {IGanttData} previousData .\n     * @returns {void} .\n     */\n    CellEdit.prototype.resourceEdited = function (args, editedObj, previousData) {\n        var resourceSettings = this.parent.resourceFields;\n        var editedResourceId = editedObj[this.parent.taskFields.resourceInfo];\n        if (editedResourceId) {\n            var tempResourceInfo = this.parent.dataOperation.setResourceInfo(editedObj);\n            var editedResouceLength = tempResourceInfo.length;\n            var previousResource = previousData.ganttProperties.resourceInfo;\n            var index = void 0;\n            var editedResources = [];\n            var resourceData = this.parent.resources;\n            var newIndex = void 0;\n            var _loop_1 = function (count) {\n                if (previousResource) {\n                    var previousResourceLength = previousResource.length;\n                    for (newIndex = 0; newIndex < previousResourceLength; newIndex++) {\n                        if (previousResource[newIndex][resourceSettings.id] === editedResourceId[count]) {\n                            index = newIndex;\n                            break;\n                        }\n                        else {\n                            index = -1;\n                        }\n                    }\n                }\n                if (!isNOU(index) && index !== -1) {\n                    editedResources.push(previousResource[index]);\n                }\n                else {\n                    var resource = resourceData.filter(function (resourceInfo) {\n                        return (editedResourceId[count] === resourceInfo[resourceSettings.id]);\n                    });\n                    var ganttDataResource = extend({}, resource[0]);\n                    ganttDataResource[resourceSettings.unit] = 100;\n                    editedResources.push(ganttDataResource);\n                }\n            };\n            for (var count = 0; count < editedResouceLength; count++) {\n                _loop_1(count);\n            }\n            args.data.ganttProperties.resourceInfo = editedResources;\n            this.parent.dataOperation.updateMappingData(args.data, 'resourceInfo');\n            this.parent.editModule.updateResourceRelatedFields(args.data, 'resource');\n            if (this.parent.viewType === 'ResourceView') {\n                this.parent.editModule.dialogModule.isResourceUpdate = true;\n                this.parent.editModule.dialogModule.previousResource = previousResource;\n            }\n            this.updateDates(args);\n            this.updateEditedRecord(args);\n        }\n    };\n    /**\n     * To update task's predecessor cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @param {object} cellEditArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.dependencyEdited = function (editedArgs, cellEditArgs) {\n        this.parent.predecessorModule.updateUnscheduledDependency(editedArgs.data);\n        if (!this.parent.connectorLineEditModule.updatePredecessor(editedArgs.data, editedArgs.data[this.parent.taskFields.dependency], editedArgs)) {\n            this.parent.editModule.revertCellEdit(cellEditArgs);\n        }\n    };\n    /**\n     * To update task's work cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.workEdited = function (editedArgs) {\n        var ganttProb = editedArgs.data.ganttProperties;\n        var workValue = editedArgs.data[this.parent.taskFields.work];\n        this.parent.setRecordValue('work', workValue, ganttProb, true);\n        this.parent.editModule.updateResourceRelatedFields(editedArgs.data, 'work');\n        this.updateDates(editedArgs);\n        this.updateEditedRecord(editedArgs);\n    };\n    /**\n     * To update task type cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     */\n    CellEdit.prototype.typeEdited = function (args, editedObj) {\n        var key = 'taskType';\n        var ganttProb = args.data.ganttProperties;\n        var taskType = editedObj[key];\n        this.parent.setRecordValue('taskType', taskType, ganttProb, true);\n        //this.parent.dataOperation.updateMappingData(args.data, 'taskType');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To compare start date and end date from Gantt record\n     *\n     * @param {ITaskData} ganttRecord .\n     * @returns {number} .\n     */\n    CellEdit.prototype.compareDatesFromRecord = function (ganttRecord) {\n        var sDate = this.parent.dateValidationModule.getValidStartDate(ganttRecord);\n        var eDate = this.parent.dateValidationModule.getValidEndDate(ganttRecord);\n        return this.parent.dateValidationModule.compareDates(sDate, eDate);\n    };\n    /**\n     * To start method save action with edited cell value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateEditedRecord = function (args) {\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To remove all public private properties\n     *\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.destroy = function () {\n        // Destroy Method\n        this.parent.editModule.cellEditModule = undefined;\n    };\n    return CellEdit;\n}());\nexport { CellEdit };\n"]},"metadata":{},"sourceType":"module"}