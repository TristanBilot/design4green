{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js\";\nimport React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport './css/mainPage.css';\nimport './css/basketPage.scss';\nimport BasketPage from './BasketPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      categories: [],\n      isDisplayed: true\n    };\n    this.diplayModalBinded = this.diplayModal.bind(this);\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(200);\n    await this.loadCategories();\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    });\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  async loadCategories() {\n    let categories = this.state.dataframe.distinct(\"Famille d'origine\");\n    let categoryDivs = [];\n    var i = 0;\n    categories.chain(category => {\n      let cat = category.get(\"Famille d'origine\");\n\n      if (cat !== \"\") {\n        let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === cat).select(\"Famille d'origine\", \"RECOMMANDATION\");\n        let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\");\n        categoryDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SelectionList, {\n            recommandations: distinctRecommandations,\n            category: cat,\n            basketMethod: this.diplayModalBinded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, i++, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this));\n      }\n    });\n    this.setState({\n      categories: categoryDivs\n    });\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  diplayModal() {\n    this.setState({\n      isDisplayed: !this.state.isDisplayed\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"two\",\n        class: \"link-button button\",\n        children: \"Basket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), this.state.categories, /*#__PURE__*/_jsxDEV(BasketPage, {\n        id: \"modal-container\",\n        dataframe: this.state.dataframe\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SelectionPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js"],"names":["React","Component","SelectionList","csvFile","DataFrame","BasketPage","Papa","require","SelectionPage","constructor","props","state","dataframe","columns","categories","isDisplayed","diplayModalBinded","diplayModal","bind","componentWillMount","loadCsv","timeout","loadCategories","binded","loadCsvBinded","parse","download","complete","encoding","input","csv","data","slice","df","setState","translateCycleLifeToInteger","row","cycleLife","get","priorities","set","indexOf","sortDataframe","withColumn","chain","sortBy","translatePriorityToInteger","priority","distinct","categoryDivs","i","category","cat","recommandationsWithCategories","filter","select","distinctRecommandations","push","delay","Promise","res","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\nimport './css/mainPage.css'\nimport './css/basketPage.scss'\nimport BasketPage from './BasketPage';\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state =  {\n            dataframe: null,\n            columns: [],\n            categories: [],\n            isDisplayed: true,\n        }\n        this.diplayModalBinded = this.diplayModal.bind(this)\n    }\n\n    async componentWillMount() {\n        await this.loadCsv()\n        await this.timeout(200)\n        await this.loadCategories()\n    }\n\n    async loadCsv() {\n        if (this.state.dataframe == null) {\n            var binded = this.loadCsvBinded.bind(this)\n            Papa.parse(csvFile, {\n              download: true,\n              complete: binded,\n              encoding: 'UTF-8'\n          });\n        }\n    }\n    \n    loadCsvBinded(input) {\n        let csv = input.data\n        let columns = csv[0]\n        let data = csv.slice(1)\n        let df = new DataFrame(data, columns)\n    \n        // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n        this.setState({\n          \"columns\": columns,\n          \"dataframe\": df\n        })\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n    sortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n    }\n    translatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    async loadCategories() {\n        let categories = this.state.dataframe.distinct(\"Famille d'origine\")\n        let categoryDivs = []\n        var i = 0\n        categories.chain(category => {\n            let cat = category.get(\"Famille d'origine\")\n            if (cat !== \"\") {\n                let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === cat).select(\"Famille d'origine\", \"RECOMMANDATION\")\n                let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\")\n                \n                categoryDivs.push(\n                    <div key={i++}>\n                        <SelectionList recommandations={distinctRecommandations} category={cat} basketMethod={this.diplayModalBinded} />\n                    </div>\n                )\n            }\n        })\n\n        this.setState({\n            categories: categoryDivs\n        })\n    }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    diplayModal() {\n        this.setState({\n            isDisplayed: !this.state.isDisplayed\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {/* <div className={\"modal-background\" + (this.state.isDisplayed ? \"visible\": \"hidden\")}></div> */}\n                <button id=\"two\" class=\"link-button button\">Basket</button>\n                { this.state.categories }\n                <BasketPage id=\"modal-container\" dataframe={this.state.dataframe}></BasketPage>\n            </div>\n        );\n    }\n}\n\nexport default SelectionPage;\n"]},"metadata":{},"sourceType":"module"}