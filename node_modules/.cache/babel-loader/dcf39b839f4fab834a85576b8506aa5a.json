{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js\";\nimport React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.movies = {\n      upcoming: {\n        apiCall: \"upcoming\",\n        header: \"Stratégie\"\n      },\n      topRated: {\n        apiCall: \"top_rated\",\n        header: \"Spécifications\"\n      },\n      action: {\n        apiCall: 28,\n        header: \"Ux/Ui\"\n      },\n      adventure: {\n        apiCall: 12,\n        header: \"Contenus\"\n      },\n      animation: {\n        apiCall: 16,\n        header: \"Front-end\"\n      },\n      comedy: {\n        apiCall: 35,\n        header: \"Architecture\"\n      },\n      crime: {\n        apiCall: 80,\n        header: \"Back-end\"\n      },\n      mystery: {\n        apiCall: 878,\n        header: \"Hebergement\"\n      }\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(100);\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    });\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(this.movies).map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SelectionList, {\n          heading: this.movies[item].header,\n          apiCall: this.movies[item].apiCall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SelectionPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js"],"names":["React","Component","SelectionList","csvFile","DataFrame","Papa","require","SelectionPage","constructor","props","movies","upcoming","apiCall","header","topRated","action","adventure","animation","comedy","crime","mystery","componentWillMount","loadCsv","timeout","state","dataframe","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","columns","slice","df","setState","translateCycleLifeToInteger","row","cycleLife","get","priorities","set","indexOf","sortDataframe","withColumn","chain","sortBy","translatePriorityToInteger","priority","render","Object","keys","map","item","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n    constructor(props) {\n        super(props)\n        this.movies = {\n            upcoming: {\n                apiCall: \"upcoming\",\n                header:\n                \"Stratégie\"\n            },\n            topRated: {\n                apiCall: \"top_rated\",\n                header: \"Spécifications\"\n            },\n            action: {\n                apiCall: 28,\n                header: \"Ux/Ui\"\n            },\n            adventure: {\n                apiCall: 12,\n                header: \"Contenus\"\n            },\n            animation: {\n                apiCall: 16,\n                header: \"Front-end\"\n            },\n            comedy: {\n                apiCall: 35,\n                header: \"Architecture\"\n            },\n            crime: {\n                apiCall: 80,\n                header: \"Back-end\"\n            },\n            mystery: {\n                apiCall: 878,\n                header: \"Hebergement\"\n            }\n        };\n    }\n\n    async componentWillMount() {\n        await this.loadCsv()\n        await this.timeout(100)\n    }\n\n    async loadCsv() {\n        if (this.state.dataframe == null) {\n            var binded = this.loadCsvBinded.bind(this)\n            Papa.parse(csvFile, {\n              download: true,\n              complete: binded,\n              encoding: 'UTF-8'\n          });\n        }\n    }\n    \n    loadCsvBinded(input) {\n        let csv = input.data\n        let columns = csv[0]\n        let data = csv.slice(1)\n        let df = new DataFrame(data, columns)\n    \n        // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n        this.setState({\n          \"columns\": columns,\n          \"dataframe\": df\n        })\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\nsortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n    }\ntranslatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\ntranslateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    render() {\n        return (\n            <div>\n                {Object.keys(this.movies).map((item, i) => (\n                    <div key={i}>\n                        <SelectionList heading={this.movies[item].header} apiCall={this.movies[item].apiCall} />\n                    </div>\n            ))}\n            </div>\n        );\n    }\n}\n\nexport default SelectionPage;\n"]},"metadata":{},"sourceType":"module"}