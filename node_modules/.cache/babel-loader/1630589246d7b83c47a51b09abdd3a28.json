{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js\";\nimport React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport './css/mainPage.css';\nimport './css/basketPage.scss';\nimport BasketPage from './BasketPage';\nimport GraphPage from './GraphPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      categories: [],\n      isDisplayed: true,\n      basket: [],\n      shouldDisplayGraph: false\n    };\n    this.diplayModalBinded = this.diplayModal.bind(this);\n    this.displayGraphMethodBinded = this.displayGraphMethod.bind(this);\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(200);\n    await this.loadCategories();\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  formatBasketItem(row) {\n    let id = row.get(\"ID\");\n    let family = row.get(\"Famille d'origine\");\n    let recommandation = row.get(\"RECOMMANDATION\");\n    let criterion = row.get(\"CRITERES\");\n    let justifs = row.get(\"JUSTIFICATIONS\");\n    let cycle = row.get(\"Etape Cycle de Vie\");\n    let mandatory = row.get(\"incontournables\") === \"INCONTOURNABLE\";\n    let useCase = row.get(\"Use Case\");\n    return {\n      id: id,\n      family: family,\n      recommandation: recommandation,\n      criterion: criterion,\n      justifs: justifs,\n      cycle: cycle,\n      mandatory: mandatory,\n      useCase: useCase\n    };\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    let mandatoryCriterions = df.filter(row => row.get(\"incontournables\") === \"INCONTOURNABLE\").select(\"ID\", \"CRITERES\", \"Famille d'origine\", \"RECOMMANDATION\", \"CRITERES\", \"JUSTIFICATIONS\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\");\n    let basketItems = [];\n    mandatoryCriterions.chain(row => {\n      basketItems.push(this.formatBasketItem(row));\n      return row;\n    });\n    this.setState({\n      columns: columns,\n      dataframe: df,\n      basket: basketItems\n    });\n  }\n\n  async loadCategories() {\n    let categories = this.state.dataframe.distinct(\"Famille d'origine\");\n    let categoryDivs = [];\n    var i = 0;\n    categories.chain(category => {\n      let cat = category.get(\"Famille d'origine\");\n\n      if (cat !== \"\") {\n        let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === cat).select(\"Famille d'origine\", \"RECOMMANDATION\");\n        let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\");\n        categoryDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SelectionList, {\n            recommandations: distinctRecommandations,\n            category: cat,\n            basketMethod: this.diplayModalBinded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, i++, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this));\n      }\n    });\n    this.setState({\n      categories: categoryDivs\n    });\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  diplayModal() {\n    this.setState({\n      isDisplayed: !this.state.isDisplayed\n    });\n  }\n\n  displayGraphMethod() {\n    this.setState({\n      shouldDisplayGraph: true\n    });\n  }\n\n  render() {\n    let body = this.state.shouldDisplayGraph ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GraphPage, {\n        dataframe: this.state.dataframe,\n        basket: this.state.basket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"margin30\",\n        children: \"Choix des crit\\xE8res\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"two\",\n        class: \"link-button button basket-btn button-after\",\n        children: \"Go to cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), this.state.categories, /*#__PURE__*/_jsxDEV(BasketPage, {\n        id: \"modal-container\",\n        basket: this.state.basket,\n        displayGraphMethod: this.displayGraphMethodBinded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default SelectionPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js"],"names":["React","Component","SelectionList","csvFile","DataFrame","BasketPage","GraphPage","Papa","require","SelectionPage","constructor","props","state","dataframe","columns","categories","isDisplayed","basket","shouldDisplayGraph","diplayModalBinded","diplayModal","bind","displayGraphMethodBinded","displayGraphMethod","componentWillMount","loadCsv","timeout","loadCategories","binded","loadCsvBinded","parse","download","complete","encoding","formatBasketItem","row","id","get","family","recommandation","criterion","justifs","cycle","mandatory","useCase","input","csv","data","slice","df","mandatoryCriterions","filter","select","basketItems","chain","push","setState","distinct","categoryDivs","i","category","cat","recommandationsWithCategories","distinctRecommandations","delay","Promise","res","setTimeout","render","body"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\nimport './css/mainPage.css'\nimport './css/basketPage.scss'\nimport BasketPage from './BasketPage';\nimport GraphPage from './GraphPage';\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state =  {\n            dataframe: null,\n            columns: [],\n            categories: [],\n            isDisplayed: true,\n            basket: [],\n            shouldDisplayGraph: false,\n        }\n        this.diplayModalBinded = this.diplayModal.bind(this)\n        this.displayGraphMethodBinded = this.displayGraphMethod.bind(this)\n    }\n\n    async componentWillMount() {\n        await this.loadCsv()\n        await this.timeout(200)\n        await this.loadCategories()\n    }\n\n    async loadCsv() {\n        if (this.state.dataframe == null) {\n            var binded = this.loadCsvBinded.bind(this)\n            Papa.parse(csvFile, {\n              download: true,\n              complete: binded,\n              encoding: 'UTF-8'\n          });\n        }\n    }\n\n    formatBasketItem(row) {\n        let id = row.get(\"ID\")\n        let family = row.get(\"Famille d'origine\")\n        let recommandation = row.get(\"RECOMMANDATION\")\n        let criterion = row.get(\"CRITERES\")\n        let justifs = row.get(\"JUSTIFICATIONS\")\n        let cycle = row.get(\"Etape Cycle de Vie\")\n        let mandatory = row.get(\"incontournables\") === \"INCONTOURNABLE\"\n        let useCase = row.get(\"Use Case\")\n\n        return {\n            id: id,\n            family: family,\n            recommandation: recommandation,\n            criterion: criterion,\n            justifs: justifs,\n            cycle: cycle,\n            mandatory: mandatory,\n            useCase: useCase,\n        }\n    }\n    \n    loadCsvBinded(input) {\n        let csv = input.data\n        let columns = csv[0]\n        let data = csv.slice(1)\n        let df = new DataFrame(data, columns)\n    \n        // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n        let mandatoryCriterions = df.filter(row => \n            row.get(\"incontournables\") === \"INCONTOURNABLE\").select(\n                \"ID\", \"CRITERES\", \"Famille d'origine\", \"RECOMMANDATION\", \"CRITERES\", \"JUSTIFICATIONS\", \n                \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\"\n            )\n        let basketItems = []\n        mandatoryCriterions.chain(row => {\n            basketItems.push(this.formatBasketItem(row))\n            return row\n        })\n\n        this.setState({\n          columns: columns,\n          dataframe: df,\n          basket: basketItems\n        })\n    }\n\n    async loadCategories() {\n        let categories = this.state.dataframe.distinct(\"Famille d'origine\")\n        let categoryDivs = []\n        var i = 0\n        categories.chain(category => {\n            let cat = category.get(\"Famille d'origine\")\n            if (cat !== \"\") {\n                let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === cat).select(\"Famille d'origine\", \"RECOMMANDATION\")\n                let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\")\n                \n                categoryDivs.push(\n                    <div key={i++}>\n                        <SelectionList recommandations={distinctRecommandations} category={cat} basketMethod={this.diplayModalBinded} />\n                    </div>\n                )\n            }\n        })\n\n        this.setState({\n            categories: categoryDivs\n        })\n    }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    diplayModal() {\n        this.setState({\n            isDisplayed: !this.state.isDisplayed\n        })\n    }\n\n    displayGraphMethod() {\n        this.setState({\n            shouldDisplayGraph: true,\n        })\n    }\n\n    render() {\n        let body = (this.state.shouldDisplayGraph ?\n            <div>\n                <GraphPage dataframe={this.state.dataframe} basket={this.state.basket}></GraphPage>\n            </div>\n            :\n            <div>\n                <h2 className=\"margin30\">Choix des critères</h2>\n                <button id=\"two\" class=\"link-button button basket-btn button-after\">Go to cart</button>\n                { this.state.categories }\n                <BasketPage id=\"modal-container\" basket={this.state.basket} displayGraphMethod={this.displayGraphMethodBinded}></BasketPage>\n            </div>\n        );\n        return <div>\n            {body}\n        </div>\n    }\n}\n\nexport default SelectionPage;\n"]},"metadata":{},"sourceType":"module"}