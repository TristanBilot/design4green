{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js\";\nimport React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      categories: []\n    }; // this.movies = {\n    //     upcoming: {\n    //         apiCall: \"upcoming\",\n    //         header:\n    //         \"Stratégie\"\n    //     },\n    //     topRated: {\n    //         apiCall: \"top_rated\",\n    //         header: \"Spécifications\"\n    //     },\n    //     action: {\n    //         apiCall: 28,\n    //         header: \"Ux/Ui\"\n    //     },\n    //     adventure: {\n    //         apiCall: 12,\n    //         header: \"Contenus\"\n    //     },\n    //     animation: {\n    //         apiCall: 16,\n    //         header: \"Front-end\"\n    //     },\n    //     comedy: {\n    //         apiCall: 35,\n    //         header: \"Architecture\"\n    //     },\n    //     crime: {\n    //         apiCall: 80,\n    //         header: \"Back-end\"\n    //     },\n    //     mystery: {\n    //         apiCall: 878,\n    //         header: \"Hebergement\"\n    //     }\n    // };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(100);\n    await this.loadCategories();\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    });\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  async loadCategories() {\n    // if (this.state.dataframe == null) {\n    //     return\n    // }\n    let categories = this.state.dataframe.distinct(\"Famille d'origine\");\n    console.log(\"qsdjbdoznqsoidnqsdino\");\n    console.log(categories); // let categories = this.state.dataframe.get(\"Famille d'origine\").select(\"Famille d'origine\", \"RECOMMANDATION\")\n\n    let categoryDivs = [];\n    var i = 0;\n    categories.chain(category => {\n      let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === category.get(\"Famille d'origine\")).select(\"Famille d'origine\", \"RECOMMANDATION\");\n      let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\");\n      categoryDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [category.get(\"Famille d'origine\"), /*#__PURE__*/_jsxDEV(SelectionList, {\n          recommandations: distinctRecommandations,\n          category: category.get(\"Famille d'origine\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, i++, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this));\n    });\n    this.setState({\n      categories: categoryDivs\n    });\n    console.log(\"categoryDivs\");\n    console.log(categoryDivs); // let categories = this.dataframe.chain(row => row.get(\"Famille d'origine\"))\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  render() {\n    console.log(this.state.dataframe);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SelectionPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SelectionPage.js"],"names":["React","Component","SelectionList","csvFile","DataFrame","Papa","require","SelectionPage","constructor","props","state","dataframe","columns","categories","componentWillMount","loadCsv","timeout","loadCategories","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","slice","df","setState","translateCycleLifeToInteger","row","cycleLife","get","priorities","set","indexOf","sortDataframe","withColumn","chain","sortBy","translatePriorityToInteger","priority","distinct","console","log","categoryDivs","i","category","recommandationsWithCategories","filter","select","distinctRecommandations","push","delay","Promise","res","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SelectionList from \"./SelectionList\";\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\n\nconst Papa = require('papaparse');\n\nclass SelectionPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state =  {\n            dataframe: null,\n            columns: [],\n            categories: [],\n        }\n        // this.movies = {\n        //     upcoming: {\n        //         apiCall: \"upcoming\",\n        //         header:\n        //         \"Stratégie\"\n        //     },\n        //     topRated: {\n        //         apiCall: \"top_rated\",\n        //         header: \"Spécifications\"\n        //     },\n        //     action: {\n        //         apiCall: 28,\n        //         header: \"Ux/Ui\"\n        //     },\n        //     adventure: {\n        //         apiCall: 12,\n        //         header: \"Contenus\"\n        //     },\n        //     animation: {\n        //         apiCall: 16,\n        //         header: \"Front-end\"\n        //     },\n        //     comedy: {\n        //         apiCall: 35,\n        //         header: \"Architecture\"\n        //     },\n        //     crime: {\n        //         apiCall: 80,\n        //         header: \"Back-end\"\n        //     },\n        //     mystery: {\n        //         apiCall: 878,\n        //         header: \"Hebergement\"\n        //     }\n        // };\n    }\n\n    async componentWillMount() {\n        await this.loadCsv()\n        await this.timeout(100)\n        await this.loadCategories()\n    }\n\n    async loadCsv() {\n        if (this.state.dataframe == null) {\n            var binded = this.loadCsvBinded.bind(this)\n            Papa.parse(csvFile, {\n              download: true,\n              complete: binded,\n              encoding: 'UTF-8'\n          });\n        }\n    }\n    \n    loadCsvBinded(input) {\n        let csv = input.data\n        let columns = csv[0]\n        let data = csv.slice(1)\n        let df = new DataFrame(data, columns)\n    \n        // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n        this.setState({\n          \"columns\": columns,\n          \"dataframe\": df\n        })\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n    sortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n    }\n    translatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    async loadCategories() {\n        // if (this.state.dataframe == null) {\n        //     return\n        // }\n\n        let categories = this.state.dataframe.distinct(\"Famille d'origine\")\n        console.log(\"qsdjbdoznqsoidnqsdino\")\n        console.log(categories)\n        // let categories = this.state.dataframe.get(\"Famille d'origine\").select(\"Famille d'origine\", \"RECOMMANDATION\")\n        \n        let categoryDivs = []\n        var i = 0\n        categories.chain(category => {\n            let recommandationsWithCategories = this.state.dataframe.filter(row => row.get(\"Famille d'origine\") === category.get(\"Famille d'origine\")).select(\"Famille d'origine\", \"RECOMMANDATION\")\n            let distinctRecommandations = recommandationsWithCategories.distinct(\"RECOMMANDATION\")\n            \n            categoryDivs.push(\n                <div key={i++}>\n                    {category.get(\"Famille d'origine\")}\n                    <SelectionList recommandations={distinctRecommandations} category={category.get(\"Famille d'origine\")} />\n                </div>\n            )\n        })\n\n        this.setState({\n            categories: categoryDivs\n        })\n        console.log(\"categoryDivs\")\n        console.log(categoryDivs)\n        // let categories = this.dataframe.chain(row => row.get(\"Famille d'origine\"))\n\n    }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    render() {\n        console.log(this.state.dataframe)\n        return (\n            <div>\n                { this.state.categories }\n                {/* {Object.keys(this.movies).map((item, i) => (\n                    \n            ))} */}\n            </div>\n        );\n    }\n}\n\nexport default SelectionPage;\n"]},"metadata":{},"sourceType":"module"}