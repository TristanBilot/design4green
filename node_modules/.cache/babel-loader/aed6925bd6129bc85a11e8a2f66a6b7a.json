{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport Graph from \"./Graph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass SchemaPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      graph: []\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(100);\n    await this.getGanttGraph(); // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    });\n  }\n  /* dataframe getters */\n\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n  /* helpers */\n\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  } // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  //   await browser.close();\n  // } \n\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  render() {\n    console.log(this.state.graph);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-8 col-10\",\n            children: /*#__PURE__*/_jsxDEV(Graph, {\n              dataframe: this.state.dataframe\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SchemaPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js"],"names":["React","Component","Chart","csvFile","DataFrame","Graph","Papa","require","SchemaPage","constructor","props","state","dataframe","columns","graph","componentWillMount","loadCsv","timeout","getGanttGraph","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","slice","df","setState","sortDataframe","withColumn","chain","translateCycleLifeToInteger","sortBy","translatePriorityToInteger","row","priority","get","priorities","set","cycleLife","indexOf","delay","Promise","res","setTimeout","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\nimport Graph from \"./Graph\";\nconst Papa = require('papaparse');\n\nclass SchemaPage extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dataframe: null,\n      columns: [],\n      graph: [],\n    }\n  }\n\n  async componentWillMount() {\n      await this.loadCsv()\n      await this.timeout(100)\n      await this.getGanttGraph()\n      // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n        var binded = this.loadCsvBinded.bind(this)\n        Papa.parse(csvFile, {\n          download: true,\n          complete: binded,\n          encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data\n    let columns = csv[0]\n    let data = csv.slice(1)\n    let df = new DataFrame(data, columns)\n\n    // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    })\n  }\n\n  /* dataframe getters */\n\n  \n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\")\n    df = df.chain(this.translateCycleLifeToInteger)\n\n    // sort first by priority and then by cycle life to make groups\n    df = df.sortBy(\"Priorité\")\n    df = df.sortBy(\"Cycle life priority\")\n    return df\n  }\n\n  \n\n  /* helpers */\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\")\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4,\n    }\n    row = row.set(\"Priorité\", priorities[priority])\n    return row\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\")\n    let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n     'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n\n     row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n     return row\n  }\n\n  // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  \n  //   await browser.close();\n  // } \n\n  timeout(delay) {\n      return new Promise( res => setTimeout(res, delay) );\n  }\n\n  render() {\n    console.log(this.state.graph)\n    return (\n      <div className=\"header\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-2 col-1\"></div>\n            <div className=\"col-sm-8 col-10\">\n            <Graph dataframe={this.state.dataframe} />\n                \n            {/* <Chart\n              width={'100%'}\n              height={'400px'}\n              chartType=\"Gantt\"\n              loader={<div>Loading Chart</div>}\n              data={ this.state.graph }\n              options={{\n                height: 400,\n                gantt: {\n                  trackHeight: 30,\n                },\n              }}\n              rootProps={{ 'data-testid': '2' }}\n            /> */}\n            </div>\n            <div className=\"col-sm-2 col-1\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SchemaPage;\n"]},"metadata":{},"sourceType":"module"}