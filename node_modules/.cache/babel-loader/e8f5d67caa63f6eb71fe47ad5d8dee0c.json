{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js\";\nimport React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse');\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      graph: [],\n      graphLabels: []\n    };\n    this.taskFields = {\n      id: 'TaskID',\n      name: 'TaskName',\n      startDate: 'StartDate',\n      endDate: 'EndDate',\n      duration: 'Duration',\n      progress: 'Progress',\n      dependency: 'Predecessor',\n      child: 'subtasks',\n      resourceInfo: 'resources'\n    };\n    this.resourceFields = {\n      id: 'resourceId',\n      name: 'resourceName'\n    };\n    this.splitterSettings = {\n      columnIndex: 2\n    };\n    this.projectStartDate = new Date(2014, 2, 22);\n    this.projectEndDate = new Date(2014, 4, 22);\n    this.gridLines = 'Both';\n    this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n    this.timelineSettings = {\n      topTier: {\n        unit: 'Week',\n        format: 'MMM dd, y'\n      },\n      bottomTier: {\n        unit: 'Day'\n      }\n    };\n    this.labelSettings = {\n      leftLabel: 'TaskName',\n      rightLabel: 'resources'\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(100);\n    await this.getGanttGraph();\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.setState({\n      \"columns\": columns,\n      \"dataframe\": df\n    });\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  async getGanttGraph(criterions) {\n    console.log(\"this.state.dataframe\");\n    console.log(this.state.dataframe);\n    if (this.state.dataframe == null) return [];\n    let df = this.getGanttInfoAsDataframe([\"STR-1.07\", \"STR-1.C09\", \"STR-1.16\", \"STR-3.C06\", \"STR-3.C05\", \"STR-3.07\"]);\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let graph = [];\n    let labels = [];\n    let day = 1000 * 60 * 60 * 24;\n    let baseXPosition = new Date(2014, 2, 22);\n    let widthOfCycleLife = 4;\n    let i = 1;\n    var lastRow = null;\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      let begXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day);\n      let endXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day + widthOfCycleLife * day);\n      let node = {\n        TaskID: i,\n        TaskName: row.get(\"Use Case\"),\n        StartDate: begXPosition,\n        EndDate: endXPosition,\n        subtasks: [] // Predecessor: 2\n\n      };\n\n      if (lastRow != null && lastRow.get(\"Etape Cycle de Vie\") != row.get(\"Etape Cycle de Vie\")) {\n        console.log(\"AZAZAZAZA\");\n        node[\"Predecessor\"] = i - 1;\n      }\n\n      graph.push(node);\n      if (lastRow != null) console.log(lastRow.get(\"Etape Cycle de Vie\"));\n      console.log(row.get(\"Etape Cycle de Vie\"));\n      console.log(\"=>\");\n      lastRow = row;\n      labels.push({\n        resourceId: i++,\n        resourceName: row.get(\"CRITERES\")\n      });\n    }); // graph[2][\"Predecessor\"] = 2\n\n    console.log(graph);\n    this.setState({\n      graph: graph,\n      graphLabels: labels\n    });\n  }\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []; // for each id, fetch the required column infos \n\n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row.get(\"ID\") === id).select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    return totalDf;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  toolbarClick(args) {\n    if (args.item.id === \"GanttExport_excelexport\") {\n      this.ganttInstance.excelExport();\n    } else if (args.item.id === \"GanttExport_csvexport\") {\n      this.ganttInstance.csvExport();\n    } else if (args.item.id === \"GanttExport_pdfexport\") {\n      this.ganttInstance.pdfExport();\n    }\n  }\n\n  render() {\n    console.log(editingResources);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-pane\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: /*#__PURE__*/_jsxDEV(GanttComponent, {\n          id: \"GanttExport\",\n          ref: gantt => this.ganttInstance = gantt,\n          dataSource: this.state.graph,\n          dateFormat: 'MMM dd, y',\n          treeColumnIndex: 1,\n          allowExcelExport: true,\n          allowPdfExport: true,\n          allowSelection: true,\n          showColumnMenu: false,\n          highlightWeekends: true,\n          allowUnscheduledTasks: true,\n          projectStartDate: this.projectStartDate,\n          projectEndDate: this.projectEndDate,\n          splitterSettings: this.splitterSettings,\n          taskFields: this.taskFields,\n          timelineSettings: this.timelineSettings,\n          labelSettings: this.labelSettings,\n          toolbarClick: this.toolbarClick.bind(this),\n          height: \"410px\",\n          gridLines: this.gridLines,\n          toolbar: this.toolbar,\n          resourceFields: this.resourceFields,\n          resources: editingResources,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskID\",\n              width: \"60\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskName\",\n              width: \"250\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"StartDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"EndDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Predecessor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"resources\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Selection, Toolbar, ExcelExport, PdfExport]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js"],"names":["React","Component","GanttComponent","Inject","Selection","Toolbar","ExcelExport","PdfExport","ColumnsDirective","ColumnDirective","editingData","editingResources","csvFile","DataFrame","Papa","require","Graph","constructor","props","state","dataframe","columns","graph","graphLabels","taskFields","id","name","startDate","endDate","duration","progress","dependency","child","resourceInfo","resourceFields","splitterSettings","columnIndex","projectStartDate","Date","projectEndDate","gridLines","toolbar","timelineSettings","topTier","unit","format","bottomTier","labelSettings","leftLabel","rightLabel","componentWillMount","loadCsv","timeout","getGanttGraph","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","slice","df","setState","translateCycleLifeToInteger","row","cycleLife","get","priorities","set","indexOf","criterions","console","log","getGanttInfoAsDataframe","cycleLifeCategories","labels","day","baseXPosition","widthOfCycleLife","i","lastRow","chain","cycleLifeIndex","begXPosition","getTime","endXPosition","node","TaskID","TaskName","StartDate","EndDate","subtasks","push","resourceId","resourceName","ids","dfs","forEach","filter","select","totalDf","union","translatePriorityToInteger","sortDataframe","withColumn","sortBy","priority","delay","Promise","res","setTimeout","toolbarClick","args","item","ganttInstance","excelExport","csvExport","pdfExport","render","gantt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\n\nconst Papa = require('papaparse');\n\nclass Graph extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataframe: null,\n            columns: [],\n            graph: [],\n            graphLabels: [],\n          }\n\n        this.taskFields = {\n            id: 'TaskID',\n            name: 'TaskName',\n            startDate: 'StartDate',\n            endDate: 'EndDate',\n            duration: 'Duration',\n            progress: 'Progress',\n            dependency: 'Predecessor',\n            child: 'subtasks',\n            resourceInfo: 'resources'\n        };\n        this.resourceFields = {\n            id: 'resourceId',\n            name: 'resourceName'\n        };\n        this.splitterSettings = {\n            columnIndex: 2\n        };\n        this.projectStartDate = new Date(2014, 2, 22)\n        this.projectEndDate = new Date(2014, 4, 22)\n        this.gridLines = 'Both';\n        this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n        this.timelineSettings = {\n            topTier: {\n                unit: 'Week',\n                format: 'MMM dd, y',\n            },\n            bottomTier: {\n                unit: 'Day',\n            },\n        };\n        this.labelSettings = {\n            leftLabel: 'TaskName',\n            rightLabel: 'resources'\n        };\n    }\n\n    async componentWillMount() {\n        await this.loadCsv()\n        await this.timeout(100)\n        await this.getGanttGraph()\n    }\n\n    async loadCsv() {\n        if (this.state.dataframe == null) {\n            var binded = this.loadCsvBinded.bind(this)\n            Papa.parse(csvFile, {\n              download: true,\n              complete: binded,\n              encoding: 'UTF-8'\n          });\n        }\n    }\n    \n    loadCsvBinded(input) {\n        let csv = input.data\n        let columns = csv[0]\n        let data = csv.slice(1)\n        let df = new DataFrame(data, columns)\n    \n        // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n        this.setState({\n          \"columns\": columns,\n          \"dataframe\": df\n        })\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    async getGanttGraph(criterions) {\n        console.log(\"this.state.dataframe\")\n        console.log(this.state.dataframe)\n        if (this.state.dataframe == null)\n            return []\n    \n        let df = this.getGanttInfoAsDataframe([\n            \"STR-1.07\",\n            \"STR-1.C09\",\n            \"STR-1.16\",\n            \"STR-3.C06\",\n            \"STR-3.C05\",\n            \"STR-3.07\"\n        ])\n    \n        let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n            'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n        let graph = []\n        let labels = []\n        let day = 1000*60*60*24\n        let baseXPosition = new Date(2014, 2, 22)\n        let widthOfCycleLife = 4\n        let i = 1\n        var lastRow = null;\n\n        df.chain(row => {\n            let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n            let begXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day)\n            let endXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day + widthOfCycleLife * day)\n    \n            let node = {\n                TaskID: i,\n                TaskName: row.get(\"Use Case\"),\n                StartDate: begXPosition,\n                EndDate: endXPosition,\n                subtasks: [],\n                // Predecessor: 2\n            }\n            if (lastRow != null && lastRow.get(\"Etape Cycle de Vie\") != row.get(\"Etape Cycle de Vie\")) {\n                console.log(\"AZAZAZAZA\")\n                node[\"Predecessor\"] = i - 1\n            }\n\n            graph.push(node)\n            if (lastRow != null)\n                console.log(lastRow.get(\"Etape Cycle de Vie\"))\n            console.log(row.get(\"Etape Cycle de Vie\"))\n            console.log(\"=>\")\n            lastRow = row\n\n            labels.push({\n                resourceId: i++,\n                resourceName: row.get(\"CRITERES\")\n            })\n        })\n        // graph[2][\"Predecessor\"] = 2\n        console.log(graph)\n    \n        this.setState({\n            graph: graph,\n            graphLabels: labels,\n        })\n    }\n\n    getGanttInfoAsDataframe(ids) {\n        let dfs = []\n    \n        // for each id, fetch the required column infos \n        ids.forEach(id => {\n            let df = this.state.dataframe.filter(row => row\n            .get(\"ID\") === id)\n            .select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n            dfs.push(df)\n        })\n        \n        // merge all the rows dataframes in one dataframe\n        let totalDf = new DataFrame([]);\n        dfs.forEach(df => {\n            totalDf = totalDf.union(df)\n        })\n    \n        // parse the priority to integers\n        totalDf = totalDf.chain(this.translatePriorityToInteger)\n        totalDf = this.sortDataframe(totalDf)\n        return totalDf\n    }\n\n    sortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n      }\n\n    translatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    toolbarClick(args) {\n        if (args.item.id === \"GanttExport_excelexport\") {\n            this.ganttInstance.excelExport();\n        }\n        else if (args.item.id === \"GanttExport_csvexport\") {\n            this.ganttInstance.csvExport();\n        }\n        else if (args.item.id === \"GanttExport_pdfexport\") {\n            this.ganttInstance.pdfExport();\n        }\n    }\n    render() {\n        console.log(editingResources)\n        return (<div className='control-pane'>\n        <div className='control-section'>\n          <GanttComponent id='GanttExport' ref={gantt => this.ganttInstance = gantt} dataSource={this.state.graph} dateFormat={'MMM dd, y'} treeColumnIndex={1} allowExcelExport={true} allowPdfExport={true} allowSelection={true} showColumnMenu={false} highlightWeekends={true} allowUnscheduledTasks={true} projectStartDate={this.projectStartDate} projectEndDate={this.projectEndDate} splitterSettings={this.splitterSettings} taskFields={this.taskFields} timelineSettings={this.timelineSettings} labelSettings={this.labelSettings} toolbarClick={this.toolbarClick.bind(this)} height='410px' gridLines={this.gridLines} toolbar={this.toolbar} resourceFields={this.resourceFields} resources={editingResources}>\n            <ColumnsDirective>\n              <ColumnDirective field='TaskID' width='60'></ColumnDirective>\n              <ColumnDirective field='TaskName' width='250'></ColumnDirective>\n              <ColumnDirective field='StartDate'></ColumnDirective>\n              <ColumnDirective field='EndDate'></ColumnDirective>\n              <ColumnDirective field='Duration'></ColumnDirective>\n              <ColumnDirective field='Predecessor'></ColumnDirective>\n              <ColumnDirective field='resources'></ColumnDirective>\n              <ColumnDirective field='Progress'></ColumnDirective>\n            </ColumnsDirective>\n            <Inject services={[Selection, Toolbar, ExcelExport, PdfExport]}/>\n          </GanttComponent>\n        </div>\n      </div>);\n    }\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}