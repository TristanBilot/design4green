{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse'); // const puppeteer = require('puppeteer');\n\n\nclass SchemaPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: [],\n      graph: []\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv();\n    await this.timeout(100);\n    await this.getGanttGraph(); // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.state.columns = columns;\n    this.state.dataframe = df;\n  }\n  /* dataframe getters */\n\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []; // for each id, fetch the required column infos \n\n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row.get(\"ID\") === id).select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    return totalDf;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  async getGanttGraph(criterions) {\n    if (this.state.dataframe == null) return [];\n    let df = this.getGanttInfoAsDataframe([\"STR-1.07\", \"STR-1.C09\", \"STR-1.16\", \"STR-3.C06\", \"STR-3.C05\", \"STR-3.07\"]);\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let baseXPosition = new Date(2014, 2, 22);\n    let widthOfCycleLife = 4;\n    let graph = [[{\n      type: 'string',\n      label: 'Task ID'\n    }, {\n      type: 'string',\n      label: 'Task Name'\n    }, {\n      type: 'string',\n      label: 'Resource'\n    }, {\n      type: 'date',\n      label: 'Start Date'\n    }, {\n      type: 'date',\n      label: 'End Date'\n    }, {\n      type: 'number',\n      label: 'Duration'\n    }, {\n      type: 'number',\n      label: 'Percent Complete'\n    }, {\n      type: 'string',\n      label: 'Dependencies'\n    }]];\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      let begXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * 1000 * 60 * 60 * 24);\n      let endXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * 1000 * 60 * 60 * 24 * 2);\n      graph.push([row.get(\"CRITERES\"), 'Spring 2014', 'spring', begXPosition, endXPosition, null, 100, null]);\n    });\n    this.setState({\n      graph: graph\n    });\n    return graph;\n  }\n  /* helpers */\n\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  } // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  //   await browser.close();\n  // } \n\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  render() {\n    console.log(this.state.graph);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-8 col-10\",\n            children: /*#__PURE__*/_jsxDEV(Chart, {\n              width: '100%',\n              height: '400px',\n              chartType: \"Gantt\",\n              loader: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading Chart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 11\n              }, this),\n              data: this.state.graph,\n              options: {\n                height: 400,\n                gantt: {\n                  trackHeight: 30\n                }\n              },\n              rootProps: {\n                'data-testid': '2'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SchemaPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js"],"names":["React","Component","Chart","csvFile","DataFrame","Papa","require","SchemaPage","constructor","props","state","dataframe","columns","graph","componentWillMount","loadCsv","timeout","getGanttGraph","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","slice","df","getGanttInfoAsDataframe","ids","dfs","forEach","id","filter","row","get","select","push","totalDf","union","chain","translatePriorityToInteger","sortDataframe","withColumn","translateCycleLifeToInteger","sortBy","criterions","cycleLifeCategories","baseXPosition","Date","widthOfCycleLife","type","label","cycleLifeIndex","indexOf","begXPosition","getTime","endXPosition","setState","priority","priorities","set","cycleLife","delay","Promise","res","setTimeout","render","console","log","height","gantt","trackHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,yBAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB,C,CACA;;;AAGA,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAEjCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEuB,QAAlBC,kBAAkB,GAAG;AACvB,UAAM,KAAKC,OAAL,EAAN;AACA,UAAM,KAAKC,OAAL,CAAa,GAAb,CAAN;AACA,UAAM,KAAKC,aAAL,EAAN,CAHuB,CAIvB;AACH;;AAEY,QAAPF,OAAO,GAAG;AACd,QAAI,KAAKL,KAAL,CAAWC,SAAX,IAAwB,IAA5B,EAAkC;AAC9B,UAAIO,MAAM,GAAG,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAb;AACAf,MAAAA,IAAI,CAACgB,KAAL,CAAWlB,OAAX,EAAoB;AAClBmB,QAAAA,QAAQ,EAAE,IADQ;AAElBC,QAAAA,QAAQ,EAAEL,MAFQ;AAGlBM,QAAAA,QAAQ,EAAE;AAHQ,OAApB;AAKH;AACF;;AAEDL,EAAAA,aAAa,CAACM,KAAD,EAAQ;AACnB,QAAIC,GAAG,GAAGD,KAAK,CAACE,IAAhB;AACA,QAAIf,OAAO,GAAGc,GAAG,CAAC,CAAD,CAAjB;AACA,QAAIC,IAAI,GAAGD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAX;AACA,QAAIC,EAAE,GAAG,IAAIzB,SAAJ,CAAcuB,IAAd,EAAoBf,OAApB,CAAT,CAJmB,CAMnB;;AAEA,SAAKF,KAAL,CAAWE,OAAX,GAAqBA,OAArB;AACA,SAAKF,KAAL,CAAWC,SAAX,GAAuBkB,EAAvB;AACD;AAED;;;AAEAC,EAAAA,uBAAuB,CAACC,GAAD,EAAM;AAC3B,QAAIC,GAAG,GAAG,EAAV,CAD2B,CAG3B;;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAYC,EAAE,IAAI;AAChB,UAAIL,EAAE,GAAG,KAAKnB,KAAL,CAAWC,SAAX,CAAqBwB,MAArB,CAA4BC,GAAG,IAAIA,GAAG,CAC5CC,GADyC,CACrC,IADqC,MAC3BH,EADR,EAENI,MAFM,CAEC,UAFD,EAEa,oBAFb,EAEmC,iBAFnC,EAEsD,UAFtD,EAEkE,gBAFlE,EAEoF,UAFpF,CAAT;AAGAN,MAAAA,GAAG,CAACO,IAAJ,CAASV,EAAT;AACD,KALD,EAJ2B,CAW3B;;AACA,QAAIW,OAAO,GAAG,IAAIpC,SAAJ,CAAc,EAAd,CAAd;AACA4B,IAAAA,GAAG,CAACC,OAAJ,CAAYJ,EAAE,IAAI;AAChBW,MAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAcZ,EAAd,CAAV;AACD,KAFD,EAb2B,CAiB3B;;AACAW,IAAAA,OAAO,GAAGA,OAAO,CAACE,KAAR,CAAc,KAAKC,0BAAnB,CAAV;AACAH,IAAAA,OAAO,GAAG,KAAKI,aAAL,CAAmBJ,OAAnB,CAAV;AACA,WAAOA,OAAP;AACD;;AAEDI,EAAAA,aAAa,CAACf,EAAD,EAAK;AAChB;AACAA,IAAAA,EAAE,GAAGA,EAAE,CAACgB,UAAH,CAAc,qBAAd,CAAL;AACAhB,IAAAA,EAAE,GAAGA,EAAE,CAACa,KAAH,CAAS,KAAKI,2BAAd,CAAL,CAHgB,CAKhB;;AACAjB,IAAAA,EAAE,GAAGA,EAAE,CAACkB,MAAH,CAAU,UAAV,CAAL;AACAlB,IAAAA,EAAE,GAAGA,EAAE,CAACkB,MAAH,CAAU,qBAAV,CAAL;AACA,WAAOlB,EAAP;AACD;;AAEkB,QAAbZ,aAAa,CAAC+B,UAAD,EAAa;AAC9B,QAAI,KAAKtC,KAAL,CAAWC,SAAX,IAAwB,IAA5B,EACE,OAAO,EAAP;AACF,QAAIkB,EAAE,GAAG,KAAKC,uBAAL,CAA6B,CACpC,UADoC,EAEpC,WAFoC,EAGpC,UAHoC,EAIpC,WAJoC,EAKpC,WALoC,EAMpC,UANoC,CAA7B,CAAT;AASA,QAAImB,mBAAmB,GAAG,CAAE,aAAF,EAAiB,YAAjB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,gBAA7D,EACzB,aADyB,EACV,aADU,EACK,YADL,EACmB,gBADnB,CAA1B;AAEA,QAAIC,aAAa,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;AAEA,QAAIvC,KAAK,GAAG,CAAC,CACX;AAAEwC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KADW,EAEX;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAFW,EAGX;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAHW,EAIX;AAAED,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAJW,EAKX;AAAED,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KALW,EAMX;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KANW,EAOX;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAPW,EAQX;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KARW,CAAD,CAAZ;AAUAzB,IAAAA,EAAE,CAACa,KAAH,CAASN,GAAG,IAAI;AACd,UAAImB,cAAc,GAAGN,mBAAmB,CAACO,OAApB,CAA4BpB,GAAG,CAACC,GAAJ,CAAQ,oBAAR,CAA5B,CAArB;AACA,UAAIoB,YAAY,GAAG,IAAIN,IAAJ,CAASD,aAAa,CAACQ,OAAd,KAA2BN,gBAAgB,GAAGG,cAApB,GAAsC,IAAtC,GAA2C,EAA3C,GAA8C,EAA9C,GAAiD,EAApF,CAAnB;AACA,UAAII,YAAY,GAAG,IAAIR,IAAJ,CAASD,aAAa,CAACQ,OAAd,KAA2BN,gBAAgB,GAAGG,cAApB,GAAsC,IAAtC,GAA2C,EAA3C,GAA8C,EAA9C,GAAiD,EAAjD,GAAsD,CAAzF,CAAnB;AAEA1C,MAAAA,KAAK,CAAC0B,IAAN,CAAW,CACTH,GAAG,CAACC,GAAJ,CAAQ,UAAR,CADS,EAET,aAFS,EAGT,QAHS,EAIToB,YAJS,EAKTE,YALS,EAMT,IANS,EAOT,GAPS,EAQT,IARS,CAAX;AAUD,KAfD;AAiBA,SAAKC,QAAL,CAAc;AACZ/C,MAAAA,KAAK,EAAEA;AADK,KAAd;AAGA,WAAOA,KAAP;AACD;AAED;;;AAEA8B,EAAAA,0BAA0B,CAACP,GAAD,EAAM;AAC9B,QAAIyB,QAAQ,GAAGzB,GAAG,CAACC,GAAJ,CAAQ,UAAR,CAAf;AACA,QAAIyB,UAAU,GAAG;AACf,aAAO,CADQ;AAEf,gBAAU,CAFK;AAGf,cAAQ,CAHO;AAIf,UAAI;AAJW,KAAjB;AAMA1B,IAAAA,GAAG,GAAGA,GAAG,CAAC2B,GAAJ,CAAQ,UAAR,EAAoBD,UAAU,CAACD,QAAD,CAA9B,CAAN;AACA,WAAOzB,GAAP;AACD;;AAEDU,EAAAA,2BAA2B,CAACV,GAAD,EAAM;AAC/B,QAAI4B,SAAS,GAAG5B,GAAG,CAACC,GAAJ,CAAQ,oBAAR,CAAhB;AACA,QAAIyB,UAAU,GAAG,CAAE,aAAF,EAAiB,YAAjB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,gBAA7D,EAChB,aADgB,EACD,aADC,EACc,YADd,EAC4B,gBAD5B,CAAjB;AAGC1B,IAAAA,GAAG,GAAGA,GAAG,CAAC2B,GAAJ,CAAQ,qBAAR,EAA+BD,UAAU,CAACN,OAAX,CAAmBQ,SAAnB,CAA/B,CAAN;AACA,WAAO5B,GAAP;AACF,GApJgC,CAsJjC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEApB,EAAAA,OAAO,CAACiD,KAAD,EAAQ;AACX,WAAO,IAAIC,OAAJ,CAAaC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,KAAN,CAA9B,CAAP;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7D,KAAL,CAAWG,KAAvB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,mCAEA,QAAC,KAAD;AACV,cAAA,KAAK,EAAE,MADG;AAEV,cAAA,MAAM,EAAE,OAFE;AAGV,cAAA,SAAS,EAAC,OAHA;AAIV,cAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJE;AAKV,cAAA,IAAI,EAAG,KAAKH,KAAL,CAAWG,KALR;AAMV,cAAA,OAAO,EAAE;AACP2D,gBAAAA,MAAM,EAAE,GADD;AAEPC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,WAAW,EAAE;AADR;AAFA,eANC;AAYV,cAAA,SAAS,EAAE;AAAE,+BAAe;AAAjB;AAZD;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAmBE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AAtMgC;;AAyMnC,eAAenE,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\nconst Papa = require('papaparse');\n// const puppeteer = require('puppeteer');\n\n\nclass SchemaPage extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dataframe: null,\n      columns: [],\n      graph: [],\n    }\n  }\n\n  async componentWillMount() {\n      await this.loadCsv()\n      await this.timeout(100)\n      await this.getGanttGraph()\n      // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n        var binded = this.loadCsvBinded.bind(this)\n        Papa.parse(csvFile, {\n          download: true,\n          complete: binded,\n          encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data\n    let columns = csv[0]\n    let data = csv.slice(1)\n    let df = new DataFrame(data, columns)\n\n    // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.state.columns = columns\n    this.state.dataframe = df\n  }\n\n  /* dataframe getters */\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []\n\n    // for each id, fetch the required column infos \n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row\n        .get(\"ID\") === id)\n        .select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df)\n    })\n    \n    // merge all the rows dataframes in one dataframe\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df)\n    })\n\n    // parse the priority to integers\n    totalDf = totalDf.chain(this.translatePriorityToInteger)\n    totalDf = this.sortDataframe(totalDf)\n    return totalDf\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\")\n    df = df.chain(this.translateCycleLifeToInteger)\n\n    // sort first by priority and then by cycle life to make groups\n    df = df.sortBy(\"Priorité\")\n    df = df.sortBy(\"Cycle life priority\")\n    return df\n  }\n\n  async getGanttGraph(criterions) {\n    if (this.state.dataframe == null)\n      return []\n    let df = this.getGanttInfoAsDataframe([\n      \"STR-1.07\",\n      \"STR-1.C09\",\n      \"STR-1.16\",\n      \"STR-3.C06\",\n      \"STR-3.C05\",\n      \"STR-3.07\"\n    ])\n\n    let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n     'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    let baseXPosition = new Date(2014, 2, 22)\n    let widthOfCycleLife = 4\n\n    let graph = [[\n      { type: 'string', label: 'Task ID' },\n      { type: 'string', label: 'Task Name' },\n      { type: 'string', label: 'Resource' },\n      { type: 'date', label: 'Start Date' },\n      { type: 'date', label: 'End Date' },\n      { type: 'number', label: 'Duration' },\n      { type: 'number', label: 'Percent Complete' },\n      { type: 'string', label: 'Dependencies' },\n    ]]\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n      let begXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * 1000*60*60*24)\n      let endXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * 1000*60*60*24 * 2)\n\n      graph.push([\n        row.get(\"CRITERES\"),\n        'Spring 2014',\n        'spring',\n        begXPosition,\n        endXPosition,\n        null,\n        100,\n        null,\n      ])\n    })\n\n    this.setState({\n      graph: graph,\n  })\n    return graph\n  }\n\n  /* helpers */\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\")\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4,\n    }\n    row = row.set(\"Priorité\", priorities[priority])\n    return row\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\")\n    let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n     'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n\n     row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n     return row\n  }\n\n  // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  \n  //   await browser.close();\n  // } \n\n  timeout(delay) {\n      return new Promise( res => setTimeout(res, delay) );\n  }\n\n  render() {\n    console.log(this.state.graph)\n    return (\n      <div className=\"header\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-2 col-1\"></div>\n            <div className=\"col-sm-8 col-10\">\n                \n            <Chart\n  width={'100%'}\n  height={'400px'}\n  chartType=\"Gantt\"\n  loader={<div>Loading Chart</div>}\n  data={ this.state.graph }\n  options={{\n    height: 400,\n    gantt: {\n      trackHeight: 30,\n    },\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n            </div>\n            <div className=\"col-sm-2 col-1\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SchemaPage;\n"]},"metadata":{},"sourceType":"module"}