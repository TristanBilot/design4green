{"ast":null,"code":"import { getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constants';\n/**\n * File for handling taskbar editing tooltip in Gantt.\n */\n\nvar EditTooltip =\n/** @class */\nfunction () {\n  function EditTooltip(gantt, taskbarEdit) {\n    this.parent = gantt;\n    this.taskbarEdit = taskbarEdit;\n  }\n  /**\n   * To create tooltip.\n   *\n   * @param {string} opensOn .\n   * @param {boolean} mouseTrail .\n   * @param {string} target .\n   * @returns {void}\n   * @private\n   */\n\n\n  EditTooltip.prototype.createTooltip = function (opensOn, mouseTrail, target) {\n    var _this = this;\n\n    this.toolTipObj = new Tooltip({\n      opensOn: opensOn,\n      position: 'TopRight',\n      mouseTrail: mouseTrail,\n      cssClass: cls.ganttTooltip,\n      target: target ? target : null,\n      animation: {\n        open: {\n          effect: 'None'\n        },\n        close: {\n          effect: 'None'\n        }\n      }\n    });\n\n    this.toolTipObj.beforeRender = function (args) {\n      var argsData = {\n        data: _this.taskbarEdit.taskBarEditRecord,\n        args: args,\n        content: _this.toolTipObj.content\n      };\n\n      _this.parent.trigger('beforeTooltipRender', argsData);\n    };\n\n    this.toolTipObj.afterOpen = function (args) {\n      _this.updateTooltipPosition(args);\n    };\n\n    this.toolTipObj.isStringTemplate = true;\n    this.toolTipObj.appendTo(this.parent.chartPane);\n  };\n  /**\n   * Method to update tooltip position\n   *\n   * @param {TooltipEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  EditTooltip.prototype.updateTooltipPosition = function (args) {\n    var containerPosition = this.parent.getOffsetRect(this.parent.chartPane);\n    var leftEnd = containerPosition.left + this.parent.chartPane.offsetWidth;\n    var tooltipPositionX = args.element.offsetLeft;\n\n    if (leftEnd < tooltipPositionX + args.element.offsetWidth) {\n      tooltipPositionX += leftEnd - (tooltipPositionX + args.element.offsetWidth);\n    }\n\n    args.element.style.left = tooltipPositionX + 'px';\n  };\n  /**\n   * To show/hide taskbar edit tooltip.\n   *\n   * @param {boolean} bool .\n   * @param {number} segmentIndex .\n   * @returns {void}\n   * @private\n   */\n\n\n  EditTooltip.prototype.showHideTaskbarEditTooltip = function (bool, segmentIndex) {\n    if (bool && this.parent.tooltipSettings.showTooltip) {\n      this.createTooltip('Custom', false);\n      this.parent.tooltipModule.toolTipObj.close();\n      this.updateTooltip(segmentIndex);\n\n      if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointLeftDrag') {\n        this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointLeft));\n      } else if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointRightDrag') {\n        this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointRight));\n      } else {\n        this.toolTipObj.open(this.taskbarEdit.taskBarEditElement);\n      }\n    } else if (!isNullOrUndefined(this.toolTipObj)) {\n      this.toolTipObj.destroy();\n      this.toolTipObj = null;\n    }\n  };\n  /**\n   * To update tooltip content and position.\n   *\n   * @param {number} segmentIndex .\n   * @returns {void} .\n   * @private\n   */\n\n\n  EditTooltip.prototype.updateTooltip = function (segmentIndex) {\n    var ganttProp = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n    var taskWidth = segmentIndex === -1 ? ganttProp.width : ganttProp.segments[segmentIndex].width;\n    var progressWidth = segmentIndex === -1 ? ganttProp.progressWidth : ganttProp.segments[segmentIndex].progressWidth;\n    var left = segmentIndex === -1 ? ganttProp.left : ganttProp.left + ganttProp.segments[segmentIndex].left;\n\n    if (!isNullOrUndefined(this.toolTipObj)) {\n      if (this.taskbarEdit.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskbarEdit.taskBarEditAction === 'ConnectorPointRightDrag') {\n        this.toolTipObj.content = this.getTooltipText(segmentIndex);\n        this.toolTipObj.offsetY = -3;\n      } else {\n        this.toolTipObj.content = this.getTooltipText(segmentIndex);\n        this.toolTipObj.refresh(this.taskbarEdit.taskBarEditElement);\n\n        if (this.taskbarEdit.taskBarEditAction === 'LeftResizing') {\n          this.toolTipObj.offsetX = -taskWidth;\n        } else if (this.taskbarEdit.taskBarEditAction === 'RightResizing' || this.taskbarEdit.taskBarEditAction === 'ParentResizing') {\n          this.toolTipObj.offsetX = 0;\n        } else if (this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n          this.toolTipObj.offsetX = -(taskWidth - progressWidth);\n        } else if (this.taskbarEdit.taskBarEditAction === 'MilestoneDrag') {\n          this.toolTipObj.offsetX = -(this.parent.chartRowsModule.milestoneHeight / 2);\n        } else if (taskWidth > 5) {\n          this.toolTipObj.offsetX = -(taskWidth + left - this.taskbarEdit.tooltipPositionX);\n        }\n      }\n    }\n  };\n  /**\n   * To get updated tooltip text.\n   *\n   * @param {number} segmentIndex .\n   * @returns {void} .\n   * @private\n   */\n\n\n  EditTooltip.prototype.getTooltipText = function (segmentIndex) {\n    var tooltipString = '';\n    var instance = this.parent.globalize;\n    var editRecord = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n\n    if (!isNullOrUndefined(editRecord.segments) && editRecord.segments.length > 0 && segmentIndex !== -1 && this.taskbarEdit.taskBarEditAction !== 'ProgressResizing') {\n      editRecord = editRecord.segments[segmentIndex];\n    }\n\n    if (this.parent.tooltipSettings.editing) {\n      var templateNode = this.parent.tooltipModule.templateCompiler(this.parent.tooltipSettings.editing, this.parent, this.taskbarEdit.taskBarEditRecord, 'TooltipEditingTemplate');\n\n      if (getValue('tooltipEle', this.toolTipObj)) {\n        this.parent.renderTemplates();\n      }\n\n      tooltipString = templateNode[0];\n    } else {\n      var startDate = void 0;\n      var endDate = void 0;\n      var duration = void 0;\n\n      if (!isNullOrUndefined(editRecord.startDate)) {\n        startDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('startDate') + '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' + instance.formatDate(editRecord.startDate, {\n          format: this.parent.getDateFormat()\n        }) + '</td></tr>';\n      }\n\n      if (!isNullOrUndefined(editRecord.endDate)) {\n        endDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('endDate') + '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' + instance.formatDate(editRecord.endDate, {\n          format: this.parent.getDateFormat()\n        }) + '</td></tr>';\n      }\n\n      if (!isNullOrUndefined(editRecord.duration)) {\n        duration = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('duration') + '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' + this.parent.getDurationString(editRecord.duration, editRecord.durationUnit) + '</td></tr>';\n      }\n\n      switch (this.taskbarEdit.taskBarEditAction) {\n        case 'ProgressResizing':\n          var progress = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('progress') + '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' + editRecord.progress + '</td></tr>';\n          tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + progress + '</tbody></table>';\n          break;\n\n        case 'LeftResizing':\n          tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + startDate + duration + '</tbody></table>';\n          break;\n\n        case 'RightResizing':\n        case 'ParentResizing':\n          tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + endDate + duration + '</tbody></table>';\n          break;\n\n        case 'ChildDrag':\n        case 'ParentDrag':\n        case 'MilestoneDrag':\n        case 'ManualParentDrag':\n          var sDate = '';\n          var eDate = '';\n\n          if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.startDate)) {\n            sDate = startDate;\n          }\n\n          if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.endDate)) {\n            eDate = endDate;\n          }\n\n          tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + sDate + eDate + '</tbody></table>';\n          break;\n\n        case 'ConnectorPointLeftDrag':\n        case 'ConnectorPointRightDrag':\n          tooltipString = this.parent.connectorLineModule.tooltipTable;\n\n          if (isNullOrUndefined(this.toolTipObj)) {\n            this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n          }\n\n          break;\n      }\n    }\n\n    return tooltipString;\n  };\n\n  return EditTooltip;\n}();\n\nexport { EditTooltip };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/renderer/edit-tooltip.js"],"names":["getValue","isNullOrUndefined","Tooltip","cls","EditTooltip","gantt","taskbarEdit","parent","prototype","createTooltip","opensOn","mouseTrail","target","_this","toolTipObj","position","cssClass","ganttTooltip","animation","open","effect","close","beforeRender","args","argsData","data","taskBarEditRecord","content","trigger","afterOpen","updateTooltipPosition","isStringTemplate","appendTo","chartPane","containerPosition","getOffsetRect","leftEnd","left","offsetWidth","tooltipPositionX","element","offsetLeft","style","showHideTaskbarEditTooltip","bool","segmentIndex","tooltipSettings","showTooltip","tooltipModule","updateTooltip","connectorSecondAction","connectorSecondElement","querySelector","connectorPointLeft","connectorPointRight","taskBarEditElement","destroy","ganttProp","ganttProperties","taskWidth","width","segments","progressWidth","taskBarEditAction","getTooltipText","offsetY","refresh","offsetX","chartRowsModule","milestoneHeight","tooltipString","instance","globalize","editRecord","length","editing","templateNode","templateCompiler","renderTemplates","startDate","endDate","duration","localeObj","getConstant","formatDate","format","getDateFormat","getDurationString","durationUnit","progress","sDate","eDate","connectorLineModule","tooltipTable","innerHTML","getConnectorLineTooltipInnerTd","editModule","taskbarEditModule","taskName","fromPredecessorText"],"mappings":"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","sourcesContent":["import { getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constants';\n/**\n * File for handling taskbar editing tooltip in Gantt.\n */\nvar EditTooltip = /** @class */ (function () {\n    function EditTooltip(gantt, taskbarEdit) {\n        this.parent = gantt;\n        this.taskbarEdit = taskbarEdit;\n    }\n    /**\n     * To create tooltip.\n     *\n     * @param {string} opensOn .\n     * @param {boolean} mouseTrail .\n     * @param {string} target .\n     * @returns {void}\n     * @private\n     */\n    EditTooltip.prototype.createTooltip = function (opensOn, mouseTrail, target) {\n        var _this = this;\n        this.toolTipObj = new Tooltip({\n            opensOn: opensOn,\n            position: 'TopRight',\n            mouseTrail: mouseTrail,\n            cssClass: cls.ganttTooltip,\n            target: target ? target : null,\n            animation: { open: { effect: 'None' }, close: { effect: 'None' } }\n        });\n        this.toolTipObj.beforeRender = function (args) {\n            var argsData = {\n                data: _this.taskbarEdit.taskBarEditRecord,\n                args: args,\n                content: _this.toolTipObj.content\n            };\n            _this.parent.trigger('beforeTooltipRender', argsData);\n        };\n        this.toolTipObj.afterOpen = function (args) {\n            _this.updateTooltipPosition(args);\n        };\n        this.toolTipObj.isStringTemplate = true;\n        this.toolTipObj.appendTo(this.parent.chartPane);\n    };\n    /**\n     * Method to update tooltip position\n     *\n     * @param {TooltipEventArgs} args .\n     * @returns {void} .\n     */\n    EditTooltip.prototype.updateTooltipPosition = function (args) {\n        var containerPosition = this.parent.getOffsetRect(this.parent.chartPane);\n        var leftEnd = containerPosition.left + this.parent.chartPane.offsetWidth;\n        var tooltipPositionX = args.element.offsetLeft;\n        if (leftEnd < (tooltipPositionX + args.element.offsetWidth)) {\n            tooltipPositionX += leftEnd - (tooltipPositionX + args.element.offsetWidth);\n        }\n        args.element.style.left = tooltipPositionX + 'px';\n    };\n    /**\n     * To show/hide taskbar edit tooltip.\n     *\n     * @param {boolean} bool .\n     * @param {number} segmentIndex .\n     * @returns {void}\n     * @private\n     */\n    EditTooltip.prototype.showHideTaskbarEditTooltip = function (bool, segmentIndex) {\n        if (bool && this.parent.tooltipSettings.showTooltip) {\n            this.createTooltip('Custom', false);\n            this.parent.tooltipModule.toolTipObj.close();\n            this.updateTooltip(segmentIndex);\n            if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointLeftDrag') {\n                this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointLeft));\n            }\n            else if (this.taskbarEdit.connectorSecondAction === 'ConnectorPointRightDrag') {\n                this.toolTipObj.open(this.taskbarEdit.connectorSecondElement.querySelector('.' + cls.connectorPointRight));\n            }\n            else {\n                this.toolTipObj.open(this.taskbarEdit.taskBarEditElement);\n            }\n        }\n        else if (!isNullOrUndefined(this.toolTipObj)) {\n            this.toolTipObj.destroy();\n            this.toolTipObj = null;\n        }\n    };\n    /**\n     * To update tooltip content and position.\n     *\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    EditTooltip.prototype.updateTooltip = function (segmentIndex) {\n        var ganttProp = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n        var taskWidth = segmentIndex === -1 ? ganttProp.width :\n            ganttProp.segments[segmentIndex].width;\n        var progressWidth = segmentIndex === -1 ? ganttProp.progressWidth :\n            ganttProp.segments[segmentIndex].progressWidth;\n        var left = segmentIndex === -1 ? ganttProp.left : ganttProp.left + ganttProp.segments[segmentIndex].left;\n        if (!isNullOrUndefined(this.toolTipObj)) {\n            if (this.taskbarEdit.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskbarEdit.taskBarEditAction === 'ConnectorPointRightDrag') {\n                this.toolTipObj.content = this.getTooltipText(segmentIndex);\n                this.toolTipObj.offsetY = -3;\n            }\n            else {\n                this.toolTipObj.content = this.getTooltipText(segmentIndex);\n                this.toolTipObj.refresh(this.taskbarEdit.taskBarEditElement);\n                if (this.taskbarEdit.taskBarEditAction === 'LeftResizing') {\n                    this.toolTipObj.offsetX = -taskWidth;\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'RightResizing' ||\n                    this.taskbarEdit.taskBarEditAction === 'ParentResizing') {\n                    this.toolTipObj.offsetX = 0;\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'ProgressResizing') {\n                    this.toolTipObj.offsetX = -(taskWidth - progressWidth);\n                }\n                else if (this.taskbarEdit.taskBarEditAction === 'MilestoneDrag') {\n                    this.toolTipObj.offsetX = -(this.parent.chartRowsModule.milestoneHeight / 2);\n                }\n                else if (taskWidth > 5) {\n                    this.toolTipObj.offsetX = -(taskWidth + left - this.taskbarEdit.tooltipPositionX);\n                }\n            }\n        }\n    };\n    /**\n     * To get updated tooltip text.\n     *\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    EditTooltip.prototype.getTooltipText = function (segmentIndex) {\n        var tooltipString = '';\n        var instance = this.parent.globalize;\n        var editRecord = this.taskbarEdit.taskBarEditRecord.ganttProperties;\n        if (!isNullOrUndefined(editRecord.segments) && editRecord.segments.length > 0 && segmentIndex !== -1\n            && this.taskbarEdit.taskBarEditAction !== 'ProgressResizing') {\n            editRecord = editRecord.segments[segmentIndex];\n        }\n        if (this.parent.tooltipSettings.editing) {\n            var templateNode = this.parent.tooltipModule.templateCompiler(this.parent.tooltipSettings.editing, this.parent, this.taskbarEdit.taskBarEditRecord, 'TooltipEditingTemplate');\n            if (getValue('tooltipEle', this.toolTipObj)) {\n                this.parent.renderTemplates();\n            }\n            tooltipString = templateNode[0];\n        }\n        else {\n            var startDate = void 0;\n            var endDate = void 0;\n            var duration = void 0;\n            if (!isNullOrUndefined(editRecord.startDate)) {\n                startDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('startDate') +\n                    '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' +\n                    instance.formatDate(editRecord.startDate, { format: this.parent.getDateFormat() }) + '</td></tr>';\n            }\n            if (!isNullOrUndefined(editRecord.endDate)) {\n                endDate = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('endDate') +\n                    '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' +\n                    instance.formatDate(editRecord.endDate, { format: this.parent.getDateFormat() }) + '</td></tr>';\n            }\n            if (!isNullOrUndefined(editRecord.duration)) {\n                duration = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('duration') +\n                    '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' +\n                    this.parent.getDurationString(editRecord.duration, editRecord.durationUnit) + '</td></tr>';\n            }\n            switch (this.taskbarEdit.taskBarEditAction) {\n                case 'ProgressResizing':\n                    var progress = '<tr><td class = \"e-gantt-tooltip-label\">' + this.parent.localeObj.getConstant('progress') +\n                        '</td><td>:</td><td class = \"e-gantt-tooltip-value\">' + editRecord.progress + '</td></tr>';\n                    tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                        progress + '</tbody></table>';\n                    break;\n                case 'LeftResizing':\n                    tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                        startDate + duration + '</tbody></table>';\n                    break;\n                case 'RightResizing':\n                case 'ParentResizing':\n                    tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' +\n                        endDate + duration + '</tbody></table>';\n                    break;\n                case 'ChildDrag':\n                case 'ParentDrag':\n                case 'MilestoneDrag':\n                case 'ManualParentDrag':\n                    var sDate = '';\n                    var eDate = '';\n                    if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.startDate)) {\n                        sDate = startDate;\n                    }\n                    if (!isNullOrUndefined(this.taskbarEdit.taskBarEditRecord.ganttProperties.endDate)) {\n                        eDate = endDate;\n                    }\n                    tooltipString = '<table class = \"e-gantt-tooltiptable\"><tbody>' + sDate + eDate + '</tbody></table>';\n                    break;\n                case 'ConnectorPointLeftDrag':\n                case 'ConnectorPointRightDrag':\n                    tooltipString = this.parent.connectorLineModule.tooltipTable;\n                    if (isNullOrUndefined(this.toolTipObj)) {\n                        this.parent.connectorLineModule.tooltipTable.innerHTML =\n                            this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n                    }\n                    break;\n            }\n        }\n        return tooltipString;\n    };\n    return EditTooltip;\n}());\nexport { EditTooltip };\n"]},"metadata":{},"sourceType":"module"}