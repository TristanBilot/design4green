{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/GraphPage.js\";\nimport React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingResources } from './scripts/graph_data';\nimport DataFrame from \"dataframe-js\";\nimport './css/graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: props.dataframe,\n      basket: props.basket,\n      columns: [],\n      graph: [],\n      graphLabels: []\n    };\n    this.taskbarWithColorBinded = this.taskbarWithColor.bind(this);\n    this.taskBarColors = {\n      \"STRATEGIE\": \"#1b5e20\",\n      \"SPECIFICATIONS\": \"#00695c\",\n      \"UX/UI\": \"#0097a7\",\n      \"CONTENUS\": \"#039be5\",\n      \"ARCHITECTURE\": \"#2196f3\",\n      \"FRONTEND\": \"#5c6bc0\",\n      \"BACKEND\": \"#9575cd\",\n      \"HEBERGEMENT\": \"#ce93d8\"\n    };\n    this.taskFields = {\n      id: 'TaskID',\n      name: 'TaskName',\n      startDate: 'StartDate',\n      endDate: 'EndDate',\n      duration: 'Duration',\n      progress: 'Progress',\n      dependency: 'Predecessor',\n      child: 'subtasks',\n      resourceInfo: 'resources'\n    };\n    this.resourceFields = {\n      id: 'resourceId',\n      name: 'resourceName'\n    };\n    this.splitterSettings = {\n      columnIndex: 2\n    };\n    this.projectStartDate = new Date();\n    let projectNbDays = 40;\n    this.projectEndDate = new Date(Date.now() + 1000 * 60 * 60 * 24 * projectNbDays);\n    this.gridLines = 'Both';\n    this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n    this.timelineSettings = {\n      topTier: {\n        unit: 'Week',\n        format: 'MMM dd, y'\n      },\n      bottomTier: {\n        unit: 'Day'\n      }\n    };\n    this.labelSettings = {\n      // leftLabel: 'TaskName',\n      rightLabel: 'resources'\n    };\n  }\n\n  async componentWillMount() {\n    await this.getGanttGraph();\n  }\n\n  async getGanttGraph(criterions) {\n    console.log(\"this.state.dataframe\");\n    console.log(this.state.dataframe);\n    if (this.state.dataframe == null) return [];\n    let ids = this.state.basket.map(e => e.id);\n    let df = this.getGanttInfoAsDataframe(ids); // [\n    //     \"STR-1.07\",\n    //     \"STR-1.C09\",\n    //     \"STR-1.16\",\n    //     \"STR-3.C06\",\n    //     \"STR-3.C05\",\n    //     \"STR-3.07\",\n    //     \"SPC-6.C01\",\n    //     \"UX/UI-3.01\",\n    //     \"ARCH-9.C02\"\n    // ]\n\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let graph = [];\n    let labels = [];\n    let day = 1000 * 60 * 60 * 24;\n    let baseXPosition = this.projectStartDate;\n    let widthOfCycleLife = 4;\n    let i = 1;\n    var lastRow = null;\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      console.log('cycleLifeIndex');\n      console.log(cycleLifeIndex);\n      let begXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day);\n      let endXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day + widthOfCycleLife * day);\n      let node = {\n        TaskID: i,\n        TaskName: row.get(\"Use Case\"),\n        StartDate: begXPosition,\n        EndDate: endXPosition,\n        subtasks: [],\n        category: row.get(\"Famille d'origine\"),\n        useCase: row.get(\"Use Case\")\n      };\n\n      if (lastRow != null && lastRow.get(\"Etape Cycle de Vie\") != row.get(\"Etape Cycle de Vie\")) {\n        node[\"Predecessor\"] = i - 1;\n      }\n\n      graph.push(node);\n      lastRow = row;\n      labels.push({\n        resourceId: i++,\n        resourceName: row.get(\"CRITERES\")\n      });\n    });\n    console.log(graph);\n    this.setState({\n      graph: graph,\n      graphLabels: labels\n    });\n  }\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []; // for each id, fetch the required column infos \n\n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row.get(\"ID\") === id).select(\"Famille d'origine\", \"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    return totalDf;\n  }\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  timeout(delay) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  taskbarWithColor(props) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"e-gantt-child-taskbar e-custom-moments\",\n      style: {\n        height: \"100%\",\n        borderRadius: \"5px\",\n        backgroundColor: this.taskBarColors[props.taskData.category],\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"e-task-label\",\n          style: {\n            textOoverflow: \"ellipsis\",\n            height: \"90%\",\n            overflow: \"hidden\",\n            color: \"white\",\n            fontSize: \"10px\"\n          },\n          children: props.taskData.useCase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this);\n  }\n\n  toolbarClick(args) {\n    if (args.item.id === \"GanttExport_excelexport\") {\n      this.ganttInstance.excelExport();\n    } else if (args.item.id === \"GanttExport_csvexport\") {\n      this.ganttInstance.csvExport();\n    } else if (args.item.id === \"GanttExport_pdfexport\") {\n      this.ganttInstance.pdfExport();\n    }\n  }\n\n  render() {\n    console.log(editingResources);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-pane\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: /*#__PURE__*/_jsxDEV(GanttComponent, {\n          id: \"GanttExport\",\n          ref: gantt => this.ganttInstance = gantt,\n          height: \"700px\",\n          rowHeight: 45,\n          taskbarHeight: 35,\n          dataSource: this.state.graph,\n          dateFormat: 'MMM dd, y',\n          treeColumnIndex: 1,\n          allowExcelExport: true,\n          allowPdfExport: true,\n          allowSelection: true,\n          showColumnMenu: false,\n          highlightWeekends: true,\n          allowUnscheduledTasks: true,\n          projectStartDate: this.projectStartDate,\n          projectEndDate: this.projectEndDate,\n          splitterSettings: this.splitterSettings,\n          taskFields: this.taskFields,\n          timelineSettings: this.timelineSettings,\n          labelSettings: this.labelSettings,\n          toolbarClick: this.toolbarClick.bind(this),\n          height: \"410px\",\n          gridLines: this.gridLines,\n          toolbar: this.toolbar,\n          resourceFields: this.resourceFields,\n          resources: editingResources,\n          taskbarTemplate: this.taskbarWithColorBinded,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskID\",\n              width: \"60\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskName\",\n              width: \"250\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"StartDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"EndDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Predecessor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"resources\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Selection, Toolbar, ExcelExport, PdfExport]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default GraphPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/GraphPage.js"],"names":["React","Component","GanttComponent","Inject","Selection","Toolbar","ExcelExport","PdfExport","ColumnsDirective","ColumnDirective","editingResources","DataFrame","GraphPage","constructor","props","state","dataframe","basket","columns","graph","graphLabels","taskbarWithColorBinded","taskbarWithColor","bind","taskBarColors","taskFields","id","name","startDate","endDate","duration","progress","dependency","child","resourceInfo","resourceFields","splitterSettings","columnIndex","projectStartDate","Date","projectNbDays","projectEndDate","now","gridLines","toolbar","timelineSettings","topTier","unit","format","bottomTier","labelSettings","rightLabel","componentWillMount","getGanttGraph","criterions","console","log","ids","map","e","df","getGanttInfoAsDataframe","cycleLifeCategories","labels","day","baseXPosition","widthOfCycleLife","i","lastRow","chain","row","cycleLifeIndex","indexOf","get","begXPosition","getTime","endXPosition","node","TaskID","TaskName","StartDate","EndDate","subtasks","category","useCase","push","resourceId","resourceName","setState","dfs","forEach","filter","select","totalDf","union","translatePriorityToInteger","sortDataframe","priority","priorities","set","translateCycleLifeToInteger","cycleLife","withColumn","sortBy","timeout","delay","Promise","res","setTimeout","height","borderRadius","backgroundColor","taskData","textAlign","textOoverflow","overflow","color","fontSize","toolbarClick","args","item","ganttInstance","excelExport","csvExport","pdfExport","render","gantt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqDC,WAArD,EAAkEC,SAAlE,EAA6EC,gBAA7E,EAA+FC,eAA/F,QAAsH,6BAAtH;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAN,SAAwBX,SAAxB,CAAkC;AAE9BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAEF,KAAK,CAACE,SADR;AAETC,MAAAA,MAAM,EAAEH,KAAK,CAACG,MAFL;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITC,MAAAA,KAAK,EAAE,EAJE;AAKTC,MAAAA,WAAW,EAAE;AALJ,KAAb;AAQA,SAAKC,sBAAL,GAA8B,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAA9B;AAEA,SAAKC,aAAL,GAAqB;AACjB,mBAAa,SADI;AAEjB,wBAAkB,SAFD;AAGjB,eAAS,SAHQ;AAIjB,kBAAY,SAJK;AAKjB,sBAAgB,SALC;AAMjB,kBAAY,SANK;AAOjB,iBAAW,SAPM;AAQjB,qBAAe;AARE,KAArB;AAWA,SAAKC,UAAL,GAAkB;AACdC,MAAAA,EAAE,EAAE,QADU;AAEdC,MAAAA,IAAI,EAAE,UAFQ;AAGdC,MAAAA,SAAS,EAAE,WAHG;AAIdC,MAAAA,OAAO,EAAE,SAJK;AAKdC,MAAAA,QAAQ,EAAE,UALI;AAMdC,MAAAA,QAAQ,EAAE,UANI;AAOdC,MAAAA,UAAU,EAAE,aAPE;AAQdC,MAAAA,KAAK,EAAE,UARO;AASdC,MAAAA,YAAY,EAAE;AATA,KAAlB;AAWA,SAAKC,cAAL,GAAsB;AAClBT,MAAAA,EAAE,EAAE,YADc;AAElBC,MAAAA,IAAI,EAAE;AAFY,KAAtB;AAIA,SAAKS,gBAAL,GAAwB;AACpBC,MAAAA,WAAW,EAAE;AADO,KAAxB;AAGA,SAAKC,gBAAL,GAAwB,IAAIC,IAAJ,EAAxB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,SAAKC,cAAL,GAAsB,IAAIF,IAAJ,CAASA,IAAI,CAACG,GAAL,KAAa,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAZ,GAAkBF,aAAvC,CAAtB;AACA,SAAKG,SAAL,GAAiB,MAAjB;AACA,SAAKC,OAAL,GAAe,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,CAAf;AACA,SAAKC,gBAAL,GAAwB;AACpBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,MADD;AAELC,QAAAA,MAAM,EAAE;AAFH,OADW;AAKpBC,MAAAA,UAAU,EAAE;AACRF,QAAAA,IAAI,EAAE;AADE;AALQ,KAAxB;AASA,SAAKG,aAAL,GAAqB;AACjB;AACAC,MAAAA,UAAU,EAAE;AAFK,KAArB;AAIH;;AAEuB,QAAlBC,kBAAkB,GAAG;AACvB,UAAM,KAAKC,aAAL,EAAN;AACH;;AAEkB,QAAbA,aAAa,CAACC,UAAD,EAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzC,KAAL,CAAWC,SAAvB;AACA,QAAI,KAAKD,KAAL,CAAWC,SAAX,IAAwB,IAA5B,EACI,OAAO,EAAP;AAEJ,QAAIyC,GAAG,GAAG,KAAK1C,KAAL,CAAWE,MAAX,CAAkByC,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACjC,EAA7B,CAAV;AACA,QAAIkC,EAAE,GAAG,KAAKC,uBAAL,CAA6BJ,GAA7B,CAAT,CAP4B,CAS5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIK,mBAAmB,GAAG,CAAE,aAAF,EAAiB,YAAjB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,gBAA7D,EACtB,aADsB,EACP,aADO,EACQ,YADR,EACsB,gBADtB,CAA1B;AAGA,QAAI3C,KAAK,GAAG,EAAZ;AACA,QAAI4C,MAAM,GAAG,EAAb;AACA,QAAIC,GAAG,GAAG,OAAK,EAAL,GAAQ,EAAR,GAAW,EAArB;AACA,QAAIC,aAAa,GAAG,KAAK3B,gBAAzB;AACA,QAAI4B,gBAAgB,GAAG,CAAvB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,OAAO,GAAG,IAAd;AAEAR,IAAAA,EAAE,CAACS,KAAH,CAASC,GAAG,IAAI;AACZ,UAAIC,cAAc,GAAGT,mBAAmB,CAACU,OAApB,CAA4BF,GAAG,CAACG,GAAJ,CAAQ,oBAAR,CAA5B,CAArB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYe,cAAZ;AACA,UAAIG,YAAY,GAAG,IAAInC,IAAJ,CAAS0B,aAAa,CAACU,OAAd,KAA2BT,gBAAgB,GAAGK,cAApB,GAAsCP,GAAzE,CAAnB;AACA,UAAIY,YAAY,GAAG,IAAIrC,IAAJ,CAAS0B,aAAa,CAACU,OAAd,KAA2BT,gBAAgB,GAAGK,cAApB,GAAsCP,GAAhE,GAAsEE,gBAAgB,GAAGF,GAAlG,CAAnB;AAEA,UAAIa,IAAI,GAAG;AACPC,QAAAA,MAAM,EAAEX,CADD;AAEPY,QAAAA,QAAQ,EAAET,GAAG,CAACG,GAAJ,CAAQ,UAAR,CAFH;AAGPO,QAAAA,SAAS,EAAEN,YAHJ;AAIPO,QAAAA,OAAO,EAAEL,YAJF;AAKPM,QAAAA,QAAQ,EAAE,EALH;AAMPC,QAAAA,QAAQ,EAAEb,GAAG,CAACG,GAAJ,CAAQ,mBAAR,CANH;AAOPW,QAAAA,OAAO,EAAEd,GAAG,CAACG,GAAJ,CAAQ,UAAR;AAPF,OAAX;;AASA,UAAIL,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACK,GAAR,CAAY,oBAAZ,KAAqCH,GAAG,CAACG,GAAJ,CAAQ,oBAAR,CAA5D,EAA2F;AACvFI,QAAAA,IAAI,CAAC,aAAD,CAAJ,GAAsBV,CAAC,GAAG,CAA1B;AACH;;AAEDhD,MAAAA,KAAK,CAACkE,IAAN,CAAWR,IAAX;AACAT,MAAAA,OAAO,GAAGE,GAAV;AAEAP,MAAAA,MAAM,CAACsB,IAAP,CAAY;AACRC,QAAAA,UAAU,EAAEnB,CAAC,EADL;AAERoB,QAAAA,YAAY,EAAEjB,GAAG,CAACG,GAAJ,CAAQ,UAAR;AAFN,OAAZ;AAIH,KA3BD;AA6BAlB,IAAAA,OAAO,CAACC,GAAR,CAAYrC,KAAZ;AAEA,SAAKqE,QAAL,CAAc;AACVrE,MAAAA,KAAK,EAAEA,KADG;AAEVC,MAAAA,WAAW,EAAE2C;AAFH,KAAd;AAIH;;AAEDF,EAAAA,uBAAuB,CAACJ,GAAD,EAAM;AACzB,QAAIgC,GAAG,GAAG,EAAV,CADyB,CAGzB;;AACAhC,IAAAA,GAAG,CAACiC,OAAJ,CAAYhE,EAAE,IAAI;AACd,UAAIkC,EAAE,GAAG,KAAK7C,KAAL,CAAWC,SAAX,CAAqB2E,MAArB,CAA4BrB,GAAG,IAAIA,GAAG,CAC9CG,GAD2C,CACvC,IADuC,MAC7B/C,EADN,EAERkE,MAFQ,CAED,mBAFC,EAEoB,UAFpB,EAEgC,oBAFhC,EAEsD,iBAFtD,EAEyE,UAFzE,EAEqF,gBAFrF,EAEuG,UAFvG,CAAT;AAGAH,MAAAA,GAAG,CAACJ,IAAJ,CAASzB,EAAT;AACH,KALD,EAJyB,CAWzB;;AACA,QAAIiC,OAAO,GAAG,IAAIlF,SAAJ,CAAc,EAAd,CAAd;AACA8E,IAAAA,GAAG,CAACC,OAAJ,CAAY9B,EAAE,IAAI;AACdiC,MAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAclC,EAAd,CAAV;AACH,KAFD,EAbyB,CAiBzB;;AACAiC,IAAAA,OAAO,GAAGA,OAAO,CAACxB,KAAR,CAAc,KAAK0B,0BAAnB,CAAV;AACAF,IAAAA,OAAO,GAAG,KAAKG,aAAL,CAAmBH,OAAnB,CAAV;AACA,WAAOA,OAAP;AACH;;AAEDE,EAAAA,0BAA0B,CAACzB,GAAD,EAAM;AAC5B,QAAI2B,QAAQ,GAAG3B,GAAG,CAACG,GAAJ,CAAQ,UAAR,CAAf;AACA,QAAIyB,UAAU,GAAG;AACf,aAAO,CADQ;AAEf,gBAAU,CAFK;AAGf,cAAQ,CAHO;AAIf,UAAI;AAJW,KAAjB;AAMA5B,IAAAA,GAAG,GAAGA,GAAG,CAAC6B,GAAJ,CAAQ,UAAR,EAAoBD,UAAU,CAACD,QAAD,CAA9B,CAAN;AACA,WAAO3B,GAAP;AACH;;AAED8B,EAAAA,2BAA2B,CAAC9B,GAAD,EAAM;AAC7B,QAAI+B,SAAS,GAAG/B,GAAG,CAACG,GAAJ,CAAQ,oBAAR,CAAhB;AACA,QAAIyB,UAAU,GAAG,CAAE,aAAF,EAAiB,YAAjB,EAA+B,aAA/B,EAA8C,aAA9C,EAA6D,gBAA7D,EAChB,aADgB,EACD,aADC,EACc,YADd,EAC4B,gBAD5B,CAAjB;AAGC5B,IAAAA,GAAG,GAAGA,GAAG,CAAC6B,GAAJ,CAAQ,qBAAR,EAA+BD,UAAU,CAAC1B,OAAX,CAAmB6B,SAAnB,CAA/B,CAAN;AACA,WAAO/B,GAAP;AACF;;AAEH0B,EAAAA,aAAa,CAACpC,EAAD,EAAK;AACd;AACAA,IAAAA,EAAE,GAAGA,EAAE,CAAC0C,UAAH,CAAc,qBAAd,CAAL;AACA1C,IAAAA,EAAE,GAAGA,EAAE,CAACS,KAAH,CAAS,KAAK+B,2BAAd,CAAL,CAHc,CAKd;;AACAxC,IAAAA,EAAE,GAAGA,EAAE,CAAC2C,MAAH,CAAU,UAAV,CAAL;AACA3C,IAAAA,EAAE,GAAGA,EAAE,CAAC2C,MAAH,CAAU,qBAAV,CAAL;AACA,WAAO3C,EAAP;AACH;;AAED4C,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAO,IAAIC,OAAJ,CAAaC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,KAAN,CAA9B,CAAP;AACH;;AAEDnF,EAAAA,gBAAgB,CAACR,KAAD,EAAQ;AACpB,wBACA;AAAK,MAAA,SAAS,EAAC,wCAAf;AAAwD,MAAA,KAAK,EAAE;AAAE+F,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,YAAY,EAAE,KAAhC;AAAuCC,QAAAA,eAAe,EAAC,KAAKvF,aAAL,CAAmBV,KAAK,CAACkG,QAAN,CAAe7B,QAAlC,CAAvD;AAAoG8B,QAAAA,SAAS,EAAE;AAA/G,OAA/D;AAAA,6BACI;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,cAAhB;AAA+B,UAAA,KAAK,EAAE;AAACC,YAAAA,aAAa,EAAE,UAAhB;AAA4BL,YAAAA,MAAM,EAAE,KAApC;AAA2CM,YAAAA,QAAQ,EAAE,QAArD;AAA+DC,YAAAA,KAAK,EAAE,OAAtE;AAA+EC,YAAAA,QAAQ,EAAE;AAAzF,WAAtC;AAAA,oBAA0IvG,KAAK,CAACkG,QAAN,CAAe5B;AAAzJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAMH;;AAEDkC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACf,QAAIA,IAAI,CAACC,IAAL,CAAU9F,EAAV,KAAiB,yBAArB,EAAgD;AAC5C,WAAK+F,aAAL,CAAmBC,WAAnB;AACH,KAFD,MAGK,IAAIH,IAAI,CAACC,IAAL,CAAU9F,EAAV,KAAiB,uBAArB,EAA8C;AAC/C,WAAK+F,aAAL,CAAmBE,SAAnB;AACH,KAFI,MAGA,IAAIJ,IAAI,CAACC,IAAL,CAAU9F,EAAV,KAAiB,uBAArB,EAA8C;AAC/C,WAAK+F,aAAL,CAAmBG,SAAnB;AACH;AACJ;;AACDC,EAAAA,MAAM,GAAG;AACLtE,IAAAA,OAAO,CAACC,GAAR,CAAY9C,gBAAZ;AACA,wBAAQ;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACR;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE,QAAC,cAAD;AAAgB,UAAA,EAAE,EAAC,aAAnB;AAAiC,UAAA,GAAG,EAAEoH,KAAK,IAAI,KAAKL,aAAL,GAAqBK,KAApE;AAA2E,UAAA,MAAM,EAAC,OAAlF;AAA0F,UAAA,SAAS,EAAE,EAArG;AAAyG,UAAA,aAAa,EAAE,EAAxH;AAA4H,UAAA,UAAU,EAAE,KAAK/G,KAAL,CAAWI,KAAnJ;AAA0J,UAAA,UAAU,EAAE,WAAtK;AAAmL,UAAA,eAAe,EAAE,CAApM;AAAuM,UAAA,gBAAgB,EAAE,IAAzN;AAA+N,UAAA,cAAc,EAAE,IAA/O;AAAqP,UAAA,cAAc,EAAE,IAArQ;AAA2Q,UAAA,cAAc,EAAE,KAA3R;AAAkS,UAAA,iBAAiB,EAAE,IAArT;AAA2T,UAAA,qBAAqB,EAAE,IAAlV;AAAwV,UAAA,gBAAgB,EAAE,KAAKmB,gBAA/W;AAAiY,UAAA,cAAc,EAAE,KAAKG,cAAtZ;AAAsa,UAAA,gBAAgB,EAAE,KAAKL,gBAA7b;AAA+c,UAAA,UAAU,EAAE,KAAKX,UAAhe;AAA4e,UAAA,gBAAgB,EAAE,KAAKoB,gBAAngB;AAAqhB,UAAA,aAAa,EAAE,KAAKK,aAAziB;AAAwjB,UAAA,YAAY,EAAE,KAAKoE,YAAL,CAAkB/F,IAAlB,CAAuB,IAAvB,CAAtkB;AAAomB,UAAA,MAAM,EAAC,OAA3mB;AAAmnB,UAAA,SAAS,EAAE,KAAKoB,SAAnoB;AAA8oB,UAAA,OAAO,EAAE,KAAKC,OAA5pB;AAAqqB,UAAA,cAAc,EAAE,KAAKT,cAA1rB;AAA0sB,UAAA,SAAS,EAAEzB,gBAArtB;AAAuuB,UAAA,eAAe,EAAE,KAAKW,sBAA7vB;AAAA,kCACE,QAAC,gBAAD;AAAA,oCACE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC,QAAvB;AAAgC,cAAA,KAAK,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC,UAAvB;AAAkC,cAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBALF,eAME,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBARF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,MAAD;AAAQ,YAAA,QAAQ,EAAE,CAACjB,SAAD,EAAYC,OAAZ,EAAqBC,WAArB,EAAkCC,SAAlC;AAAlB;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA;AAAA;AAAA;AAAA,YAAR;AAiBH;;AA1O6B;;AA6OlC,eAAeK,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingResources } from './scripts/graph_data';\nimport DataFrame from \"dataframe-js\";\nimport './css/graph.css'\n\nclass GraphPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataframe: props.dataframe,\n            basket: props.basket,\n            columns: [],\n            graph: [],\n            graphLabels: [],\n          }\n\n        this.taskbarWithColorBinded = this.taskbarWithColor.bind(this)\n\n        this.taskBarColors = {\n            \"STRATEGIE\": \"#1b5e20\",\n            \"SPECIFICATIONS\": \"#00695c\",\n            \"UX/UI\": \"#0097a7\",\n            \"CONTENUS\": \"#039be5\",\n            \"ARCHITECTURE\": \"#2196f3\",\n            \"FRONTEND\": \"#5c6bc0\",\n            \"BACKEND\": \"#9575cd\",\n            \"HEBERGEMENT\": \"#ce93d8\",\n        }\n\n        this.taskFields = {\n            id: 'TaskID',\n            name: 'TaskName',\n            startDate: 'StartDate',\n            endDate: 'EndDate',\n            duration: 'Duration',\n            progress: 'Progress',\n            dependency: 'Predecessor',\n            child: 'subtasks',\n            resourceInfo: 'resources'\n        };\n        this.resourceFields = {\n            id: 'resourceId',\n            name: 'resourceName'\n        };\n        this.splitterSettings = {\n            columnIndex: 2\n        };\n        this.projectStartDate = new Date()\n        let projectNbDays = 40\n        this.projectEndDate = new Date(Date.now()+ (1000*60*60*24) * projectNbDays)\n        this.gridLines = 'Both';\n        this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n        this.timelineSettings = {\n            topTier: {\n                unit: 'Week',\n                format: 'MMM dd, y',\n            },\n            bottomTier: {\n                unit: 'Day',\n            },\n        };\n        this.labelSettings = {\n            // leftLabel: 'TaskName',\n            rightLabel: 'resources'\n        };\n    }\n\n    async componentWillMount() {\n        await this.getGanttGraph()\n    }\n\n    async getGanttGraph(criterions) {\n        console.log(\"this.state.dataframe\")\n        console.log(this.state.dataframe)\n        if (this.state.dataframe == null)\n            return []\n\n        let ids = this.state.basket.map(e => e.id)\n        let df = this.getGanttInfoAsDataframe(ids)\n\n        // [\n        //     \"STR-1.07\",\n        //     \"STR-1.C09\",\n        //     \"STR-1.16\",\n        //     \"STR-3.C06\",\n        //     \"STR-3.C05\",\n        //     \"STR-3.07\",\n        //     \"SPC-6.C01\",\n        //     \"UX/UI-3.01\",\n        //     \"ARCH-9.C02\"\n        // ]\n    \n        let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n            'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n        let graph = []\n        let labels = []\n        let day = 1000*60*60*24\n        let baseXPosition = this.projectStartDate\n        let widthOfCycleLife = 4\n        let i = 1\n        var lastRow = null;\n\n        df.chain(row => {\n            let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n            console.log('cycleLifeIndex')\n            console.log(cycleLifeIndex)\n            let begXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day)\n            let endXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day + widthOfCycleLife * day)\n    \n            let node = {\n                TaskID: i,\n                TaskName: row.get(\"Use Case\"),\n                StartDate: begXPosition,\n                EndDate: endXPosition,\n                subtasks: [],\n                category: row.get(\"Famille d'origine\"),\n                useCase: row.get(\"Use Case\")\n            }\n            if (lastRow != null && lastRow.get(\"Etape Cycle de Vie\") != row.get(\"Etape Cycle de Vie\")) {\n                node[\"Predecessor\"] = i - 1\n            }\n\n            graph.push(node)\n            lastRow = row\n\n            labels.push({\n                resourceId: i++,\n                resourceName: row.get(\"CRITERES\")\n            })\n        })\n\n        console.log(graph)\n    \n        this.setState({\n            graph: graph,\n            graphLabels: labels,\n        })\n    }\n\n    getGanttInfoAsDataframe(ids) {\n        let dfs = []\n    \n        // for each id, fetch the required column infos \n        ids.forEach(id => {\n            let df = this.state.dataframe.filter(row => row\n            .get(\"ID\") === id)\n            .select(\"Famille d'origine\", \"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n            dfs.push(df)\n        })\n        \n        // merge all the rows dataframes in one dataframe\n        let totalDf = new DataFrame([]);\n        dfs.forEach(df => {\n            totalDf = totalDf.union(df)\n        })\n    \n        // parse the priority to integers\n        totalDf = totalDf.chain(this.translatePriorityToInteger)\n        totalDf = this.sortDataframe(totalDf)\n        return totalDf\n    }\n\n    translatePriorityToInteger(row) {\n        let priority = row.get(\"Priorité\")\n        let priorities = {\n          \"Low\": 1,\n          \"Medium\": 2,\n          \"High\": 3,\n          \"\": 4,\n        }\n        row = row.set(\"Priorité\", priorities[priority])\n        return row\n    }\n\n    translateCycleLifeToInteger(row) {\n        let cycleLife = row.get(\"Etape Cycle de Vie\")\n        let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n         'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n         row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n         return row\n      }\n\n    sortDataframe(df) {\n        // add a new colum with an integer representing the priority based on cycle life\n        df = df.withColumn(\"Cycle life priority\")\n        df = df.chain(this.translateCycleLifeToInteger)\n    \n        // sort first by priority and then by cycle life to make groups\n        df = df.sortBy(\"Priorité\")\n        df = df.sortBy(\"Cycle life priority\")\n        return df\n    }\n\n    timeout(delay) {\n        return new Promise( res => setTimeout(res, delay) );\n    }\n\n    taskbarWithColor(props) {\n        return (\n        <div className=\"e-gantt-child-taskbar e-custom-moments\" style={{ height: \"100%\", borderRadius: \"5px\", backgroundColor:this.taskBarColors[props.taskData.category], textAlign: \"center\" }}>\n            <div>\n              <span className=\"e-task-label\" style={{textOoverflow: \"ellipsis\", height: \"90%\", overflow: \"hidden\", color: \"white\", fontSize: \"10px\" }}>{props.taskData.useCase}</span>\n            </div>\n        </div>)\n    }\n\n    toolbarClick(args) {\n        if (args.item.id === \"GanttExport_excelexport\") {\n            this.ganttInstance.excelExport();\n        }\n        else if (args.item.id === \"GanttExport_csvexport\") {\n            this.ganttInstance.csvExport();\n        }\n        else if (args.item.id === \"GanttExport_pdfexport\") {\n            this.ganttInstance.pdfExport();\n        }\n    }\n    render() {\n        console.log(editingResources)\n        return (<div className='control-pane'>\n        <div className='control-section'>\n          <GanttComponent id='GanttExport' ref={gantt => this.ganttInstance = gantt} height='700px' rowHeight={45} taskbarHeight={35} dataSource={this.state.graph} dateFormat={'MMM dd, y'} treeColumnIndex={1} allowExcelExport={true} allowPdfExport={true} allowSelection={true} showColumnMenu={false} highlightWeekends={true} allowUnscheduledTasks={true} projectStartDate={this.projectStartDate} projectEndDate={this.projectEndDate} splitterSettings={this.splitterSettings} taskFields={this.taskFields} timelineSettings={this.timelineSettings} labelSettings={this.labelSettings} toolbarClick={this.toolbarClick.bind(this)} height='410px' gridLines={this.gridLines} toolbar={this.toolbar} resourceFields={this.resourceFields} resources={editingResources} taskbarTemplate={this.taskbarWithColorBinded}>\n            <ColumnsDirective>\n              <ColumnDirective field='TaskID' width='60'></ColumnDirective>\n              <ColumnDirective field='TaskName' width='250'></ColumnDirective>\n              <ColumnDirective field='StartDate'></ColumnDirective>\n              <ColumnDirective field='EndDate'></ColumnDirective>\n              <ColumnDirective field='Duration'></ColumnDirective>\n              <ColumnDirective field='Predecessor'></ColumnDirective>\n              <ColumnDirective field='resources'></ColumnDirective>\n              <ColumnDirective field='Progress'></ColumnDirective>\n            </ColumnsDirective>\n            <Inject services={[Selection, Toolbar, ExcelExport, PdfExport]}/>\n          </GanttComponent>\n        </div>\n      </div>);\n    }\n}\n\nexport default GraphPage;"]},"metadata":{},"sourceType":"module"}