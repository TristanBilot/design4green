{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PdfBorders, TemporaryDictionary } from './index';\nimport { PdfHorizontalOverflowType } from '../../base/interface';\nimport { ElementLayouter, PdfLayoutResult, PdfLayoutFormat, SizeF, PointF, RectangleF, RowLayoutResult, PdfLayoutType, PdfLayoutBreakType } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat } from '@syncfusion/ej2-pdf-export';\n/**\n *\n */\n\nvar PdfTreeGridLayouter =\n/** @class */\nfunction (_super) {\n  __extends(PdfTreeGridLayouter, _super);\n\n  function PdfTreeGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n\n    _this.columnRanges = [];\n    _this.repeatRowIndex = -1;\n    _this.currentBounds = new RectangleF(0, 0, 0, 0);\n    return _this;\n  }\n\n  Object.defineProperty(PdfTreeGridLayouter.prototype, \"treegrid\", {\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfTreeGridLayouter.prototype.layoutInternal = function (param) {\n    if (isNullOrUndefined(param)) {\n      throw Error('Argument Null Expection');\n    }\n\n    this.currentPage = param.page;\n    var format = param.format;\n\n    if (this.currentPage !== null) {\n      this.currentPageBounds = this.currentPage.getClientSize();\n    }\n\n    this.currentGraphics = this.currentPage.graphics;\n\n    if (format !== null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      /* eslint-disable-next-line */\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.treegrid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    }\n\n    if (this.treegrid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.treegrid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n\n    if (param.bounds.height > 0) {\n      this.currentBounds.height = param.bounds.height;\n    }\n\n    if (!this.treegrid.style.allowHorizontalOverflow && !this.treegrid.isFitToWidth) {\n      this.treegrid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    } else {\n      this.treegrid.measureColumnsWidth(this.currentBounds);\n      this.columnRanges.push([0, this.treegrid.columns.count - 1]);\n    }\n\n    return this.layoutOnPage(param);\n  };\n  /**\n   * `Determines the column draw ranges`.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  PdfTreeGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n\n    for (var i = 0; i < this.treegrid.columns.count; i++) {\n      cellWidths += this.treegrid.columns.getColumn(i).width;\n\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.treegrid.columns.getColumn(j).width;\n\n          if (subWidths > availableWidth) {\n            break;\n          }\n\n          endColumn = j;\n        }\n\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1; //endColumn = startColumn;\n\n        cellWidths = endColumn <= i ? this.treegrid.columns.getColumn(i).width : 0;\n      }\n    }\n\n    this.columnRanges.push([startColumn, this.treegrid.columns.count - 1]);\n  };\n\n  PdfTreeGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n\n  PdfTreeGridLayouter.prototype.layoutOnPage = function (param) {\n    var format = this.getFormat(param.format);\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var rowsCount = this.treegrid.rows.count;\n      var i = 0;\n      var repeatRow = false; //Draw row by row with the specified cell range.\n\n      for (var j = 0; j < rowsCount; j++) {\n        var row = this.treegrid.rows.getRow(j);\n        i++;\n        var originalHeight = this.currentBounds.y;\n\n        if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n          layoutedPages.add(this.currentPage, range);\n        }\n\n        var rowResult = this.drawRow(row); //if height remains same, it is understood that row is not draw in the page.\n\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          this.repeatRowIndex = this.treegrid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          this.repeatRowIndex = -1;\n        }\n\n        while (!rowResult.isFinish && startPage !== null) {\n          if (this.treegrid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageFormat(format);\n\n            if (this.treegrid.enableHeader) {\n              this.drawHeader();\n            }\n\n            this.checkBounds(format);\n            rowResult = this.drawRow(row);\n          } else if (!this.treegrid.allowRowBreakAcrossPages && i < length) {\n            this.currentPage = this.getNextPageFormat(format);\n\n            if (this.treegrid.enableHeader) {\n              this.drawHeader();\n            }\n\n            break;\n          } else if (i >= length) {\n            break;\n          }\n        }\n\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          this.startLocation.x = this.currentBounds.x;\n          this.currentPage = this.getNextPageFormat(format);\n\n          if (this.treegrid.enableHeader) {\n            this.drawHeader();\n          }\n\n          this.startLocation.y = this.currentBounds.y;\n\n          if (format.paginateBounds === new RectangleF(0, 0, 0, 0)) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n\n          this.drawRow(row);\n\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n      }\n\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage !== null && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageFormat(format);\n        this.checkBounds(format);\n      }\n    }\n\n    result = this.getLayoutResult();\n\n    if (this.treegrid.style.allowHorizontalOverflow && this.treegrid.style.horizontalOverflowType === PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n\n    return result;\n  };\n\n  PdfTreeGridLayouter.prototype.checkBounds = function (format) {\n    var location = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n\n    if (format.paginateBounds === new RectangleF(0, 0, 0, 0) && this.startLocation === location) {\n      this.currentBounds.x += this.startLocation.x;\n      this.currentBounds.y += this.startLocation.y;\n    }\n  };\n\n  PdfTreeGridLayouter.prototype.drawHeader = function () {\n    this.drawRow(this.treegrid.rows.getRow(0));\n  };\n\n  PdfTreeGridLayouter.prototype.reArrangePages = function (layoutPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutPages.keys();\n\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n\n    for (var i = 0; i < layoutPages.size(); i++) {\n      var count = layoutPages.size() / this.columnRanges.length;\n\n      for (var j = i; j < layoutPages.size(); j += count) {\n        var page = pages[j];\n\n        if (document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n  }; // eslint-disable-next-line\n\n\n  PdfTreeGridLayouter.prototype.getNextPageFormat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    this.currentGraphics = nextPage.graphics;\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n    return nextPage;\n  };\n\n  PdfTreeGridLayouter.prototype.getLayoutResult = function () {\n    var bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    return new PdfTreeGridLayoutResult(this.currentPage, bounds);\n  };\n\n  PdfTreeGridLayouter.prototype.checkIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n\n  PdfTreeGridLayouter.prototype.drawRow = function (row, layoutResult, height) {\n    //.. Check if required space available.\n    //.....If the row conains spans which  falls through more than one page, then draw the row to next page.\n    if (isNullOrUndefined(layoutResult)) {\n      var result = new RowLayoutResult();\n      height = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;\n\n      if (height > this.currentPageBounds.height) {\n        if (this.treegrid.allowRowBreakAcrossPages) {\n          result.isFinish = true;\n          this.drawRowWithBreak(result, row, height);\n        } else {\n          // If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          result.isFinish = false;\n          this.drawRow(row, result, height);\n        }\n      } else if (this.currentBounds.y + height > this.currentPageBounds.height || this.currentBounds.y + height > this.currentBounds.height) {\n        if (this.repeatRowIndex > -1 && this.repeatRowIndex === row.rowIndex) {\n          if (this.treegrid.allowRowBreakAcrossPages) {\n            result.isFinish = true;\n            this.drawRowWithBreak(result, row, height);\n          } else {\n            result.isFinish = false;\n            this.drawRow(row, result, height);\n          }\n        } else {\n          result.isFinish = false;\n        }\n      } else {\n        result.isFinish = true;\n        this.drawRow(row, result, height);\n      }\n\n      return result;\n    } else {\n      var location_1 = new PointF(this.currentBounds.x, this.currentBounds.y);\n      layoutResult.bounds = new RectangleF(location_1, new SizeF(0, 0));\n      var leftAdjustment = 0;\n      height = this.reCalculateHeight(row, height);\n\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cell = row.cells.getCell(i);\n        var column = this.treegrid.columns.getColumn(i);\n\n        if (column.isTreeColumn) {\n          leftAdjustment = row.level * 10;\n        }\n\n        var cancelSpans = i > this.cellEndIndex + 1 && cell.columnSpan > 1;\n\n        if (!cancelSpans) {\n          for (var j = 1; j < cell.columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n\n        var size = new SizeF(column.width, height);\n\n        if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n          cell.style.format = column.format;\n        }\n\n        cell.draw(this.currentGraphics, new RectangleF(location_1, size), cancelSpans, leftAdjustment);\n        /* eslint-disable-next-line */\n\n        if (row.treegrid.style.allowHorizontalOverflow && (cell.columnSpan > this.cellEndIndex || i + cell.columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n          row.rowOverflowIndex = this.cellEndIndex;\n        }\n\n        location_1.x += column.width;\n        leftAdjustment = 0;\n      }\n\n      this.currentBounds.y += height;\n      /* eslint-disable-next-line */\n\n      layoutResult.bounds = new RectangleF(new PointF(layoutResult.bounds.x, layoutResult.bounds.y), new SizeF(location_1.x, location_1.y));\n      return null;\n    }\n  };\n  /**\n   * @param {RowLayoutResult} result .\n   * @param {PdfTreeGridRow} row .\n   * @param {number} height .\n   * @returns {void} .\n   */\n\n\n  PdfTreeGridLayouter.prototype.drawRowWithBreak = function (result, row, height) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    var leftAdjustment = 0;\n    this.treegridHeight = this.currentBounds.height; // Calculate the remaining height.\n\n    row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height; // No need to explicit break if the row height is equal to treegrid height.\n\n    for (var c = 0; c < row.cells.count; c++) {\n      var cell = row.cells.getCell(c);\n      var cellHeight = cell.measureHeight();\n\n      if (cellHeight === height && cell.value === null) {\n        row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n      }\n    }\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var column = this.treegrid.columns.getColumn(i);\n\n      if (column.isTreeColumn) {\n        leftAdjustment = row.level * 10;\n      }\n\n      var cell = row.cells.getCell(i);\n      var cancelSpans = cell.columnSpan + i > this.cellEndIndex + 1 && cell.columnSpan > 1;\n\n      if (!cancelSpans) {\n        for (var j = 1; j < cell.columnSpan; j++) {\n          row.cells.getCell(i + j).isCellMergeContinue = true;\n        }\n      }\n\n      var tHeight = this.treegridHeight > 0 ? this.treegridHeight : this.currentBounds.height;\n      var size = new SizeF(column.width, tHeight);\n\n      if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n        cell.style.format = column.format;\n      }\n\n      cell.draw(this.currentGraphics, new RectangleF(location, size), cancelSpans, leftAdjustment);\n      result.isFinish = !result.isFinish ? result.isFinish : cell.finishedDrawingCell;\n      location.x += column.width;\n      leftAdjustment = 0;\n      this.currentBounds.y += this.treegridHeight > 0 ? this.treegridHeight : height;\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    }\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   *\n   * @param {PdfTreeGridRow} row .\n   * @param {number} height .\n   * @returns {void} .\n   * @private\n   */\n\n\n  PdfTreeGridLayouter.prototype.reCalculateHeight = function (row, height) {\n    var newHeight = 0;\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!isNullOrUndefined(row.cells.getCell(i).remainingString) || row.cells.getCell(i).remainingString === '') {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n\n    return Math.max(height, newHeight);\n  };\n\n  return PdfTreeGridLayouter;\n}(ElementLayouter);\n\nexport { PdfTreeGridLayouter };\n\nvar PdfTreeGridLayoutResult =\n/** @class */\nfunction (_super) {\n  __extends(PdfTreeGridLayoutResult, _super);\n  /**\n   * Constructor\n   *\n   * @param {PdfPage} page .\n   * @param {RectangleF} bounds .\n   * @private\n   */\n\n\n  function PdfTreeGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n\n  return PdfTreeGridLayoutResult;\n}(PdfLayoutResult);\n\nexport { PdfTreeGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\n\nvar PdfTreeGridLayoutFormat =\n/** @class */\nfunction (_super) {\n  __extends(PdfTreeGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   *\n   * @param {PdfLayoutFormat} baseFormat .\n   * @private\n   */\n\n\n  function PdfTreeGridLayoutFormat(baseFormat) {\n    var _this = this;\n\n    if (typeof baseFormat === 'undefined') {\n      _this = _super.call(this) || this;\n    } else {\n      _this = _super.call(this, baseFormat) || this;\n    }\n\n    return _this;\n  }\n\n  return PdfTreeGridLayoutFormat;\n}(PdfLayoutFormat);\n\nexport { PdfTreeGridLayoutFormat };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-base/treegrid-layouter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","isNullOrUndefined","PdfBorders","TemporaryDictionary","PdfHorizontalOverflowType","ElementLayouter","PdfLayoutResult","PdfLayoutFormat","SizeF","PointF","RectangleF","RowLayoutResult","PdfLayoutType","PdfLayoutBreakType","PdfStringFormat","PdfTreeGridLayouter","_super","baseFormat","_this","call","columnRanges","repeatRowIndex","currentBounds","defineProperty","get","elements","enumerable","configurable","layoutInternal","param","Error","currentPage","page","format","currentPageBounds","getClientSize","currentGraphics","graphics","break","FitColumnsToPage","bounds","x","y","treegrid","columns","width","clientSize","height","rows","count","getRow","cells","getCell","style","borders","left","startLocation","allowHorizontalOverflow","isFitToWidth","measureColumnsWidth","determineColumnDrawRanges","push","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","i","getColumn","subWidths","j","getFormat","f","result","layoutedPages","startPage","index","length","range","cellStartIndex","cellEndIndex","rowsCount","repeatRow","row","originalHeight","containsKey","add","rowResult","drawRow","rowCollection","indexOf","isFinish","allowRowBreakAcrossPages","getNextPageFormat","enableHeader","drawHeader","checkBounds","layout","OnePage","paginateBounds","default","getLayoutResult","horizontalOverflowType","NextPage","reArrangePages","location","right","top","layoutPages","document","pages","keys","section","remove","size","nextPage","getPages","PdfTreeGridLayoutResult","checkIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","layoutResult","rowBreakHeight","drawRowWithBreak","rowIndex","location_1","leftAdjustment","reCalculateHeight","cell","column","isTreeColumn","level","cancelSpans","columnSpan","isCellMergeContinue","draw","rowOverflowIndex","treegridHeight","c","cellHeight","measureHeight","value","tHeight","finishedDrawingCell","newHeight","remainingString","Math","max","PdfTreeGridLayoutFormat"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { PdfBorders, TemporaryDictionary } from './index';\nimport { PdfHorizontalOverflowType } from '../../base/interface';\nimport { ElementLayouter, PdfLayoutResult, PdfLayoutFormat, SizeF, PointF, RectangleF, RowLayoutResult, PdfLayoutType, PdfLayoutBreakType } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat } from '@syncfusion/ej2-pdf-export';\n/**\n *\n */\nvar PdfTreeGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayouter, _super);\n    function PdfTreeGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        _this.columnRanges = [];\n        _this.repeatRowIndex = -1;\n        _this.currentBounds = new RectangleF(0, 0, 0, 0);\n        return _this;\n    }\n    Object.defineProperty(PdfTreeGridLayouter.prototype, \"treegrid\", {\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTreeGridLayouter.prototype.layoutInternal = function (param) {\n        if (isNullOrUndefined(param)) {\n            throw Error('Argument Null Expection');\n        }\n        this.currentPage = param.page;\n        var format = param.format;\n        if (this.currentPage !== null) {\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        if (format !== null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            /* eslint-disable-next-line */\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.treegrid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        if (this.treegrid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.treegrid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        if (param.bounds.height > 0) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.treegrid.style.allowHorizontalOverflow && !this.treegrid.isFitToWidth) {\n            this.treegrid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        else {\n            this.treegrid.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.treegrid.columns.count - 1]);\n        }\n        return this.layoutOnPage(param);\n    };\n    /**\n     * `Determines the column draw ranges`.\n     *\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.treegrid.columns.count; i++) {\n            cellWidths += this.treegrid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.treegrid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                //endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.treegrid.columns.getColumn(i).width : 0;\n            }\n        }\n        this.columnRanges.push([startColumn, this.treegrid.columns.count - 1]);\n    };\n    PdfTreeGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    PdfTreeGridLayouter.prototype.layoutOnPage = function (param) {\n        var format = this.getFormat(param.format);\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var rowsCount = this.treegrid.rows.count;\n            var i = 0;\n            var repeatRow = false;\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < rowsCount; j++) {\n                var row = this.treegrid.rows.getRow(j);\n                i++;\n                var originalHeight = this.currentBounds.y;\n                if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                    layoutedPages.add(this.currentPage, range);\n                }\n                var rowResult = this.drawRow(row);\n                //if height remains same, it is understood that row is not draw in the page.\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    this.repeatRowIndex = this.treegrid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    this.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage !== null) {\n                    if (this.treegrid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageFormat(format);\n                        if (this.treegrid.enableHeader) {\n                            this.drawHeader();\n                        }\n                        this.checkBounds(format);\n                        rowResult = this.drawRow(row);\n                    }\n                    else if (!this.treegrid.allowRowBreakAcrossPages && i < length) {\n                        this.currentPage = this.getNextPageFormat(format);\n                        if (this.treegrid.enableHeader) {\n                            this.drawHeader();\n                        }\n                        break;\n                    }\n                    else if (i >= length) {\n                        break;\n                    }\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    this.startLocation.x = this.currentBounds.x;\n                    this.currentPage = this.getNextPageFormat(format);\n                    if (this.treegrid.enableHeader) {\n                        this.drawHeader();\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if (format.paginateBounds === new RectangleF(0, 0, 0, 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 &&\n                startPage !== null && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageFormat(format);\n                this.checkBounds(format);\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.treegrid.style.allowHorizontalOverflow\n            && this.treegrid.style.horizontalOverflowType === PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        return result;\n    };\n    PdfTreeGridLayouter.prototype.checkBounds = function (format) {\n        var location = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        if (format.paginateBounds === new RectangleF(0, 0, 0, 0) && this.startLocation === location) {\n            this.currentBounds.x += this.startLocation.x;\n            this.currentBounds.y += this.startLocation.y;\n        }\n    };\n    PdfTreeGridLayouter.prototype.drawHeader = function () {\n        this.drawRow(this.treegrid.rows.getRow(0));\n    };\n    PdfTreeGridLayouter.prototype.reArrangePages = function (layoutPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutPages.keys();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        for (var i = 0; i < layoutPages.size(); i++) {\n            var count = (layoutPages.size() / this.columnRanges.length);\n            for (var j = i; j < layoutPages.size(); j += count) {\n                var page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n    };\n    // eslint-disable-next-line\n    PdfTreeGridLayouter.prototype.getNextPageFormat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        return nextPage;\n    };\n    PdfTreeGridLayouter.prototype.getLayoutResult = function () {\n        var bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n            this.startLocation.y));\n        return new PdfTreeGridLayoutResult(this.currentPage, bounds);\n    };\n    PdfTreeGridLayouter.prototype.checkIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    PdfTreeGridLayouter.prototype.drawRow = function (row, layoutResult, height) {\n        //.. Check if required space available.\n        //.....If the row conains spans which  falls through more than one page, then draw the row to next page.\n        if (isNullOrUndefined(layoutResult)) {\n            var result = new RowLayoutResult();\n            height = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;\n            if (height > this.currentPageBounds.height) {\n                if (this.treegrid.allowRowBreakAcrossPages) {\n                    result.isFinish = true;\n                    this.drawRowWithBreak(result, row, height);\n                }\n                else {\n                    // If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    result.isFinish = false;\n                    this.drawRow(row, result, height);\n                }\n            }\n            else if (this.currentBounds.y + height > this.currentPageBounds.height ||\n                this.currentBounds.y + height > this.currentBounds.height) {\n                if (this.repeatRowIndex > -1 && this.repeatRowIndex === row.rowIndex) {\n                    if (this.treegrid.allowRowBreakAcrossPages) {\n                        result.isFinish = true;\n                        this.drawRowWithBreak(result, row, height);\n                    }\n                    else {\n                        result.isFinish = false;\n                        this.drawRow(row, result, height);\n                    }\n                }\n                else {\n                    result.isFinish = false;\n                }\n            }\n            else {\n                result.isFinish = true;\n                this.drawRow(row, result, height);\n            }\n            return result;\n        }\n        else {\n            var location_1 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            layoutResult.bounds = new RectangleF(location_1, new SizeF(0, 0));\n            var leftAdjustment = 0;\n            height = this.reCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cell = row.cells.getCell(i);\n                var column = this.treegrid.columns.getColumn(i);\n                if (column.isTreeColumn) {\n                    leftAdjustment = (row.level) * 10;\n                }\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (cell.columnSpan > 1));\n                if (!cancelSpans) {\n                    for (var j = 1; j < cell.columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(column.width, height);\n                if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n                    cell.style.format = column.format;\n                }\n                cell.draw(this.currentGraphics, new RectangleF(location_1, size), cancelSpans, leftAdjustment);\n                /* eslint-disable-next-line */\n                if (row.treegrid.style.allowHorizontalOverflow && (cell.columnSpan > this.cellEndIndex || i + cell.columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                    row.rowOverflowIndex = this.cellEndIndex;\n                }\n                location_1.x += column.width;\n                leftAdjustment = 0;\n            }\n            this.currentBounds.y += height;\n            /* eslint-disable-next-line */\n            layoutResult.bounds = new RectangleF(new PointF(layoutResult.bounds.x, layoutResult.bounds.y), new SizeF(location_1.x, location_1.y));\n            return null;\n        }\n    };\n    /**\n     * @param {RowLayoutResult} result .\n     * @param {PdfTreeGridRow} row .\n     * @param {number} height .\n     * @returns {void} .\n     */\n    PdfTreeGridLayouter.prototype.drawRowWithBreak = function (result, row, height) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        var leftAdjustment = 0;\n        this.treegridHeight = this.currentBounds.height;\n        // Calculate the remaining height.\n        row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n        // No need to explicit break if the row height is equal to treegrid height.\n        for (var c = 0; c < row.cells.count; c++) {\n            var cell = row.cells.getCell(c);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === height && cell.value === null) {\n                row.rowBreakHeight = this.currentBounds.y + height - this.currentBounds.height;\n            }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var column = this.treegrid.columns.getColumn(i);\n            if (column.isTreeColumn) {\n                leftAdjustment = row.level * 10;\n            }\n            var cell = row.cells.getCell(i);\n            var cancelSpans = ((cell.columnSpan + i > this.cellEndIndex + 1) && (cell.columnSpan > 1));\n            if (!cancelSpans) {\n                for (var j = 1; j < cell.columnSpan; j++) {\n                    row.cells.getCell(i + j).isCellMergeContinue = true;\n                }\n            }\n            var tHeight = this.treegridHeight > 0 ? this.treegridHeight : this.currentBounds.height;\n            var size = new SizeF(column.width, tHeight);\n            if (!this.checkIfDefaultFormat(column.format) && this.checkIfDefaultFormat(cell.style.format)) {\n                cell.style.format = column.format;\n            }\n            cell.draw(this.currentGraphics, new RectangleF(location, size), cancelSpans, leftAdjustment);\n            result.isFinish = (!result.isFinish) ? result.isFinish : cell.finishedDrawingCell;\n            location.x += column.width;\n            leftAdjustment = 0;\n            this.currentBounds.y += this.treegridHeight > 0 ? this.treegridHeight : height;\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n        }\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     *\n     * @param {PdfTreeGridRow} row .\n     * @param {number} height .\n     * @returns {void} .\n     * @private\n     */\n    PdfTreeGridLayouter.prototype.reCalculateHeight = function (row, height) {\n        var newHeight = 0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!isNullOrUndefined(row.cells.getCell(i).remainingString) ||\n                row.cells.getCell(i).remainingString === '') {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    return PdfTreeGridLayouter;\n}(ElementLayouter));\nexport { PdfTreeGridLayouter };\nvar PdfTreeGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayoutResult, _super);\n    /**\n     * Constructor\n     *\n     * @param {PdfPage} page .\n     * @param {RectangleF} bounds .\n     * @private\n     */\n    function PdfTreeGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfTreeGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfTreeGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfTreeGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfTreeGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     *\n     * @param {PdfLayoutFormat} baseFormat .\n     * @private\n     */\n    function PdfTreeGridLayoutFormat(baseFormat) {\n        var _this = this;\n        if (typeof baseFormat === 'undefined') {\n            _this = _super.call(this) || this;\n        }\n        else {\n            _this = _super.call(this, baseFormat) || this;\n        }\n        return _this;\n    }\n    return PdfTreeGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfTreeGridLayoutFormat };\n"]},"metadata":{},"sourceType":"module"}