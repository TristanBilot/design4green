{"ast":null,"code":"import { isNullOrUndefined, extend, setValue, getValue, merge } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, extendArray } from '../utils';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { updateParentRow, editAction } from './crud-actions';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n *\n * @hidden\n */\n\nvar BatchEdit =\n/** @class */\nfunction () {\n  function BatchEdit(parent) {\n    this.batchChildCount = 0;\n    this.addedRecords = 'addedRecords';\n    this.deletedRecords = 'deletedRecords';\n    this.batchAddedRecords = [];\n    this.batchDeletedRecords = [];\n    this.batchAddRowRecord = [];\n    this.parent = parent;\n    this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n    this.batchRecords = [];\n    this.currentViewRecords = [];\n    this.isAdd = false;\n    this.addEventListener();\n  }\n\n  BatchEdit.prototype.addEventListener = function () {\n    this.parent.on(events.cellSaved, this.cellSaved, this);\n    this.parent.on(events.batchAdd, this.batchAdd, this);\n    this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);\n    this.parent.on(events.batchSave, this.batchSave, this);\n    this.parent.on(events.beforeBatchDelete, this.beforeBatchDelete, this);\n    this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);\n    this.parent.on('batchPageAction', this.batchPageAction, this);\n    this.parent.on('batchCancelAction', this.batchCancelAction, this);\n    this.parent.grid.on('immutable-batch-cancel', this.immutableBatchAction, this);\n    this.parent.grid.on('next-cell-index', this.nextCellIndex, this);\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  BatchEdit.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.cellSaved, this.cellSaved);\n    this.parent.off(events.batchAdd, this.batchAdd);\n    this.parent.off(events.batchSave, this.batchSave);\n    this.parent.off(events.beforeBatchAdd, this.beforeBatchAdd);\n    this.parent.off(events.beforeBatchDelete, this.beforeBatchDelete);\n    this.parent.off(events.beforeBatchSave, this.beforeBatchSave);\n    this.parent.off('batchPageAction', this.batchPageAction);\n    this.parent.off('batchCancelAction', this.batchCancelAction);\n    this.parent.grid.off('immutable-batch-cancel', this.immutableBatchAction);\n    this.parent.grid.off('next-cell-index', this.nextCellIndex);\n  };\n  /**\n   * To destroy the editModule\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  BatchEdit.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * @hidden\n   * @returns {Object[]} Returns modified records in batch editing.\n   */\n\n\n  BatchEdit.prototype.getBatchRecords = function () {\n    return this.batchRecords;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns index of newly add row\n   */\n\n\n  BatchEdit.prototype.getAddRowIndex = function () {\n    return this.addRowIndex;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns selected row index\n   */\n\n\n  BatchEdit.prototype.getSelectedIndex = function () {\n    return this.selectedIndex;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns newly added child count\n   */\n\n\n  BatchEdit.prototype.getBatchChildCount = function () {\n    return this.batchChildCount;\n  };\n\n  BatchEdit.prototype.batchPageAction = function () {\n    var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var index;\n\n    if (!isNullOrUndefined(this.batchAddedRecords) && this.batchAddedRecords.length) {\n      for (var i = 0; i < this.batchAddedRecords.length; i++) {\n        index = data.map(function (e) {\n          return e[primaryKey];\n        }).indexOf(this.batchAddedRecords[i][primaryKey]);\n        data.splice(index, 1);\n      }\n    }\n\n    this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.batchDeletedRecords = this.currentViewRecords = [];\n  };\n\n  BatchEdit.prototype.cellSaved = function (args) {\n    var actualCellIndex = args.cell.cellIndex;\n    var frozenCols = this.parent.frozenColumns || this.parent.getFrozenColumns();\n\n    if (frozenCols && args.columnObject.index > frozenCols) {\n      actualCellIndex = actualCellIndex + frozenCols;\n    }\n\n    var freeze = this.parent.getFrozenLeftColumnsCount() > 0 || this.parent.getFrozenRightColumnsCount() > 0 ? true : false;\n\n    if (freeze) {\n      var colCount = this.parent.getFrozenLeftColumnsCount() + actualCellIndex;\n\n      if (colCount === this.parent.treeColumnIndex) {\n        this.parent.renderModule.cellRender({\n          data: args.rowData,\n          cell: args.cell,\n          column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n        });\n      }\n    } else if (actualCellIndex === this.parent.treeColumnIndex) {\n      this.parent.renderModule.cellRender({\n        data: args.rowData,\n        cell: args.cell,\n        column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n      });\n    }\n\n    if (this.isAdd && this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n      var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n      var added = void 0;\n      var level = 'level';\n      var primaryKey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n      var currentDataIndex = void 0;\n      var indexvalue = void 0;\n      var parentItem = 'parentItem';\n      var uniqueID = 'uniqueID';\n      var parentRecord = this.selectedIndex > -1 ? this.batchRecords[this.addRowIndex][parentItem] : null;\n      var idMapping = void 0;\n      var parentUniqueID = void 0;\n      var parentIdMapping = void 0;\n      var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Top' || this.selectedIndex === -1 ? 0 : this.parent.editSettings.newRowPosition === 'Above' ? this.addRowIndex : this.addRowIndex + 1;\n      rowObjectIndex = this.getActualRowObjectIndex(rowObjectIndex);\n\n      if (this.newBatchRowAdded) {\n        if (this.batchRecords.length) {\n          idMapping = this.batchRecords[this.addRowIndex][this.parent.idMapping];\n          parentIdMapping = this.batchRecords[this.addRowIndex][this.parent.parentIdMapping];\n\n          if (this.batchRecords[this.addRowIndex][parentItem]) {\n            parentUniqueID = this.batchRecords[this.addRowIndex][parentItem][uniqueID];\n          }\n        }\n\n        this.batchAddedRecords = extendArray(this.batchAddedRecords);\n        this.batchAddRowRecord = extendArray(this.batchAddRowRecord);\n        this.batchAddRowRecord.push(this.batchRecords[this.addRowIndex]);\n        added = this.parent.grid.getRowsObject()[rowObjectIndex].changes;\n        added.uniqueID = getUid(this.parent.element.id + '_data_');\n        setValue('uniqueIDCollection.' + added.uniqueID, added, this.parent);\n\n        if (!Object.prototype.hasOwnProperty.call(added, 'level')) {\n          this.batchIndex = this.selectedIndex === -1 ? 0 : this.batchIndex;\n\n          if (this.parent.editSettings.newRowPosition === 'Child') {\n            added.primaryParent = parentRecord;\n\n            if (this.selectedIndex > -1) {\n              added.parentItem = extend({}, this.batchRecords[this.addRowIndex]);\n              added.parentUniqueID = added.parentItem.uniqueID;\n              delete added.parentItem.childRecords;\n              delete added.parentItem[this.parent.childMapping];\n              added.level = added.parentItem.level + 1;\n              added.index = this.batchIndex;\n              var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n              var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n              record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n\n              if (this.isSelfReference) {\n                added[this.parent.parentIdMapping] = idMapping;\n              }\n\n              updateParentRow(primaryKey_1, added.parentItem, 'add', this.parent, this.isSelfReference, added);\n            }\n          } else if ((this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below') && !isNullOrUndefined(this.batchRecords[this.addRowIndex])) {\n            added.level = this.batchRecords[this.addRowIndex][level];\n\n            if (added.level && this.selectedIndex > -1) {\n              added.parentItem = parentRecord;\n              added.parentUniqueID = parentUniqueID;\n              delete added.parentItem.childRecords;\n              delete added.parentItem[this.parent.childMapping];\n            }\n\n            added.index = this.parent.editSettings.newRowPosition === 'Below' ? this.batchIndex : this.batchIndex - 1;\n\n            if (this.parent.editSettings.newRowPosition === 'Below' && this.selectedIndex > -1) {\n              var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n              var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n              record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n            }\n\n            if (this.parent.editSettings.newRowPosition === 'Above' && this.selectedIndex > -1) {\n              var record = this.batchRecords[this.addRowIndex];\n              currentDataIndex = data.map(function (e) {\n                return e[primaryKey_1];\n              }).indexOf(record[primaryKey_1]);\n            }\n\n            if (this.isSelfReference) {\n              added[this.parent.parentIdMapping] = parentIdMapping;\n            }\n          }\n\n          added.index = added.index === -1 ? 0 : added.index;\n          added.hasChildRecords = false;\n          added.childRecords = [];\n          this.batchRecords.splice(added.index, 0, added);\n          this.currentViewRecords.splice(added.index, 0, added);\n\n          if (currentDataIndex) {\n            indexvalue = currentDataIndex;\n          } else {\n            indexvalue = added.index;\n          }\n\n          if (this.parent.editSettings.newRowPosition !== 'Above') {\n            indexvalue = added.index === 0 ? indexvalue : indexvalue + 1;\n          }\n\n          data.splice(indexvalue, 0, added);\n          this.batchAddedRecords.push(added);\n        }\n\n        this.parent.grid.getRowsObject()[rowObjectIndex].data = added;\n        this.newBatchRowAdded = false;\n      }\n\n      if (this.parent.frozenColumns || this.parent.getFrozenColumns() && this.parent.grid.getRowsObject()[rowObjectIndex].edit === 'add') {\n        merge(this.currentViewRecords[rowObjectIndex], this.parent.grid.getRowsObject()[rowObjectIndex].changes);\n      }\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchAdd = function (e) {\n    var isTabLastRow = 'isTabLastRow';\n\n    if (this.parent.editSettings.mode === 'Cell' && this.parent.editModule[isTabLastRow]) {\n      e.cancel = true;\n      this.parent.editModule[isTabLastRow] = false;\n      return;\n    }\n\n    this.selectedIndex = this.parent.grid.selectedRowIndex;\n    this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n    this.addRowRecord = this.parent.getSelectedRecords()[0];\n  };\n\n  BatchEdit.prototype.batchAdd = function (e) {\n    if (this.parent.editSettings.newRowPosition !== 'Bottom') {\n      this.isAdd = true;\n      this.newBatchRowAdded = true;\n      var actualIndex = 0;\n\n      if (!this.batchRecords.length) {\n        this.batchAddedRecords = [];\n        this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n      }\n\n      if (this.parent.editSettings.newRowPosition !== 'Top') {\n        var records = this.parent.grid.getCurrentViewRecords();\n\n        if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1 || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n          records = this.batchRecords;\n        }\n\n        this.updateChildCount(records);\n        this.parent.notify(events.beginAdd, {});\n        this.batchChildCount = 0;\n      }\n\n      this.updateRowIndex(); // update focus module, need to refix this once grid source modified.\n\n      var focusModule = getValue('focusModule', this.parent.grid);\n      var table = this.parent.getContentTable();\n\n      if (this.parent.getBatchChanges()[this.deletedRecords].length && this.parent.editSettings.newRowPosition === 'Above') {\n        actualIndex = e.row.rowIndex;\n        focusModule.getContent().matrix.matrix = this.matrix;\n      } else {\n        actualIndex = table.getElementsByClassName('e-batchrow')[0].rowIndex; // if (this.parent.frozenRows || this.parent.frozenColumns) {\n        //   actualIndex = this.batchIndex;\n        // }\n      }\n\n      focusModule.getContent().matrix.current = [actualIndex, focusModule.getContent().matrix.current[1]];\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchDelete = function (args) {\n    if (!this.batchRecords.length) {\n      this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n      this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    }\n\n    var focusModule = getValue('focusModule', this.parent.grid);\n    this.matrix = focusModule.getContent().matrix.matrix;\n    var row = [];\n    var records = [];\n    var primarykey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var data;\n    var childs;\n    var uid;\n\n    if (!isNullOrUndefined(args.row) && this.parent.getSelectedRows().indexOf(args.row) === -1) {\n      data = args.rowData;\n      childs = findChildrenRecords(data);\n      uid = args.row.getAttribute('data-uid');\n    } else {\n      data = this.parent.grid.getSelectedRecords()[this.parent.grid.getSelectedRecords().length - 1];\n      childs = findChildrenRecords(data);\n      uid = this.parent.getSelectedRows()[0].getAttribute('data-uid');\n    }\n\n    var parentRowIndex = parseInt(this.parent.grid.getRowElementByUID(uid).getAttribute('aria-rowindex'), 10);\n\n    if (childs.length) {\n      var totalCount = parentRowIndex + childs.length;\n      var firstChildIndex = parentRowIndex + 1;\n\n      for (var i = firstChildIndex; i <= totalCount; i++) {\n        row.push(this.parent.grid.getDataRows()[i]);\n\n        if (this.parent.frozenRows || this.parent.frozenColumns || this.parent.getFrozenColumns()) {\n          row.push(this.parent.grid.getMovableRows()[i]);\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(data.parentItem)) {\n      var parentItem = getParentData(this.parent, data.parentItem.uniqueID);\n\n      if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n        var childIndex = parentItem.childRecords.indexOf(data);\n        parentItem.childRecords.splice(childIndex, 1);\n      }\n\n      this.batchDeletedRecords = extendArray(this.batchDeletedRecords);\n      this.batchDeletedRecords.push(data);\n    }\n\n    childs.push(data);\n    records = childs;\n\n    for (var i = 0; i < records.length; i++) {\n      var indexvalue = this.batchRecords.map(function (e) {\n        return e[primarykey];\n      }).indexOf(records[i][primarykey]);\n\n      if (indexvalue !== -1) {\n        this.batchRecords.splice(indexvalue, 1);\n      }\n    }\n\n    for (var i = 0; i < row.length; i++) {\n      if (!isNullOrUndefined(row[i])) {\n        this.parent.grid.selectionModule.selectedRecords.push(row[i]);\n      }\n    }\n  };\n\n  BatchEdit.prototype.updateRowIndex = function () {\n    var rows = this.parent.grid.getDataRows();\n\n    for (var i = 0; i < rows.length; i++) {\n      rows[i].setAttribute('aria-rowindex', i.toString());\n    }\n\n    var freeze = this.parent.getFrozenLeftColumnsCount() > 0 || this.parent.getFrozenRightColumnsCount() > 0 ? true : false;\n\n    if (this.parent.frozenRows || this.parent.getFrozenColumns() || this.parent.frozenColumns || freeze) {\n      var mRows = this.parent.grid.getMovableDataRows();\n      var freezeRightRows = this.parent.grid.getFrozenRightDataRows();\n\n      for (var i = 0; i < mRows.length; i++) {\n        mRows[i].setAttribute('aria-rowindex', i.toString());\n\n        if (freeze) {\n          freezeRightRows[i].setAttribute('aria-rowindex', i.toString());\n        }\n      }\n    }\n  };\n\n  BatchEdit.prototype.updateChildCount = function (records) {\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n    var addedRecords = 'addedRecords';\n    var parentItem = this.parent.editSettings.newRowPosition === 'Child' ? 'primaryParent' : 'parentItem';\n\n    for (var i = 0; i < this.parent.getBatchChanges()[addedRecords].length; i++) {\n      if (!isNullOrUndefined(this.parent.getBatchChanges()[addedRecords][i][parentItem])) {\n        if (this.parent.getBatchChanges()[addedRecords][i][parentItem][primaryKey] === records[this.addRowIndex][primaryKey]) {\n          this.batchChildCount = this.batchChildCount + 1;\n        }\n      }\n    }\n  };\n\n  BatchEdit.prototype.beforeBatchSave = function (e) {\n    var changeRecords = 'changedRecords';\n    var deleterecords = 'deletedRecords';\n    var changedRecords = e.batchChanges[changeRecords];\n\n    if (e.batchChanges[changeRecords].length) {\n      var columnName = void 0;\n\n      for (var i = 0; i < changedRecords.length; i++) {\n        editAction({\n          value: changedRecords[i],\n          action: 'edit'\n        }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName);\n      }\n    }\n\n    if (e.batchChanges[deleterecords].length) {\n      var deletedRecords = e.batchChanges[deleterecords];\n      var record = deletedRecords;\n\n      for (var i = 0; i < record.length; i++) {\n        this.deleteUniqueID(record[i].uniqueID);\n        var childs = findChildrenRecords(record[i]);\n\n        for (var c = 0; c < childs.length; c++) {\n          this.deleteUniqueID(childs[c].uniqueID);\n        }\n\n        e.batchChanges[deleterecords] = e.batchChanges[deleterecords].concat(childs);\n      }\n    }\n\n    this.isAdd = false;\n  };\n\n  BatchEdit.prototype.deleteUniqueID = function (value) {\n    var idFilter = 'uniqueIDFilterCollection';\n    delete this.parent[idFilter][value];\n    var id = 'uniqueIDCollection';\n    delete this.parent[id][value];\n  };\n\n  BatchEdit.prototype.batchCancelAction = function () {\n    var targetElement = 'targetElement';\n    var index;\n    var parentItem = 'parentItem';\n    var indexvalue = 'index';\n    var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n    var childRecords = 'childRecords';\n    var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n    var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n\n    if (!isNullOrUndefined(this.parent[targetElement])) {\n      var row = this.parent[targetElement].closest('tr');\n      this.parent.collapseRow(row);\n      this.parent[targetElement] = null;\n    }\n\n    if (!isNullOrUndefined(this.batchAddedRecords)) {\n      for (var i = 0; i < this.batchAddedRecords.length; i++) {\n        index = data.map(function (e) {\n          return e[primaryKey];\n        }).indexOf(this.batchAddedRecords[i][primaryKey]);\n        data.splice(index, 1);\n\n        if (this.parent.editSettings.newRowPosition === 'Child') {\n          index = currentViewRecords.map(function (e) {\n            return e[primaryKey];\n          }).indexOf(this.batchAddedRecords[i][parentItem] ? this.batchAddedRecords[i][parentItem][primaryKey] : this.batchAddedRecords[i][primaryKey]);\n\n          if (!isNullOrUndefined(currentViewRecords[index])) {\n            var children = currentViewRecords[index][childRecords];\n\n            for (var j = 0; children && j < children.length; j++) {\n              if (children[j][primaryKey] === this.batchAddedRecords[i][primaryKey]) {\n                currentViewRecords[index][childRecords].splice(j, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(this.batchDeletedRecords)) {\n      for (var i = 0; i < this.batchDeletedRecords.length; i++) {\n        if (!isNullOrUndefined(this.batchDeletedRecords[i][parentItem])) {\n          index = currentViewRecords.map(function (e) {\n            return e[primaryKey];\n          }).indexOf(this.batchDeletedRecords[i][parentItem][primaryKey]);\n          var positionIndex = this.batchDeletedRecords[i][indexvalue] === 0 ? this.batchDeletedRecords[i][indexvalue] : this.batchDeletedRecords[i][indexvalue] - 1;\n\n          if (!isNullOrUndefined(currentViewRecords[index])) {\n            currentViewRecords[index][childRecords].splice(positionIndex, 0, this.batchDeletedRecords[i]);\n          }\n        }\n      }\n    }\n\n    this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.currentViewRecords = [];\n    this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    this.batchIndex = 0;\n    this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n    this.batchDeletedRecords = [];\n    this.parent.grid.renderModule.refresh();\n  };\n\n  BatchEdit.prototype.batchSave = function (args) {\n    if (this.parent.editSettings.mode === 'Batch') {\n      var i = void 0;\n      var batchChanges = Object.hasOwnProperty.call(args, 'updatedRecords') ? args.updatedRecords : this.parent.getBatchChanges();\n      var deletedRecords = 'deletedRecords';\n      var addedRecords = 'addedRecords';\n      var index = 'index';\n      var uniqueID = 'uniqueID';\n      var data = this.parent.grid.dataSource instanceof DataManager ? this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n      var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n      var primarykey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n      var level = 'level';\n      var addRecords = batchChanges[addedRecords];\n      var parentItem = 'parentItem';\n      var selectedIndex = void 0;\n      var addRowIndex = void 0;\n      var columnName = void 0;\n      var addRowRecord = void 0;\n      var childRecords = 'childRecords';\n\n      if (addRecords.length > 1 && this.parent.editSettings.newRowPosition !== 'Bottom') {\n        addRecords.reverse();\n      }\n\n      if (this.parent.editSettings.newRowPosition !== 'Bottom' && !Object.hasOwnProperty.call(args, 'updatedRecords')) {\n        data.splice(data.length - addRecords.length, addRecords.length);\n\n        if (!this.parent.allowPaging && data.length !== currentViewRecords.length) {\n          if (currentViewRecords.length > addRecords.length) {\n            currentViewRecords.splice(currentViewRecords.length - addRecords.length, addRecords.length);\n          }\n        } else {\n          var totalRecords = extendArray(data);\n\n          if (totalRecords.length) {\n            var startIndex = totalRecords.map(function (e) {\n              return e[primarykey_1];\n            }).indexOf(currentViewRecords[0][primarykey_1]);\n            var endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n            currentViewRecords = totalRecords.splice(startIndex, endIndex);\n          }\n        }\n      }\n\n      if (this.batchAddRowRecord.length === 0) {\n        this.batchAddRowRecord.push(this.parent.flatData[args.index]);\n      }\n\n      for (i = 0; i < addRecords.length; i++) {\n        var taskData = extend({}, addRecords[i]);\n        delete taskData.parentItem;\n        delete taskData.uniqueID;\n        delete taskData.index;\n        delete taskData.level;\n        delete taskData.hasChildRecords;\n        delete taskData.childRecords;\n        delete taskData.parentUniqueID;\n\n        if (!isNullOrUndefined(taskData.primaryParent)) {\n          delete taskData.primaryParent;\n        }\n\n        addRecords[i].taskData = taskData;\n        addRowRecord = this.batchAddRowRecord[i];\n\n        if (isNullOrUndefined(addRowRecord)) {\n          addRowRecord = this.batchAddRowRecord[i - 1];\n        }\n\n        if (this.isSelfReference) {\n          if (!isNullOrUndefined(addRecords[i].parentItem)) {\n            updateParentRow(primarykey_1, addRecords[i].parentItem, 'add', this.parent, this.isSelfReference, addRecords[i]);\n          }\n        }\n\n        if (!isNullOrUndefined(addRowRecord)) {\n          addRowIndex = addRowRecord.index;\n        }\n\n        if (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n          if (isNullOrUndefined(addRecords[i].parentItem) && this.selectedIndex === -1) {\n            selectedIndex = -1;\n            addRowRecord = null;\n          }\n        }\n\n        editAction({\n          value: addRecords[i],\n          action: 'add'\n        }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n        selectedIndex = null;\n\n        if (this.parent.editSettings.newRowPosition === 'Child' && !isNullOrUndefined(addRecords[i][parentItem])) {\n          var indexValue = currentViewRecords.map(function (e) {\n            return e[primarykey_1];\n          }).indexOf(addRecords[i][parentItem][primarykey_1]);\n          var children = currentViewRecords[indexValue][childRecords];\n\n          for (var j = 0; j < children.length; j++) {\n            if (children[j][primarykey_1] === addRecords[i][primarykey_1]) {\n              currentViewRecords[indexValue][childRecords].splice(j, 1);\n            }\n          }\n        }\n      }\n\n      if (batchChanges[deletedRecords].length) {\n        for (i = 0; i < batchChanges[deletedRecords].length; i++) {\n          editAction({\n            value: batchChanges[deletedRecords][i],\n            action: 'delete'\n          }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n        }\n      }\n\n      this.parent.parentData = [];\n\n      for (var i_1 = 0; i_1 < data.length; i_1++) {\n        data[i_1][index] = i_1;\n        setValue('uniqueIDCollection.' + data[i_1][uniqueID] + '.index', i_1, this.parent);\n\n        if (!data[i_1][level]) {\n          this.parent.parentData.push(data[i_1]);\n        }\n      }\n    }\n\n    this.batchAddRowRecord = this.batchAddedRecords = this.batchRecords = this.batchDeletedRecords = this.currentViewRecords = [];\n  };\n\n  BatchEdit.prototype.getActualRowObjectIndex = function (index) {\n    var rows = this.parent.grid.getDataRows();\n\n    if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') && this.selectedIndex > -1) {\n      if (!isNullOrUndefined(this.batchRecords[this.addRowIndex]) && this.batchRecords[this.addRowIndex].expanded) {\n        if (this.parent.getBatchChanges()[this.addedRecords].length > 1 || this.parent.getBatchChanges()[this.deletedRecords].length) {\n          index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n\n          if (this.parent.editSettings.newRowPosition !== 'Child') {\n            var batchChildCount = this.getBatchChildCount();\n            index = index + batchChildCount;\n          }\n        } else {\n          index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n        }\n      }\n\n      if (index >= rows.length) {\n        index = rows.length - 1;\n      }\n\n      this.updateChildCount(this.parent.grid.getCurrentViewRecords());\n\n      if (this.batchChildCount) {\n        index += this.batchChildCount;\n      }\n\n      this.batchChildCount = 0;\n    }\n\n    return index;\n  };\n\n  BatchEdit.prototype.immutableBatchAction = function (e) {\n    e.args.cancel = true;\n    var changes = this.parent.grid.getBatchChanges();\n    var addedRecords = [];\n    var index = 'index';\n\n    if (Object.keys(changes).length) {\n      addedRecords = changes.addedRecords;\n    }\n\n    for (var i = 0; i < addedRecords.length; i++) {\n      e.rows.splice(addedRecords[i][index], 1);\n    }\n  };\n\n  BatchEdit.prototype.nextCellIndex = function (args) {\n    var index = 'index';\n    var rowIndex = 'rowIndex';\n    args[index] = this.parent.getSelectedRows()[0][rowIndex];\n  };\n\n  return BatchEdit;\n}();\n\nexport { BatchEdit };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-treegrid/src/treegrid/actions/batch-edit.js"],"names":["isNullOrUndefined","extend","setValue","getValue","merge","events","DataManager","findChildrenRecords","getParentData","extendArray","getUid","updateParentRow","editAction","BatchEdit","parent","batchChildCount","addedRecords","deletedRecords","batchAddedRecords","batchDeletedRecords","batchAddRowRecord","isSelfReference","parentIdMapping","batchRecords","currentViewRecords","isAdd","addEventListener","prototype","on","cellSaved","batchAdd","beforeBatchAdd","batchSave","beforeBatchDelete","beforeBatchSave","batchPageAction","batchCancelAction","grid","immutableBatchAction","nextCellIndex","removeEventListener","isDestroyed","off","destroy","getBatchRecords","getAddRowIndex","addRowIndex","getSelectedIndex","selectedIndex","getBatchChildCount","data","dataSource","json","primaryKey","getPrimaryKeyFieldNames","index","length","i","map","e","indexOf","splice","args","actualCellIndex","cell","cellIndex","frozenCols","frozenColumns","getFrozenColumns","columnObject","freeze","getFrozenLeftColumnsCount","getFrozenRightColumnsCount","colCount","treeColumnIndex","renderModule","cellRender","rowData","column","getColumnByIndex","editSettings","mode","newRowPosition","added","level","primaryKey_1","currentDataIndex","indexvalue","parentItem","uniqueID","parentRecord","idMapping","parentUniqueID","rowObjectIndex","getActualRowObjectIndex","newBatchRowAdded","push","getRowsObject","changes","element","id","Object","hasOwnProperty","call","batchIndex","primaryParent","childRecords","childMapping","childRecordCount","record","hasChildRecords","edit","isTabLastRow","editModule","cancel","selectedRowIndex","addRowRecord","getSelectedRecords","actualIndex","getCurrentViewRecords","records","getBatchChanges","updateChildCount","notify","beginAdd","updateRowIndex","focusModule","table","getContentTable","row","rowIndex","getContent","matrix","getElementsByClassName","current","primarykey","childs","uid","getSelectedRows","getAttribute","parentRowIndex","parseInt","getRowElementByUID","totalCount","firstChildIndex","getDataRows","frozenRows","getMovableRows","childIndex","selectionModule","selectedRecords","rows","setAttribute","toString","mRows","getMovableDataRows","freezeRightRows","getFrozenRightDataRows","changeRecords","deleterecords","changedRecords","batchChanges","columnName","value","action","deleteUniqueID","c","concat","idFilter","targetElement","closest","collapseRow","children","j","positionIndex","refresh","updatedRecords","primarykey_1","addRecords","reverse","allowPaging","totalRecords","startIndex","endIndex","pageSettings","pageSize","flatData","taskData","indexValue","parentData","i_1","expanded","keys"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, extend, setValue, getValue, merge } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, extendArray } from '../utils';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { updateParentRow, editAction } from './crud-actions';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n *\n * @hidden\n */\nvar BatchEdit = /** @class */ (function () {\n    function BatchEdit(parent) {\n        this.batchChildCount = 0;\n        this.addedRecords = 'addedRecords';\n        this.deletedRecords = 'deletedRecords';\n        this.batchAddedRecords = [];\n        this.batchDeletedRecords = [];\n        this.batchAddRowRecord = [];\n        this.parent = parent;\n        this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n        this.batchRecords = [];\n        this.currentViewRecords = [];\n        this.isAdd = false;\n        this.addEventListener();\n    }\n    BatchEdit.prototype.addEventListener = function () {\n        this.parent.on(events.cellSaved, this.cellSaved, this);\n        this.parent.on(events.batchAdd, this.batchAdd, this);\n        this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);\n        this.parent.on(events.batchSave, this.batchSave, this);\n        this.parent.on(events.beforeBatchDelete, this.beforeBatchDelete, this);\n        this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);\n        this.parent.on('batchPageAction', this.batchPageAction, this);\n        this.parent.on('batchCancelAction', this.batchCancelAction, this);\n        this.parent.grid.on('immutable-batch-cancel', this.immutableBatchAction, this);\n        this.parent.grid.on('next-cell-index', this.nextCellIndex, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    BatchEdit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.cellSaved, this.cellSaved);\n        this.parent.off(events.batchAdd, this.batchAdd);\n        this.parent.off(events.batchSave, this.batchSave);\n        this.parent.off(events.beforeBatchAdd, this.beforeBatchAdd);\n        this.parent.off(events.beforeBatchDelete, this.beforeBatchDelete);\n        this.parent.off(events.beforeBatchSave, this.beforeBatchSave);\n        this.parent.off('batchPageAction', this.batchPageAction);\n        this.parent.off('batchCancelAction', this.batchCancelAction);\n        this.parent.grid.off('immutable-batch-cancel', this.immutableBatchAction);\n        this.parent.grid.off('next-cell-index', this.nextCellIndex);\n    };\n    /**\n     * To destroy the editModule\n     *\n     * @returns {void}\n     * @hidden\n     */\n    BatchEdit.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {Object[]} Returns modified records in batch editing.\n     */\n    BatchEdit.prototype.getBatchRecords = function () {\n        return this.batchRecords;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns index of newly add row\n     */\n    BatchEdit.prototype.getAddRowIndex = function () {\n        return this.addRowIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns selected row index\n     */\n    BatchEdit.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns newly added child count\n     */\n    BatchEdit.prototype.getBatchChildCount = function () {\n        return this.batchChildCount;\n    };\n    BatchEdit.prototype.batchPageAction = function () {\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var index;\n        if (!isNullOrUndefined(this.batchAddedRecords) && this.batchAddedRecords.length) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[primaryKey]; }).indexOf(this.batchAddedRecords[i][primaryKey]);\n                data.splice(index, 1);\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.batchDeletedRecords = this.currentViewRecords = [];\n    };\n    BatchEdit.prototype.cellSaved = function (args) {\n        var actualCellIndex = args.cell.cellIndex;\n        var frozenCols = this.parent.frozenColumns || this.parent.getFrozenColumns();\n        if (frozenCols && args.columnObject.index > frozenCols) {\n            actualCellIndex = actualCellIndex + frozenCols;\n        }\n        var freeze = (this.parent.getFrozenLeftColumnsCount() > 0 ||\n            this.parent.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (freeze) {\n            var colCount = this.parent.getFrozenLeftColumnsCount() + actualCellIndex;\n            if (colCount === this.parent.treeColumnIndex) {\n                this.parent.renderModule.cellRender({ data: args.rowData, cell: args.cell,\n                    column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n                });\n            }\n        }\n        else if (actualCellIndex === this.parent.treeColumnIndex) {\n            this.parent.renderModule.cellRender({ data: args.rowData, cell: args.cell,\n                column: this.parent.grid.getColumnByIndex(args.cell.cellIndex)\n            });\n        }\n        if (this.isAdd && this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var added = void 0;\n            var level = 'level';\n            var primaryKey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var currentDataIndex = void 0;\n            var indexvalue = void 0;\n            var parentItem = 'parentItem';\n            var uniqueID = 'uniqueID';\n            var parentRecord = this.selectedIndex > -1 ? this.batchRecords[this.addRowIndex][parentItem] : null;\n            var idMapping = void 0;\n            var parentUniqueID = void 0;\n            var parentIdMapping = void 0;\n            var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Top' || this.selectedIndex === -1 ? 0 :\n                this.parent.editSettings.newRowPosition === 'Above' ? this.addRowIndex\n                    : this.addRowIndex + 1;\n            rowObjectIndex = this.getActualRowObjectIndex(rowObjectIndex);\n            if (this.newBatchRowAdded) {\n                if (this.batchRecords.length) {\n                    idMapping = this.batchRecords[this.addRowIndex][this.parent.idMapping];\n                    parentIdMapping = this.batchRecords[this.addRowIndex][this.parent.parentIdMapping];\n                    if (this.batchRecords[this.addRowIndex][parentItem]) {\n                        parentUniqueID = this.batchRecords[this.addRowIndex][parentItem][uniqueID];\n                    }\n                }\n                this.batchAddedRecords = extendArray(this.batchAddedRecords);\n                this.batchAddRowRecord = extendArray(this.batchAddRowRecord);\n                this.batchAddRowRecord.push(this.batchRecords[this.addRowIndex]);\n                added = this.parent.grid.getRowsObject()[rowObjectIndex].changes;\n                added.uniqueID = getUid(this.parent.element.id + '_data_');\n                setValue('uniqueIDCollection.' + added.uniqueID, added, this.parent);\n                if (!Object.prototype.hasOwnProperty.call(added, 'level')) {\n                    this.batchIndex = this.selectedIndex === -1 ? 0 : this.batchIndex;\n                    if (this.parent.editSettings.newRowPosition === 'Child') {\n                        added.primaryParent = parentRecord;\n                        if (this.selectedIndex > -1) {\n                            added.parentItem = extend({}, this.batchRecords[this.addRowIndex]);\n                            added.parentUniqueID = added.parentItem.uniqueID;\n                            delete added.parentItem.childRecords;\n                            delete added.parentItem[this.parent.childMapping];\n                            added.level = added.parentItem.level + 1;\n                            added.index = this.batchIndex;\n                            var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                            var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                            record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                            if (this.isSelfReference) {\n                                added[this.parent.parentIdMapping] = idMapping;\n                            }\n                            updateParentRow(primaryKey_1, added.parentItem, 'add', this.parent, this.isSelfReference, added);\n                        }\n                    }\n                    else if ((this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below')\n                        && !isNullOrUndefined(this.batchRecords[this.addRowIndex])) {\n                        added.level = this.batchRecords[this.addRowIndex][level];\n                        if (added.level && this.selectedIndex > -1) {\n                            added.parentItem = parentRecord;\n                            added.parentUniqueID = parentUniqueID;\n                            delete added.parentItem.childRecords;\n                            delete added.parentItem[this.parent.childMapping];\n                        }\n                        added.index = this.parent.editSettings.newRowPosition === 'Below' ? this.batchIndex : this.batchIndex - 1;\n                        if (this.parent.editSettings.newRowPosition === 'Below' && this.selectedIndex > -1) {\n                            var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                            var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                            record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                        }\n                        if (this.parent.editSettings.newRowPosition === 'Above' && this.selectedIndex > -1) {\n                            var record = this.batchRecords[this.addRowIndex];\n                            currentDataIndex = data.map(function (e) { return e[primaryKey_1]; }).indexOf(record[primaryKey_1]);\n                        }\n                        if (this.isSelfReference) {\n                            added[this.parent.parentIdMapping] = parentIdMapping;\n                        }\n                    }\n                    added.index = added.index === -1 ? 0 : added.index;\n                    added.hasChildRecords = false;\n                    added.childRecords = [];\n                    this.batchRecords.splice(added.index, 0, added);\n                    this.currentViewRecords.splice(added.index, 0, added);\n                    if (currentDataIndex) {\n                        indexvalue = currentDataIndex;\n                    }\n                    else {\n                        indexvalue = added.index;\n                    }\n                    if (this.parent.editSettings.newRowPosition !== 'Above') {\n                        indexvalue = added.index === 0 ? indexvalue : indexvalue + 1;\n                    }\n                    data.splice(indexvalue, 0, added);\n                    this.batchAddedRecords.push(added);\n                }\n                this.parent.grid.getRowsObject()[rowObjectIndex].data = added;\n                this.newBatchRowAdded = false;\n            }\n            if (this.parent.frozenColumns || this.parent.getFrozenColumns()\n                && this.parent.grid.getRowsObject()[rowObjectIndex].edit === 'add') {\n                merge(this.currentViewRecords[rowObjectIndex], this.parent.grid.getRowsObject()[rowObjectIndex].changes);\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchAdd = function (e) {\n        var isTabLastRow = 'isTabLastRow';\n        if (this.parent.editSettings.mode === 'Cell' && this.parent.editModule[isTabLastRow]) {\n            e.cancel = true;\n            this.parent.editModule[isTabLastRow] = false;\n            return;\n        }\n        this.selectedIndex = this.parent.grid.selectedRowIndex;\n        this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n        this.addRowRecord = this.parent.getSelectedRecords()[0];\n    };\n    BatchEdit.prototype.batchAdd = function (e) {\n        if (this.parent.editSettings.newRowPosition !== 'Bottom') {\n            this.isAdd = true;\n            this.newBatchRowAdded = true;\n            var actualIndex = 0;\n            if (!this.batchRecords.length) {\n                this.batchAddedRecords = [];\n                this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n                this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Top') {\n                var records = this.parent.grid.getCurrentViewRecords();\n                if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n                    records = this.batchRecords;\n                }\n                this.updateChildCount(records);\n                this.parent.notify(events.beginAdd, {});\n                this.batchChildCount = 0;\n            }\n            this.updateRowIndex();\n            // update focus module, need to refix this once grid source modified.\n            var focusModule = getValue('focusModule', this.parent.grid);\n            var table = this.parent.getContentTable();\n            if (this.parent.getBatchChanges()[this.deletedRecords].length && this.parent.editSettings.newRowPosition === 'Above') {\n                actualIndex = e.row.rowIndex;\n                focusModule.getContent().matrix.matrix = this.matrix;\n            }\n            else {\n                actualIndex = table.getElementsByClassName('e-batchrow')[0].rowIndex;\n                // if (this.parent.frozenRows || this.parent.frozenColumns) {\n                //   actualIndex = this.batchIndex;\n                // }\n            }\n            focusModule.getContent().matrix.current = [actualIndex, focusModule.getContent().matrix.current[1]];\n        }\n    };\n    BatchEdit.prototype.beforeBatchDelete = function (args) {\n        if (!this.batchRecords.length) {\n            this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        }\n        var focusModule = getValue('focusModule', this.parent.grid);\n        this.matrix = focusModule.getContent().matrix.matrix;\n        var row = [];\n        var records = [];\n        var primarykey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var data;\n        var childs;\n        var uid;\n        if (!isNullOrUndefined(args.row) && this.parent.getSelectedRows().indexOf(args.row) === -1) {\n            data = args.rowData;\n            childs = findChildrenRecords(data);\n            uid = args.row.getAttribute('data-uid');\n        }\n        else {\n            data = this.parent.grid.getSelectedRecords()[this.parent.grid.getSelectedRecords().length - 1];\n            childs = findChildrenRecords(data);\n            uid = this.parent.getSelectedRows()[0].getAttribute('data-uid');\n        }\n        var parentRowIndex = parseInt(this.parent.grid.getRowElementByUID(uid).getAttribute('aria-rowindex'), 10);\n        if (childs.length) {\n            var totalCount = parentRowIndex + childs.length;\n            var firstChildIndex = parentRowIndex + 1;\n            for (var i = firstChildIndex; i <= totalCount; i++) {\n                row.push(this.parent.grid.getDataRows()[i]);\n                if (this.parent.frozenRows || this.parent.frozenColumns || this.parent.getFrozenColumns()) {\n                    row.push(this.parent.grid.getMovableRows()[i]);\n                }\n            }\n        }\n        if (!isNullOrUndefined(data.parentItem)) {\n            var parentItem = getParentData(this.parent, data.parentItem.uniqueID);\n            if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n                var childIndex = parentItem.childRecords.indexOf(data);\n                parentItem.childRecords.splice(childIndex, 1);\n            }\n            this.batchDeletedRecords = extendArray(this.batchDeletedRecords);\n            this.batchDeletedRecords.push(data);\n        }\n        childs.push(data);\n        records = childs;\n        for (var i = 0; i < records.length; i++) {\n            var indexvalue = this.batchRecords.map(function (e) { return e[primarykey]; }).indexOf(records[i][primarykey]);\n            if (indexvalue !== -1) {\n                this.batchRecords.splice(indexvalue, 1);\n            }\n        }\n        for (var i = 0; i < row.length; i++) {\n            if (!isNullOrUndefined(row[i])) {\n                this.parent.grid.selectionModule.selectedRecords.push(row[i]);\n            }\n        }\n    };\n    BatchEdit.prototype.updateRowIndex = function () {\n        var rows = this.parent.grid.getDataRows();\n        for (var i = 0; i < rows.length; i++) {\n            rows[i].setAttribute('aria-rowindex', i.toString());\n        }\n        var freeze = (this.parent.getFrozenLeftColumnsCount() > 0 ||\n            this.parent.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (this.parent.frozenRows || this.parent.getFrozenColumns() || this.parent.frozenColumns || freeze) {\n            var mRows = this.parent.grid.getMovableDataRows();\n            var freezeRightRows = this.parent.grid.getFrozenRightDataRows();\n            for (var i = 0; i < mRows.length; i++) {\n                mRows[i].setAttribute('aria-rowindex', i.toString());\n                if (freeze) {\n                    freezeRightRows[i].setAttribute('aria-rowindex', i.toString());\n                }\n            }\n        }\n    };\n    BatchEdit.prototype.updateChildCount = function (records) {\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var addedRecords = 'addedRecords';\n        var parentItem = this.parent.editSettings.newRowPosition === 'Child' ? 'primaryParent' : 'parentItem';\n        for (var i = 0; i < this.parent.getBatchChanges()[addedRecords].length; i++) {\n            if (!isNullOrUndefined(this.parent.getBatchChanges()[addedRecords][i][parentItem])) {\n                if (this.parent.getBatchChanges()[addedRecords][i][parentItem][primaryKey] === records[this.addRowIndex][primaryKey]) {\n                    this.batchChildCount = this.batchChildCount + 1;\n                }\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchSave = function (e) {\n        var changeRecords = 'changedRecords';\n        var deleterecords = 'deletedRecords';\n        var changedRecords = e.batchChanges[changeRecords];\n        if (e.batchChanges[changeRecords].length) {\n            var columnName = void 0;\n            for (var i = 0; i < changedRecords.length; i++) {\n                editAction({ value: changedRecords[i], action: 'edit' }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName);\n            }\n        }\n        if (e.batchChanges[deleterecords].length) {\n            var deletedRecords = e.batchChanges[deleterecords];\n            var record = deletedRecords;\n            for (var i = 0; i < record.length; i++) {\n                this.deleteUniqueID(record[i].uniqueID);\n                var childs = findChildrenRecords(record[i]);\n                for (var c = 0; c < childs.length; c++) {\n                    this.deleteUniqueID(childs[c].uniqueID);\n                }\n                e.batchChanges[deleterecords] = e.batchChanges[deleterecords].concat(childs);\n            }\n        }\n        this.isAdd = false;\n    };\n    BatchEdit.prototype.deleteUniqueID = function (value) {\n        var idFilter = 'uniqueIDFilterCollection';\n        delete this.parent[idFilter][value];\n        var id = 'uniqueIDCollection';\n        delete this.parent[id][value];\n    };\n    BatchEdit.prototype.batchCancelAction = function () {\n        var targetElement = 'targetElement';\n        var index;\n        var parentItem = 'parentItem';\n        var indexvalue = 'index';\n        var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n        var childRecords = 'childRecords';\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        if (!isNullOrUndefined(this.parent[targetElement])) {\n            var row = this.parent[targetElement].closest('tr');\n            this.parent.collapseRow(row);\n            this.parent[targetElement] = null;\n        }\n        if (!isNullOrUndefined(this.batchAddedRecords)) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[primaryKey]; }).indexOf(this.batchAddedRecords[i][primaryKey]);\n                data.splice(index, 1);\n                if (this.parent.editSettings.newRowPosition === 'Child') {\n                    index = currentViewRecords.map(function (e) { return e[primaryKey]; })\n                        .indexOf(this.batchAddedRecords[i][parentItem] ? this.batchAddedRecords[i][parentItem][primaryKey]\n                        : this.batchAddedRecords[i][primaryKey]);\n                    if (!isNullOrUndefined(currentViewRecords[index])) {\n                        var children = currentViewRecords[index][childRecords];\n                        for (var j = 0; children && j < children.length; j++) {\n                            if (children[j][primaryKey] === this.batchAddedRecords[i][primaryKey]) {\n                                currentViewRecords[index][childRecords].splice(j, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!isNullOrUndefined(this.batchDeletedRecords)) {\n            for (var i = 0; i < this.batchDeletedRecords.length; i++) {\n                if (!isNullOrUndefined(this.batchDeletedRecords[i][parentItem])) {\n                    index = currentViewRecords.map(function (e) { return e[primaryKey]; })\n                        .indexOf(this.batchDeletedRecords[i][parentItem][primaryKey]);\n                    var positionIndex = this.batchDeletedRecords[i][indexvalue] === 0 ? this.batchDeletedRecords[i][indexvalue] :\n                        this.batchDeletedRecords[i][indexvalue] - 1;\n                    if (!isNullOrUndefined(currentViewRecords[index])) {\n                        currentViewRecords[index][childRecords].splice(positionIndex, 0, this.batchDeletedRecords[i]);\n                    }\n                }\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.currentViewRecords = [];\n        this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchIndex = 0;\n        this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchDeletedRecords = [];\n        this.parent.grid.renderModule.refresh();\n    };\n    BatchEdit.prototype.batchSave = function (args) {\n        if (this.parent.editSettings.mode === 'Batch') {\n            var i = void 0;\n            var batchChanges = Object.hasOwnProperty.call(args, 'updatedRecords') ? args.updatedRecords : this.parent.getBatchChanges();\n            var deletedRecords = 'deletedRecords';\n            var addedRecords = 'addedRecords';\n            var index = 'index';\n            var uniqueID = 'uniqueID';\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n            var primarykey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var level = 'level';\n            var addRecords = batchChanges[addedRecords];\n            var parentItem = 'parentItem';\n            var selectedIndex = void 0;\n            var addRowIndex = void 0;\n            var columnName = void 0;\n            var addRowRecord = void 0;\n            var childRecords = 'childRecords';\n            if (addRecords.length > 1 && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                addRecords.reverse();\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Bottom' && !Object.hasOwnProperty.call(args, 'updatedRecords')) {\n                data.splice(data.length - addRecords.length, addRecords.length);\n                if (!this.parent.allowPaging && data.length !== currentViewRecords.length) {\n                    if (currentViewRecords.length > addRecords.length) {\n                        currentViewRecords.splice(currentViewRecords.length - addRecords.length, addRecords.length);\n                    }\n                }\n                else {\n                    var totalRecords = extendArray(data);\n                    if (totalRecords.length) {\n                        var startIndex = totalRecords.map(function (e) { return e[primarykey_1]; })\n                            .indexOf(currentViewRecords[0][primarykey_1]);\n                        var endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n                        currentViewRecords = totalRecords.splice(startIndex, endIndex);\n                    }\n                }\n            }\n            if (this.batchAddRowRecord.length === 0) {\n                this.batchAddRowRecord.push(this.parent.flatData[args.index]);\n            }\n            for (i = 0; i < addRecords.length; i++) {\n                var taskData = extend({}, addRecords[i]);\n                delete taskData.parentItem;\n                delete taskData.uniqueID;\n                delete taskData.index;\n                delete taskData.level;\n                delete taskData.hasChildRecords;\n                delete taskData.childRecords;\n                delete taskData.parentUniqueID;\n                if (!isNullOrUndefined(taskData.primaryParent)) {\n                    delete taskData.primaryParent;\n                }\n                addRecords[i].taskData = taskData;\n                addRowRecord = this.batchAddRowRecord[i];\n                if (isNullOrUndefined(addRowRecord)) {\n                    addRowRecord = this.batchAddRowRecord[i - 1];\n                }\n                if (this.isSelfReference) {\n                    if (!isNullOrUndefined(addRecords[i].parentItem)) {\n                        updateParentRow(primarykey_1, addRecords[i].parentItem, 'add', this.parent, this.isSelfReference, addRecords[i]);\n                    }\n                }\n                if (!isNullOrUndefined(addRowRecord)) {\n                    addRowIndex = addRowRecord.index;\n                }\n                if (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                    if (isNullOrUndefined(addRecords[i].parentItem) && this.selectedIndex === -1) {\n                        selectedIndex = -1;\n                        addRowRecord = null;\n                    }\n                }\n                editAction({ value: addRecords[i], action: 'add' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                selectedIndex = null;\n                if (this.parent.editSettings.newRowPosition === 'Child' && !isNullOrUndefined(addRecords[i][parentItem])) {\n                    var indexValue = currentViewRecords.map(function (e) { return e[primarykey_1]; })\n                        .indexOf(addRecords[i][parentItem][primarykey_1]);\n                    var children = currentViewRecords[indexValue][childRecords];\n                    for (var j = 0; j < children.length; j++) {\n                        if (children[j][primarykey_1] === addRecords[i][primarykey_1]) {\n                            currentViewRecords[indexValue][childRecords].splice(j, 1);\n                        }\n                    }\n                }\n            }\n            if (batchChanges[deletedRecords].length) {\n                for (i = 0; i < batchChanges[deletedRecords].length; i++) {\n                    editAction({ value: batchChanges[deletedRecords][i], action: 'delete' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                }\n            }\n            this.parent.parentData = [];\n            for (var i_1 = 0; i_1 < data.length; i_1++) {\n                data[i_1][index] = i_1;\n                setValue('uniqueIDCollection.' + data[i_1][uniqueID] + '.index', i_1, this.parent);\n                if (!data[i_1][level]) {\n                    this.parent.parentData.push(data[i_1]);\n                }\n            }\n        }\n        this.batchAddRowRecord = this.batchAddedRecords = this.batchRecords = this.batchDeletedRecords = this.currentViewRecords = [];\n    };\n    BatchEdit.prototype.getActualRowObjectIndex = function (index) {\n        var rows = this.parent.grid.getDataRows();\n        if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child')\n            && this.selectedIndex > -1) {\n            if (!isNullOrUndefined(this.batchRecords[this.addRowIndex]) && this.batchRecords[this.addRowIndex].expanded) {\n                if (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length) {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                    if (this.parent.editSettings.newRowPosition !== 'Child') {\n                        var batchChildCount = this.getBatchChildCount();\n                        index = index + batchChildCount;\n                    }\n                }\n                else {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                }\n            }\n            if (index >= rows.length) {\n                index = rows.length - 1;\n            }\n            this.updateChildCount(this.parent.grid.getCurrentViewRecords());\n            if (this.batchChildCount) {\n                index += this.batchChildCount;\n            }\n            this.batchChildCount = 0;\n        }\n        return index;\n    };\n    BatchEdit.prototype.immutableBatchAction = function (e) {\n        e.args.cancel = true;\n        var changes = this.parent.grid.getBatchChanges();\n        var addedRecords = [];\n        var index = 'index';\n        if (Object.keys(changes).length) {\n            addedRecords = changes.addedRecords;\n        }\n        for (var i = 0; i < addedRecords.length; i++) {\n            e.rows.splice(addedRecords[i][index], 1);\n        }\n    };\n    BatchEdit.prototype.nextCellIndex = function (args) {\n        var index = 'index';\n        var rowIndex = 'rowIndex';\n        args[index] = this.parent.getSelectedRows()[0][rowIndex];\n    };\n    return BatchEdit;\n}());\nexport { BatchEdit };\n"]},"metadata":{},"sourceType":"module"}