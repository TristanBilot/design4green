{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isNullOrUndefined, createElement, extend, addClass, remove, removeClass, closest, merge } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/utils';\nimport { DateProcessor } from '../base/date-processor';\nimport * as cls from '../base/css-constants';\nimport { EditTooltip } from '../renderer/edit-tooltip';\n/**\n * File for handling taskbar editing operation in Gantt.\n */\n\nvar TaskbarEdit =\n/** @class */\nfunction (_super) {\n  __extends(TaskbarEdit, _super);\n\n  function TaskbarEdit(ganttObj) {\n    var _this = _super.call(this, ganttObj) || this;\n\n    _this.isMouseDragged = false;\n    _this.dependencyCancel = false;\n    _this.editElement = null;\n    _this.elementOffsetLeft = 0;\n    _this.elementOffsetTop = 0;\n    _this.elementOffsetWidth = 0;\n    _this.elementOffsetHeight = 0;\n    _this.segmentIndex = -1;\n    _this.parent = ganttObj;\n\n    _this.initPublicProp();\n\n    _this.wireEvents();\n\n    _this.editTooltip = new EditTooltip(_this.parent, _this);\n    return _this;\n  }\n\n  TaskbarEdit.prototype.wireEvents = function () {\n    this.parent.on('chartMouseDown', this.mouseDownHandler, this);\n    this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n    this.parent.on('chartMouseLeave', this.mouseLeaveHandler, this);\n    this.parent.on('chartMouseMove', this.mouseMoveAction, this);\n    this.parent.on('chartMouseClick', this.mouseClickHandler, this);\n  };\n  /**\n   * To initialize the public property.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.initPublicProp = function () {\n    this.taskBarEditElement = null;\n    this.taskBarEditRecord = null;\n    this.taskBarEditAction = null;\n    this.connectorSecondElement = null;\n    this.connectorSecondRecord = null;\n    this.connectorSecondAction = null;\n    this.highlightedSecondElement = null;\n    this.fromPredecessorText = null;\n    this.toPredecessorText = null;\n    this.finalPredecessor = null;\n    this.drawPredecessor = false;\n    this.roundOffDuration = true;\n    this.dragMouseLeave = false;\n    this.isMouseDragged = false;\n    this.previousItemProperty = ['left', 'progress', 'duration', 'isMilestone', 'startDate', 'endDate', 'width', 'progressWidth', 'autoLeft', 'autoDuration', 'autoStartDate', 'autoEndDate', 'autoWidth', 'segments'];\n    this.tapPointOnFocus = false;\n    this.touchEdit = false;\n  };\n\n  TaskbarEdit.prototype.mouseDownHandler = function (e) {\n    if (this.parent.editSettings.allowTaskbarEditing && !this.parent.readOnly) {\n      this.canDrag = false;\n\n      if (this.parent.isAdaptive && this.taskBarEditElement) {\n        var targetElement = this.getElementByPosition(e);\n        var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n\n        if (element && element.innerHTML === this.taskBarEditElement.innerHTML && !(targetElement.classList.contains(cls.connectorPointLeft) || targetElement.classList.contains(cls.connectorPointRight)) && !this.tapPointOnFocus) {\n          this.updateTaskBarEditElement(e);\n          this.canDrag = true;\n          e.preventDefault();\n        }\n      } else if (!this.parent.isAdaptive) {\n        this.updateTaskBarEditElement(e);\n      }\n    }\n  };\n\n  TaskbarEdit.prototype.mouseClickHandler = function (e) {\n    var targetElement = this.getElementByPosition(e);\n    var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n\n    if (this.parent.selectionModule && this.parent.selectionModule.enableSelectMultiTouch) {\n      if (this.tapPointOnFocus) {\n        this.updateTaskBarEditElement(e);\n      }\n\n      return;\n    }\n\n    if (this.tapPointOnFocus && element && element.innerHTML !== this.taskBarEditElement.innerHTML) {\n      this.connectorSecondRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n      this.connectorSecondAction = 'ConnectorPointLeftDrag';\n      this.connectorSecondElement = element;\n      this.fromPredecessorText = 'Finish';\n\n      if (this.validateConnectorPoint()) {\n        this.taskBarEditingAction(e, true);\n      }\n\n      this.showHideActivePredecessors(false);\n      this.initPublicProp();\n    } else if (targetElement.classList.contains(cls.connectorPointLeftHover) || targetElement.classList.contains(cls.connectorPointRightHover)) {\n      this.canDrag = false;\n      this.multipleSelectionEnabled();\n      this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n      this.tapPointOnFocus = true;\n      this.taskBarEditAction = 'ConnectorPointRightDrag';\n      this.connectorSecondRecord = this.taskBarEditRecord;\n      this.taskBarEditingAction(e, false);\n    } else {\n      if (this.tapPointOnFocus) {\n        this.showHideActivePredecessors(false);\n        this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n      }\n\n      this.updateTaskBarEditElement(e);\n    }\n  };\n\n  TaskbarEdit.prototype.showHideActivePredecessors = function (show) {\n    var ganttProp = this.taskBarEditRecord.ganttProperties;\n    var predecessors = ganttProp.predecessor;\n    var id = this.parent.viewType === 'ResourceView' ? ganttProp.taskId : ganttProp.rowUniqueID;\n\n    if (predecessors) {\n      for (var i = 0; i < predecessors.length; i++) {\n        var predecessor = predecessors[i];\n\n        if (id.toString() === predecessor.from || id.toString() === predecessor.to) {\n          this.applyActiveColor(predecessor.from, predecessor.to, show);\n        }\n      }\n    }\n\n    var chartContent = this.parent.ganttChartModule.chartBodyContainer;\n\n    if (show) {\n      addClass([this.taskBarEditElement], [cls.activeChildTask]);\n      addClass([chartContent], [cls.touchMode]);\n    } else {\n      removeClass([this.taskBarEditElement], [cls.activeChildTask]);\n      removeClass([chartContent], [cls.touchMode]);\n    }\n\n    this.touchEdit = show;\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n\n  TaskbarEdit.prototype.applyActiveColor = function (from, to, enable) {\n    var taskId = this.parent.viewType === 'ProjectView' ? this.taskBarEditRecord.ganttProperties.taskId.toString() : this.taskBarEditRecord.ganttProperties.rowUniqueID.toString();\n    var ganttRecord = taskId === from ? this.parent.connectorLineModule.getRecordByID(to) : this.parent.connectorLineModule.getRecordByID(from);\n    var $tr = this.parent.ganttChartModule.getChartRows()[this.parent.currentViewData.indexOf(ganttRecord)];\n\n    if (!isNullOrUndefined($tr)) {\n      var $taskbar = $tr.querySelector('.' + cls.taskBarMainContainer);\n      var $connectorElement = this.parent.element.querySelector('#ConnectorLineparent' + from + 'child' + to);\n\n      if (enable) {\n        addClass([$taskbar], [cls.activeConnectedTask]);\n\n        if ($connectorElement) {\n          addClass([$connectorElement], [cls.activeConnectedTask]);\n        }\n      } else {\n        removeClass([$taskbar], [cls.activeConnectedTask]);\n\n        if ($connectorElement) {\n          removeClass([$connectorElement], [cls.activeConnectedTask]);\n        }\n      }\n    }\n  };\n\n  TaskbarEdit.prototype.validateConnectorPoint = function () {\n    var parentRecord = this.taskBarEditRecord.ganttProperties;\n    var childRecord = this.connectorSecondRecord.ganttProperties;\n    var isValid = true;\n    var parentId = this.parent.viewType === 'ResourceView' ? parentRecord.taskId : parentRecord.rowUniqueID;\n    var childId = this.parent.viewType === 'ResourceView' ? childRecord.taskId : childRecord.rowUniqueID;\n\n    if (this.connectorSecondRecord.hasChildRecords) {\n      isValid = false;\n    } else if (childRecord.predecessor) {\n      for (var i = 0; i < childRecord.predecessor.length; i++) {\n        var predecessor = childRecord.predecessor[i];\n\n        if (predecessor.from === parentId.toString() && predecessor.to === childId.toString()) {\n          this.parent.connectorLineEditModule.childRecord = this.connectorSecondRecord;\n          this.parent.connectorLineEditModule.predecessorIndex = i;\n          this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n          isValid = false;\n          break;\n        } else if (predecessor.from === childId.toString() && predecessor.to === parentId.toString()) {\n          this.parent.connectorLineEditModule.childRecord = this.taskBarEditRecord;\n          this.parent.connectorLineEditModule.predecessorIndex = i;\n          this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n          isValid = false;\n          break;\n        }\n      }\n    }\n\n    return isValid;\n  }; // eslint-disable-next-line\n\n\n  TaskbarEdit.prototype.mouseLeaveHandler = function (e) {\n    this.dragMouseLeave = true;\n  };\n  /**\n   * To update taskbar edited elements on mouse down action.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {\n    var target = this.getElementByPosition(e);\n    var element;\n\n    if (target.classList.contains(cls.manualParentRightResizer) || target.classList.contains(cls.manualParentMainContainer) || target.classList.contains(cls.manualParentTaskBar)) {\n      element = parentsUntil(target, cls.manualParentMainContainer);\n    } else if (target.classList.contains(cls.manualParentMilestoneTop) || target.classList.contains(cls.manualParentMilestoneBottom) || target.classList.contains(cls.manualParentMilestone)) {\n      element = parentsUntil(target, cls.manualParentMilestone);\n    } else {\n      element = parentsUntil(target, cls.taskBarMainContainer);\n\n      if (!isNullOrUndefined(element) && !target.classList.contains('e-connectorpoint-left') && !target.classList.contains('e-connectorpoint-right')) {\n        var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n\n        if (!isNullOrUndefined(currentRecord.ganttProperties.segments) && currentRecord.ganttProperties.segments.length > 0) {\n          element = parentsUntil(target, cls.childTaskBarInnerDiv);\n        }\n      }\n    }\n\n    if (this.parent.editSettings.allowTaskbarEditing && element) {\n      this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n      this.editElement = element;\n      this.taskBarEditElement = element;\n      var index = this.taskBarEditElement.getAttribute('data-segment-index');\n\n      if (!isNullOrUndefined(index)) {\n        this.segmentIndex = Number(index);\n      } else {\n        this.segmentIndex = -1;\n      }\n\n      this.taskBarEditRecord = this.parent.ganttChartModule.getRecordByTaskBar(this.taskBarEditElement);\n\n      if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {\n        this.roundOffDuration = true;\n        this.taskBarEditAction = this.getTaskBarAction(e);\n\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && isNullOrUndefined(this.parent.taskFields.dependency)) {\n          this.taskBarEditAction = null;\n        }\n\n        this.updateMouseDownProperties(e);\n\n        if (this.parent.viewType === 'ResourceView') {\n          if (this.taskBarEditRecord.level === 0) {\n            return;\n          } else if (this.parent.enableMultiTaskbar) {\n            var parentRecord = this.parent.getTaskByUniqueID(this.taskBarEditRecord.parentItem.uniqueID);\n\n            if (!isNullOrUndefined(parentRecord) && !parentRecord.expanded) {\n              this.prevZIndex = this.taskBarEditElement.style.zIndex;\n              this.taskBarEditElement.style.zIndex = '1000';\n              addClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n            }\n          }\n        }\n      }\n    } else {\n      if (this.parent.isAdaptive) {\n        if (this.taskBarEditElement) {\n          this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n        }\n\n        this.initPublicProp();\n      } else {\n        this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n      }\n    }\n  };\n  /**\n   * To show/hide taskbar editing elements.\n   *\n   * @param {Element} element .\n   * @param {Element} secondElement .\n   * @param {boolean} fadeConnectorLine .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.showHideTaskBarEditingElements = function (element, secondElement, fadeConnectorLine) {\n    secondElement = secondElement ? secondElement : this.editElement;\n    var isShowProgressResizer = this.parent.taskFields.progress ? true : false;\n    var isShowConnectorPoints = true;\n\n    if (this.parent.readOnly) {\n      return;\n    }\n\n    if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar && element) {\n      var record = this.parent.ganttChartModule.getRecordByTaskBar(element);\n      var parentRecord = this.parent.getParentTask(record.parentItem);\n\n      if (!isNullOrUndefined(parentRecord)) {\n        if (!parentRecord.expanded) {\n          isShowProgressResizer = false;\n          isShowConnectorPoints = false;\n        }\n      }\n    }\n\n    if (element) {\n      if (element.querySelector('.' + cls.taskBarLeftResizer)) {\n        addClass([element.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n        addClass([element.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n\n        if (isShowProgressResizer) {\n          var progresElement = !isNullOrUndefined(element.querySelector('.' + cls.childProgressResizer)) ? true : false;\n\n          if (progresElement) {\n            addClass([element.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n          }\n        }\n      } else if (this.parent.isAdaptive && isShowProgressResizer) {\n        var record = this.parent.ganttChartModule.getRecordByTaskBar(element);\n\n        if (record.hasChildRecords) {\n          addClass([element], [cls.activeParentTask]);\n        }\n      }\n\n      if (isShowProgressResizer) {\n        addClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n      }\n\n      if (!isNullOrUndefined(this.parent.taskFields.dependency) && (element.querySelector('.' + cls.connectorPointLeft) || element.parentElement.querySelector('.' + cls.connectorPointLeft)) && isShowConnectorPoints) {\n        var connectorElement = !isNullOrUndefined(element.querySelector('.' + cls.connectorPointLeft)) ? element : element.parentElement;\n        addClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n        addClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n      }\n    } else if (!fadeConnectorLine) {\n      removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n    }\n\n    if (secondElement && element !== secondElement) {\n      if (secondElement.querySelector('.' + cls.taskBarLeftResizer)) {\n        removeClass([secondElement.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n        removeClass([secondElement.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n\n        if (secondElement.querySelector('.' + cls.childProgressResizer)) {\n          removeClass([secondElement.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n        }\n      }\n\n      if (!isNullOrUndefined(this.parent.taskFields.dependency) && (secondElement.querySelector('.' + cls.connectorPointLeft) || secondElement.parentElement.querySelector('.' + cls.connectorPointLeft))) {\n        var connectorElement = !isNullOrUndefined(secondElement.querySelector('.' + cls.connectorPointLeft)) ? secondElement : secondElement.parentElement;\n        removeClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n        removeClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n      } else if (this.parent.isAdaptive) {\n        var record = this.parent.ganttChartModule.getRecordByTaskBar(secondElement);\n\n        if (record && record.hasChildRecords) {\n          removeClass([secondElement], [cls.activeParentTask]);\n        }\n      }\n\n      this.editElement = null;\n    }\n  };\n  /**\n   * To get taskbar edit actions.\n   *\n   * @param {PointerEvent} e .\n   * @returns {string} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getTaskBarAction = function (e) {\n    var mouseDownElement = this.getElementByPosition(e);\n    var data = this.taskBarEditRecord;\n    var action = '';\n\n    if (mouseDownElement.classList.contains(cls.taskBarLeftResizer)) {\n      action = 'LeftResizing';\n    } else if (mouseDownElement.classList.contains(cls.taskBarRightResizer)) {\n      action = 'RightResizing';\n    } else if ((mouseDownElement.classList.contains(cls.childProgressResizer) || closest(mouseDownElement, '.' + cls.childProgressResizer)) && this.parent.taskFields.progress) {\n      action = 'ProgressResizing';\n    } else if (mouseDownElement.classList.contains(cls.connectorPointLeft)) {\n      action = 'ConnectorPointLeftDrag';\n    } else if (mouseDownElement.classList.contains(cls.connectorPointRight)) {\n      action = 'ConnectorPointRightDrag';\n    } else if (mouseDownElement.classList.contains(cls.manualParentRightResizer)) {\n      action = 'ParentResizing';\n    } else if (mouseDownElement.classList.contains(cls.manualParentTaskBar) || mouseDownElement.classList.contains(cls.manualParentMainContainer) || mouseDownElement.classList.contains(cls.manualParentMilestone) || mouseDownElement.classList.contains(cls.manualParentMilestoneTop) || mouseDownElement.classList.contains(cls.manualParentMilestoneBottom) || mouseDownElement.classList.contains(cls.manualParentMilestone)) {\n      action = 'ManualParentDrag';\n    } else if (data) {\n      action = data.hasChildRecords ? this.parent.taskMode === 'Auto' ? 'ParentDrag' : '' : data.ganttProperties.isMilestone ? 'MilestoneDrag' : 'ChildDrag';\n    }\n\n    return action;\n  };\n  /**\n   * To update property while perform mouse down.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateMouseDownProperties = function (event) {\n    var e = this.getCoordinate(event);\n\n    if (e.pageX || e.pageY) {\n      var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n      this.mouseDownX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n      this.tooltipPositionX = this.mouseDownX;\n      this.mouseDownY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    }\n\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      this.fromPredecessorText = this.taskBarEditAction === 'ConnectorPointLeftDrag' ? 'start' : 'finish';\n      this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.taskBarEditRecord.ganttProperties.taskName, this.fromPredecessorText, '', '');\n    }\n  };\n\n  TaskbarEdit.prototype.isMouseDragCheck = function () {\n    if (!this.isMouseDragged && this.taskBarEditAction && (this.mouseDownX !== this.mouseMoveX && (this.mouseDownX + 3 < this.mouseMoveX || this.mouseDownX - 3 > this.mouseMoveX) || this.mouseDownY !== this.mouseMoveY && (this.mouseDownY + 3 < this.mouseMoveY || this.mouseDownY - 3 > this.mouseMoveY))) {\n      this.isMouseDragged = true;\n      this.parent.initiateEditAction(true);\n      var item = this.taskBarEditRecord.ganttProperties;\n      this.previousItem = this.parent.timelineModule.extendFunction(item, this.previousItemProperty);\n\n      if (this.taskBarEditAction !== 'ConnectorPointLeftDrag' && this.taskBarEditAction !== 'ConnectorPointRightDrag') {\n        this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n      }\n\n      this.taskBarEditElement.setAttribute('aria-grabbed', 'true');\n    }\n  };\n  /**\n   * To handle mouse move action in chart\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.mouseMoveAction = function (event) {\n    var _this = this;\n\n    if (this.parent.isAdaptive) {\n      if (!this.canDrag) {\n        return;\n      } else {\n        this.multipleSelectionEnabled();\n      }\n    }\n\n    var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n    var e = this.getCoordinate(event);\n    this.mouseMoveX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n    this.mouseMoveY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    this.dragMouseLeave = false;\n    this.isMouseDragCheck();\n\n    if (this.isMouseDragged && this.taskBarEditAction) {\n      var args = {\n        cancel: false,\n        requestType: 'mergeSegment'\n      };\n      this.parent.trigger('actionBegin', args, function (arg) {\n        if (arg.cancel === false) {\n          _this.taskBarEditingAction(event, false);\n        }\n      });\n    } else if (!this.parent.isAdaptive && !this.taskBarEditAction) {\n      this.updateTaskBarEditElement(event);\n    }\n  };\n  /**\n   * Method to update taskbar editing action on mous move.\n   *\n   * @param {PointerEvent} e .\n   * @param {boolean} isMouseClick .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {\n    var _this = this;\n\n    var args = {};\n    var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n\n    if (this.taskBarEditRecord !== null) {\n      args.editingFields = this.taskBarEditRecord.ganttProperties;\n      args.data = this.taskBarEditRecord;\n\n      if (this.parent.viewType === 'ResourceView' && args.data.level === 0) {\n        return;\n      }\n\n      args.recordIndex = recordIndex;\n      args.taskBarEditAction = this.taskBarEditAction;\n      args.roundOffDuration = this.roundOffDuration;\n      args.cancel = false;\n      args.previousData = this.previousItem;\n      args.segmentIndex = this.segmentIndex;\n      this.roundOffDuration = args.roundOffDuration;\n      this.targetElement = args.target = closest(e.target, '.e-gantt-child-taskbar');\n      this.updateMouseMoveProperties(e);\n\n      if (this.taskBarEditAction === 'ProgressResizing') {\n        this.performProgressResize(e);\n      } else if (this.taskBarEditAction === 'LeftResizing') {\n        this.enableLeftResizing(e);\n      } else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {\n        this.enableRightResizing(e);\n      } else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') {\n        this.enableDragging(e);\n      } else if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n        this.updateConnectorLineSecondProperties(e);\n        this.triggerDependencyEvent(e);\n\n        if (!this.parent.isAdaptive) {\n          this.drawFalseLine();\n        }\n      }\n\n      this.setItemPosition();\n      this.updateEditedItem();\n      this.editTooltip.updateTooltip(this.segmentIndex);\n\n      if (isMouseClick) {\n        this.taskBarEditedAction(e);\n      }\n\n      this.parent.trigger('taskbarEditing', args, function (arg) {\n        if (arg.cancel && _this.taskBarEditRecord !== null) {\n          _this.tapPointOnFocus = false;\n          merge(_this.taskBarEditRecord.ganttProperties, arg.previousData);\n        }\n      });\n    }\n  };\n  /**\n   * To update property while perform mouse move.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {\n    var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n    var e = this.getCoordinate(event);\n\n    if (e.pageX || e.pageY) {\n      this.mouseMoveX = e.pageX - containerPosition.left + this.parent.ganttChartModule.scrollObject.previousScroll.left;\n      this.tooltipPositionX = this.mouseMoveX;\n      this.mouseMoveY = e.pageY - containerPosition.top + this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    }\n\n    var isConnectorLineEdit = this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag' ? true : false;\n\n    if (this.taskBarEditRecord.ganttProperties.width > 3 && !(this.taskBarEditAction === 'ProgressResizing' && (this.taskBarEditRecord.ganttProperties.progress === 0 || this.taskBarEditRecord.ganttProperties.progress === 100)) || isConnectorLineEdit) {\n      var mouseX = this.mouseMoveX - this.parent.ganttChartModule.scrollObject.previousScroll.left + containerPosition.left;\n      var mouseY = this.mouseMoveY - this.parent.ganttChartModule.scrollObject.previousScroll.top + containerPosition.top;\n\n      if (mouseX + 20 > containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.startScrollTimer('right');\n      } else if (mouseX - 20 < containerPosition.left) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.startScrollTimer('left');\n      } else if (isConnectorLineEdit && mouseY + 20 > containerPosition.top + this.parent.ganttChartModule.chartBodyContainer.offsetHeight) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.startScrollTimer('bottom');\n      } else if (isConnectorLineEdit && mouseY - 20 < containerPosition.top) {\n        this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.startScrollTimer('top');\n      } else {\n        this.stopScrollTimer();\n      }\n    } else {\n      this.stopScrollTimer();\n    }\n  };\n  /**\n   * To start the scroll timer.\n   *\n   * @param {string} direction .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.startScrollTimer = function (direction) {\n    var _this = this;\n\n    this.stopScrollTimer();\n    this.scrollTimer = window.setInterval(function () {\n      if (direction === 'right' || direction === 'bottom') {\n        _this.timerCount = _this.timerCount + 1 >= _this.parent.timelineModule.totalTimelineWidth ? _this.parent.timelineModule.totalTimelineWidth : _this.timerCount + 1;\n      } else {\n        _this.timerCount = _this.timerCount - 1 < 0 ? 0 : _this.timerCount - 1;\n      }\n\n      if (direction === 'bottom' || direction === 'top') {\n        _this.parent.ganttChartModule.scrollObject.setScrollTop(_this.timerCount);\n      } else {\n        _this.parent.ganttChartModule.scrollObject.setScrollLeft(_this.timerCount);\n      }\n\n      if (_this.taskBarEditAction === 'ConnectorPointLeftDrag' || _this.taskBarEditAction === 'ConnectorPointRightDrag') {\n        _this.drawFalseLine();\n      }\n    }, 0);\n  };\n  /**\n   * To stop the scroll timer.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.stopScrollTimer = function () {\n    window.clearInterval(this.scrollTimer);\n    this.scrollTimer = null;\n  };\n  /**\n   * To update left and width while perform taskbar drag operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  TaskbarEdit.prototype.enableDragging = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var differenceWidth = 0;\n\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && !this.taskBarEditElement.classList.contains('e-segment-first')) {\n      var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n        return __assign({}, e);\n      });\n      var segment = segments[this.segmentIndex];\n\n      if (this.mouseDownX > this.mouseMoveX) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n        this.previousMouseMove = this.mouseMoveX;\n        segment.left = segment.left - differenceWidth;\n      } else {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n        this.previousMouseMove = this.mouseMoveX;\n        segment.left = segment.left + differenceWidth;\n      }\n\n      var previousSegment = segments[this.segmentIndex - 1];\n      var nextSegment = segments[this.segmentIndex + 1];\n      var left = void 0;\n\n      if (this.taskBarEditElement.classList.contains('e-segment-inprogress')) {\n        left = segment.left < previousSegment.left + previousSegment.width ? previousSegment.left + previousSegment.width : segment.width + segment.left > nextSegment.left ? nextSegment.left - segment.width : segment.left;\n      } else {\n        left = segment.left < previousSegment.left + previousSegment.width ? previousSegment.left + previousSegment.width : item.left + segment.width + segment.left >= this.parent.timelineModule.totalTimelineWidth ? this.parent.timelineModule.totalTimelineWidth - segment.width : segment.left;\n      }\n\n      segment.left = left;\n      this.parent.setRecordValue('segments', segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        differenceWidth = this.mouseDownX - this.mouseMoveX;\n\n        if (differenceWidth > 0) {\n          this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n        }\n      } else {\n        differenceWidth = this.mouseMoveX - this.mouseDownX;\n        this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n      }\n\n      var left = item.left < 0 ? 0 : item.left + item.width >= this.parent.timelineModule.totalTimelineWidth ? this.parent.timelineModule.totalTimelineWidth - item.width : item.left;\n      this.parent.setRecordValue('left', left, item, true);\n    }\n  };\n  /**\n   * To update left and width while perform progress resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  TaskbarEdit.prototype.performProgressResize = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var diffrenceWidth = 0;\n\n    if (this.mouseDownX > this.mouseMoveX) {\n      if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width && item.left > 0) {\n        diffrenceWidth = this.mouseMoveX - item.left;\n        this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n      } else {\n        if (this.mouseMoveX >= item.left + item.width) {\n          this.parent.setRecordValue('progressWidth', item.width, item, true);\n        } else {\n          this.parent.setRecordValue('progressWidth', 0, item, true);\n        }\n      }\n    } else {\n      if (this.mouseMoveX > item.left && this.mouseMoveX < item.left + item.width) {\n        diffrenceWidth = this.mouseMoveX - item.left;\n        this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n      } else {\n        if (this.mouseMoveX <= item.left) {\n          this.parent.setRecordValue('progressWidth', 0, item, true);\n        } else {\n          this.parent.setRecordValue('progressWidth', item.width, item, true);\n        }\n      }\n    }\n\n    var widthValue = item.progressWidth > item.width ? item.width : item.progressWidth;\n    widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;\n    this.parent.setRecordValue('progressWidth', widthValue, item, true);\n    var diff = item.width - item.progressWidth;\n\n    if (diff <= 4) {\n      this.progressBorderRadius = 4 - diff;\n    } else {\n      this.progressBorderRadius = 0;\n    }\n  };\n  /**\n   * To update left and width while perform taskbar left resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.enableLeftResizing = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var differenceWidth = 0;\n\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar')) {\n      this.enableSplitTaskLeftResize(item);\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX < item.left + item.width) {\n          differenceWidth = this.mouseDownX - this.mouseMoveX;\n\n          if (item.left > 0) {\n            this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n            this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n          }\n        } else {\n          if (this.mouseMoveX > item.left + item.width) {\n            differenceWidth = this.mouseDownX - this.mouseMoveX;\n            this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n            this.parent.setRecordValue('width', 3, item, true);\n          }\n        }\n      } else {\n        if (this.mouseMoveX < item.left + item.width) {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n\n          if (item.left < item.left + item.width && this.previousItem.left + differenceWidth <= this.previousItem.left + this.previousItem.width) {\n            this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n            this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n          }\n        } else {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n          this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n          this.parent.setRecordValue('width', 3, item, true);\n        }\n      }\n\n      this.updateEditPosition(e, item);\n      this.parent.setRecordValue('left', this.previousItem.left + this.previousItem.width - item.width, item, true);\n    }\n  };\n\n  TaskbarEdit.prototype.enableSplitTaskLeftResize = function (item) {\n    var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n      return __assign({}, e);\n    });\n    var segment = segments[this.segmentIndex];\n    var differenceWidth = 0; //when decrease the left and increase the width\n\n    if (this.mouseDownX > this.mouseMoveX) {\n      if (this.mouseMoveX < item.left + segment.width + segment.left) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n        this.previousMouseMove = this.mouseMoveX; // when resize other than 0th segment\n\n        if (segment.left > 0) {\n          segment.left = segment.left - differenceWidth;\n          segment.width = segment.width + differenceWidth;\n\n          if (this.segmentIndex !== 0) {\n            var previousSegment = segments[this.segmentIndex - 1];\n\n            if (item.left + segment.left < item.left + previousSegment.left + previousSegment.width) {\n              var difference = item.left + previousSegment.left + previousSegment.width - (item.left + segment.left);\n              segment.width -= difference;\n              segment.left = segment.left + difference;\n            }\n          }\n        } else if (segment.left <= 0 && this.segmentIndex === 0) {\n          this.parent.setRecordValue('left', item.left - differenceWidth, item, true);\n          this.parent.setRecordValue('width', item.width + differenceWidth, item, true);\n          segment.width = segment.width + differenceWidth;\n\n          for (var i = 1; i < item.segments.length; i++) {\n            var segment_1 = segments[i];\n            segment_1.left = segment_1.left + differenceWidth;\n          }\n        }\n      } else {\n        if (this.mouseMoveX > item.left + segment.width + segment.left) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.left = segment.left - differenceWidth;\n          segment.width = this.parent.perDayWidth;\n        }\n      }\n    } else {\n      // when increase left value and decrease width of segment\n      if (this.mouseMoveX < item.left + segment.width + segment.left - this.parent.perDayWidth) {\n        differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n        this.previousMouseMove = this.mouseMoveX; // when decrease the first segment width\n\n        if (this.segmentIndex === 0 && segment.left <= 0) {\n          this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n          this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n          segment.width = segment.width - differenceWidth;\n\n          for (var i = 1; i < item.segments.length; i++) {\n            var segment_2 = segments[i];\n            segment_2.left = segment_2.left - differenceWidth;\n          } // when decrease remaining segments\n\n        } else if (segment.left < segment.left + segment.width && segment.left + differenceWidth <= segment.left + segment.width) {\n          segment.left = segment.left + differenceWidth;\n          segment.width = segment.width - differenceWidth;\n        } // when mouse move goes beyond one day width of task bar.\n\n      } else {\n        if (this.mouseMoveX < item.left + segment.left + segment.width) {\n          if (segment.width > this.parent.perDayWidth) {\n            differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n            this.previousMouseMove = this.mouseMoveX;\n            var singleDayDifference = segment.width - differenceWidth < this.parent.perDayWidth ? this.parent.perDayWidth > segment.width ? this.parent.perDayWidth - segment.width : segment.width - this.parent.perDayWidth : 0;\n            differenceWidth -= singleDayDifference;\n\n            if (this.segmentIndex === 0) {\n              this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n              this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n\n              for (var i = 1; i < item.segments.length; i++) {\n                var segment_3 = segments[i];\n                segment_3.left = segment_3.left - differenceWidth;\n              }\n            } else {\n              segment.left = segment.left + differenceWidth;\n              segment.width = segment.width - differenceWidth;\n            }\n          }\n        }\n      }\n    }\n\n    this.parent.setRecordValue('segments', segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n  /**\n   * Update mouse position and edited item value\n   *\n   * @param {PointerEvent} e .\n   * @param {ITaskData} item .\n   * @returns {void} .\n   */\n\n\n  TaskbarEdit.prototype.updateEditPosition = function (e, item) {\n    this.updateIsMilestone(item);\n    this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(item.width, item.progress), item, true);\n  };\n  /**\n   *  To update milestone property.\n   *\n   * @param {ITaskData} item .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateIsMilestone = function (item) {\n    if (item.width <= 3) {\n      this.parent.setRecordValue('width', 3, item, true);\n      this.parent.setRecordValue('isMilestone', true, item, true);\n    } else {\n      this.parent.setRecordValue('width', item.width, item, true);\n      this.parent.setRecordValue('isMilestone', false, item, true);\n    }\n  };\n  /**\n   * To update left and width while perform taskbar right resize operation.\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.enableRightResizing = function (e) {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var differenceWidth = 0;\n\n    if (this.taskBarEditElement.classList.contains('e-segmented-taskbar')) {\n      var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) {\n        return __assign({}, e);\n      });\n      var segment = segments[this.segmentIndex];\n\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX > item.left + segment.left && this.mouseDownX - this.mouseMoveX > 3) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseDownX - this.mouseMoveX : this.previousMouseMove - this.mouseMoveX;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.width = segment.width - differenceWidth;\n        } else {\n          if (this.mouseMoveX < item.left + segment.left) {\n            segment.width = this.parent.perDayWidth;\n          }\n        }\n      } else {\n        if (this.mouseMoveX > segment.left) {\n          differenceWidth = isNullOrUndefined(this.previousMouseMove) ? this.mouseMoveX - this.mouseDownX : this.mouseMoveX - this.previousMouseMove;\n          this.previousMouseMove = this.mouseMoveX;\n          segment.width = segment.width + differenceWidth;\n        }\n      }\n\n      var width = void 0;\n      var nextSegment = this.segmentIndex !== segments.length - 1 ? segments[this.segmentIndex + 1] : null;\n\n      if (!isNullOrUndefined(nextSegment)) {\n        if (!this.taskBarEditElement.classList.contains('e-segment-last')) {\n          width = segment.left + segment.width > nextSegment.left ? nextSegment.left - segment.left : segment.width;\n        }\n\n        segment.width = width;\n      }\n\n      if (this.segmentIndex === item.segments.length - 1) {\n        if (this.segmentIndex === 0) {\n          this.parent.setRecordValue('width', segment.width, item, true);\n        }\n      }\n\n      this.parent.setRecordValue('segments', segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    } else {\n      if (this.mouseDownX > this.mouseMoveX) {\n        if (this.mouseMoveX > item.left && this.mouseDownX - this.mouseMoveX > 3) {\n          differenceWidth = this.mouseDownX - this.mouseMoveX;\n          this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n        } else {\n          if (this.mouseMoveX < item.left) {\n            this.parent.setRecordValue('width', 3, item, true);\n          }\n        }\n      } else {\n        if (this.mouseMoveX > item.left) {\n          differenceWidth = this.mouseMoveX - this.mouseDownX;\n          this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n        }\n      }\n\n      this.updateEditPosition(e, item);\n    }\n  };\n  /**\n   * To updated startDate and endDate while perform taskbar edit operation.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateEditedItem = function () {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var left;\n    var projectStartDate;\n    var endDate;\n    var startDate;\n\n    switch (this.taskBarEditAction) {\n      case 'ProgressResizing':\n        this.parent.setRecordValue('progress', this.getProgressPercent(item.width, item.progressWidth), item, true);\n        break;\n\n      case 'LeftResizing':\n        if (this.segmentIndex === -1) {\n          left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n          projectStartDate = this.getDateByLeft(left);\n\n          if (isNullOrUndefined(item.endDate)) {\n            endDate = this.parent.dateValidationModule.getValidEndDate(item);\n            this.parent.setRecordValue('endDate', endDate, item, true);\n          }\n\n          startDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n          this.parent.setRecordValue('startDate', new Date(startDate.getTime()), item, true);\n\n          if (this.parent.dateValidationModule.compareDates(item.startDate, item.endDate) === 0 && isNullOrUndefined(item.isMilestone) && item.isMilestone === false && item.duration === 0) {\n            this.parent.setRecordValue('duration', 1, item, true);\n          }\n\n          if (item.isMilestone) {\n            this.parent.setRecordValue('endDate', new Date(startDate.getTime()), item, true);\n          }\n\n          this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n          this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        } else {\n          this.updateSplitLeftResize(item);\n        }\n\n        break;\n\n      case 'RightResizing':\n      case 'ParentResizing':\n        if (this.segmentIndex === -1) {\n          left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n          var tempEndDate = this.getDateByLeft(left);\n\n          if (isNullOrUndefined(item.startDate)) {\n            startDate = this.parent.dateValidationModule.getValidStartDate(item);\n            this.parent.setRecordValue('startDate', startDate, item, true);\n          }\n\n          var tempdate = isNullOrUndefined(item.startDate) ? startDate : item.startDate;\n          endDate = item.isMilestone ? tempdate : this.parent.dateValidationModule.checkEndDate(tempEndDate, this.taskBarEditRecord.ganttProperties);\n          this.parent.setRecordValue('endDate', new Date(endDate.getTime()), item, true);\n          this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n          this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        } else {\n          this.updateSplitRightResizing(item);\n        }\n\n        break;\n\n      case 'ParentDrag':\n      case 'ChildDrag':\n      case 'MilestoneDrag':\n      case 'ManualParentDrag':\n        if (this.segmentIndex === -1 || this.segmentIndex === 0) {\n          this.updateChildDrag(item);\n        } else {\n          this.setSplitTaskDrag(item);\n        }\n\n        break;\n    }\n  };\n\n  TaskbarEdit.prototype.updateChildDrag = function (item) {\n    var left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n    var projectStartDate = this.getDateByLeft(left);\n    var endDate;\n\n    if (this.segmentIndex === 0) {\n      this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n      item.segments[0].startDate = projectStartDate;\n      item.segments[0].endDate = this.parent.dataOperation.getEndDate(item.segments[0].startDate, item.segments[0].duration, item.durationUnit, item, false);\n      this.parent.setRecordValue('segments', item.segments, item, true);\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n      this.parent.chartRowsModule.incrementSegments(item.segments, 0, this.taskBarEditRecord);\n      this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n    } else {\n      if (!isNullOrUndefined(item.endDate) && isNullOrUndefined(item.startDate)) {\n        endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n        endDate = this.parent.dateValidationModule.checkEndDate(endDate, this.taskBarEditRecord.ganttProperties);\n        this.parent.setRecordValue('endDate', endDate, item, true);\n      } else {\n        this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n\n        if (!isNullOrUndefined(item.duration)) {\n          this.parent.dateValidationModule.calculateEndDate(this.taskBarEditRecord);\n        }\n      }\n    }\n  };\n\n  TaskbarEdit.prototype.updateSplitLeftResize = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.segmentIndex === 0 ? this.getRoundOffStartLeft(item, this.roundOffDuration) : this.getRoundOffStartLeft(segment, this.roundOffDuration);\n    var projectStartDate = this.segmentIndex === 0 ? this.getDateByLeft(left) : this.getDateByLeft(item.left + left);\n    var startDate = this.parent.dataOperation.checkStartDate(projectStartDate, item, false);\n    var duration = this.parent.dataOperation.getDuration(startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    segment.startDate = new Date(startDate.getTime());\n    segment.duration = duration;\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n\n    if (this.segmentIndex === 0) {\n      this.parent.setRecordValue('startDate', segment.startDate, item, true);\n    }\n\n    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n\n    if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n      var segmentOffsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      segment.offsetDuration = segmentOffsetDuration;\n    }\n\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n\n  TaskbarEdit.prototype.updateSplitRightResizing = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n    var tempEndDate = this.getDateByLeft(left);\n    var endDate = this.parent.dataOperation.checkEndDate(tempEndDate, item, false);\n    var duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    segment.endDate = new Date(endDate.getTime());\n    segment.duration = duration; // update next segment offset duration\n\n    if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n      var nextSegment = item.segments[this.segmentIndex + 1];\n      var segmentOffset = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n      segment.offsetDuration = segmentOffset;\n    }\n\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n    this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n  };\n\n  TaskbarEdit.prototype.sumOfDuration = function (segments) {\n    var duration = 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      duration += segment.duration;\n    }\n\n    return duration;\n  };\n\n  TaskbarEdit.prototype.setSplitTaskDrag = function (item) {\n    var segment = item.segments[this.segmentIndex];\n    var left = this.getRoundOffStartLeft(segment, this.roundOffDuration);\n    var projectStartDate = this.getDateByLeft(item.left + left);\n    projectStartDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n    segment.startDate = projectStartDate;\n    segment.endDate = this.parent.dataOperation.getEndDate(segment.startDate, segment.duration, item.durationUnit, item, false);\n    segment.duration = this.parent.dataOperation.getDuration(segment.startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n    this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n    this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n\n    if (!isNullOrUndefined(this.parent.taskFields.endDate)) {\n      this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'endDate');\n    } //set offset if previous record present\n\n\n    if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n      var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n\n      if (segment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n        offsetDuration = 1;\n      }\n\n      segment.offsetDuration = offsetDuration;\n    } //set next record  offset if present\n\n\n    if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n      var nextSegment = item.segments[this.segmentIndex + 1];\n      var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n\n      if (nextSegment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n        offsetDuration = 1;\n      }\n\n      nextSegment.offsetDuration = offsetDuration;\n    }\n\n    this.parent.setRecordValue('segments', item.segments, item, true);\n    this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n  };\n  /**\n   * To get roundoff enddate.\n   *\n   * @param {ITaskData} ganttRecord .\n   * @param {boolean} isRoundOff .\n   * @returns {number} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getRoundOffEndLeft = function (ganttRecord, isRoundOff) {\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier : this.parent.timelineModule.topTier;\n    var totalLeft = ganttRecord.width + ganttRecord.left;\n\n    if (this.segmentIndex !== -1) {\n      var segment = ganttRecord.segments[this.segmentIndex];\n      totalLeft = totalLeft - ganttRecord.width + segment.width + segment.left;\n    }\n\n    var remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Day') / (1000 * 60 * 60 * 24));\n    var remainingLeft = this.parent.perDayWidth - this.parent.perDayWidth / remainingContribution;\n    var positionValue = remainingLeft / this.parent.perDayWidth;\n\n    if (isRoundOff === undefined) {\n      isRoundOff = false;\n    }\n    /*Rounding the decimal value for week-month-year schedule mode*/\n\n\n    if (!isRoundOff) {\n      if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n        if (positionValue > 0.5) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n        } else if (positionValue < 0.5) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth / 2;\n        }\n      }\n    } else if (isRoundOff) {\n      if (tierMode === 'Hour') {\n        var inHour = this.parent.perDayWidth / 24;\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Hour') / (1000 * 60 * 60));\n        remainingLeft = this.parent.perDayWidth / 24 - this.parent.perDayWidth / 24 / remainingContribution;\n\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + inHour;\n        }\n      } else if (tierMode === 'Minutes') {\n        var inMinutes = this.parent.perDayWidth / (24 * 60);\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Minutes') / (1000 * 60));\n        remainingLeft = this.parent.perDayWidth / (24 * 60) - this.parent.perDayWidth / (24 * 60) / remainingContribution;\n\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + inMinutes;\n        }\n      } else {\n        if (remainingLeft !== 0) {\n          totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n        }\n      }\n    }\n\n    return totalLeft;\n  };\n  /**\n   * To get roundoff startdate.\n   *\n   * @param {ITaskData | ITaskSegment} ganttRecord .\n   * @param {boolean} isRoundOff .\n   * @returns {number} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getRoundOffStartLeft = function (ganttRecord, isRoundOff) {\n    var left = isNullOrUndefined(ganttRecord) ? ganttRecord.left : ganttRecord.left;\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier : this.parent.timelineModule.topTier;\n    var remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Day') / (1000 * 60 * 60 * 24));\n    var remainDays = this.parent.perDayWidth - this.parent.perDayWidth / remainingContribution;\n    var remainDaysInDecimal = remainDays / this.parent.perDayWidth;\n\n    if (isRoundOff === undefined) {\n      isRoundOff = false;\n    }\n    /*Rounding the decimal value for week-month-year schedule mode*/\n\n\n    if (!isRoundOff) {\n      if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n        if (remainDaysInDecimal <= 0.5) {\n          left = left - remainDays;\n        } else if (remainDaysInDecimal > 0.5) {\n          left = left - remainDays + this.parent.perDayWidth / 2;\n        }\n      }\n    } else if (isRoundOff) {\n      if (tierMode === 'Hour') {\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Hour') / (1000 * 60 * 60));\n        remainDays = this.parent.perDayWidth / 24 - this.parent.perDayWidth / 24 / remainingContribution;\n        left = left - remainDays;\n      } else if (tierMode === 'Minutes') {\n        remainingContribution = 1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Minutes') / (1000 * 60));\n        remainDays = this.parent.perDayWidth / (24 * 60) - this.parent.perDayWidth / (24 * 60) / remainingContribution;\n        left = left - remainDays;\n      } else {\n        left = left - remainDays;\n      }\n    }\n\n    return left;\n  };\n  /**\n   * To get date by left value.\n   *\n   * @param {number} left .\n   * @returns {Date} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getDateByLeft = function (left) {\n    var pStartDate = new Date(this.parent.timelineModule.timelineStartDate.toString());\n    var milliSecondsPerPixel = 24 * 60 * 60 * 1000 / this.parent.perDayWidth;\n    pStartDate.setTime(pStartDate.getTime() + left * milliSecondsPerPixel);\n    var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.topTier : this.parent.timelineModule.bottomTier;\n\n    if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n      if (this.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && !this.isInDst(pStartDate)) {\n        pStartDate.setTime(pStartDate.getTime() + 60 * 60 * 1000);\n      } else if (!this.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && this.isInDst(pStartDate)) {\n        pStartDate.setTime(pStartDate.getTime() - 60 * 60 * 1000);\n      }\n    }\n\n    return pStartDate;\n  };\n  /**\n   * To get timezone offset.\n   *\n   * @returns {number} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getDefaultTZOffset = function () {\n    var janMonth = new Date(new Date().getFullYear(), 0, 1);\n    var julMonth = new Date(new Date().getFullYear(), 6, 1); //Because there is no reagions DST inbetwwen this range\n\n    return Math.max(janMonth.getTimezoneOffset(), julMonth.getTimezoneOffset());\n  };\n  /**\n   * To check whether the date is in DST.\n   *\n   * @param {Date} date .\n   * @returns {boolean} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.isInDst = function (date) {\n    return date.getTimezoneOffset() < this.getDefaultTZOffset();\n  };\n  /**\n   * To set item position.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.setItemPosition = function () {\n    var item = this.taskBarEditRecord.ganttProperties;\n    var segment = !isNullOrUndefined(item.segments) ? item.segments[this.segmentIndex] : null;\n    var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ? this.parent.chartRowsModule.milestoneHeight : item.width;\n    var rightResizer = this.parent.isAdaptive ? width - 2 : width - 10;\n\n    if (!isNullOrUndefined(segment)) {\n      rightResizer = this.parent.isAdaptive ? segment.width - 2 : segment.width - 10;\n    }\n\n    var taskBarMainContainer = !this.taskBarEditElement.classList.contains(cls.taskBarMainContainer) ? closest(this.taskBarEditElement, 'tr.' + cls.chartRow).querySelector('.' + cls.taskBarMainContainer) : this.taskBarEditElement;\n    var segmentedTaskBarContainer = this.taskBarEditElement.classList.contains('e-segmented-taskbar');\n    var leftLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow).querySelector('.' + cls.leftLabelContainer);\n    var rightLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow).querySelector('.' + cls.rightLabelContainer);\n    var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceChildProgressBar);\n    var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceChildTaskBar);\n    var childProgressResizer = this.taskBarEditElement.querySelector('.' + cls.childProgressResizer);\n    var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + cls.taskBarRightResizer);\n    var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceParentTaskBar);\n    var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceParentProgressBar);\n    var traceConnectorPointRight = this.taskBarEditElement.querySelector('.' + cls.rightConnectorPointOuterDiv);\n    var manualParentTaskbar = this.taskBarEditElement;\n    var manualTaskbar = this.taskBarEditElement.querySelector('.' + cls.manualParentTaskBar);\n    var manualParentRight = this.taskBarEditElement.querySelector('.' + cls.manualParentRightResizer);\n    var manualParentLeft = this.taskBarEditElement.querySelector('.' + cls.manualParentLeftResizer);\n\n    if (this.taskBarEditAction !== 'ConnectorPointRightDrag' && this.taskBarEditAction !== 'ConnectorPointLeftDrag') {\n      if (this.taskBarEditAction !== 'ParentResizing' && this.taskBarEditAction !== 'ManualParentDrag') {\n        if (segmentedTaskBarContainer && !isNullOrUndefined(item.segments) && (this.taskBarEditAction === 'RightResizing' || this.segmentIndex !== 0)) {\n          this.taskBarEditElement.style.width = segment.width + 'px';\n          this.taskBarEditElement.style.left = segment.left + 'px';\n        }\n\n        taskBarMainContainer.style.width = width + 'px';\n        taskBarMainContainer.style.left = item.left + 'px';\n        leftLabelContainer.style.width = item.left + 'px';\n\n        if (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex === 0) {\n          var parent_1 = this.taskBarEditElement.parentElement;\n          var segmentedTasks = parent_1.getElementsByClassName('e-segmented-taskbar');\n\n          for (var i = 0; i < item.segments.length; i++) {\n            var segment_4 = item.segments[i];\n            var segmentElement = segmentedTasks[i];\n            segmentElement.style.width = segment_4.width + 'px';\n            segmentElement.style.left = segment_4.left + 'px';\n          }\n        }\n\n        if (!isNullOrUndefined(rightLabelContainer)) {\n          rightLabelContainer.style.left = item.left + width + 'px';\n        }\n      }\n\n      if (traceConnectorPointRight) {\n        traceConnectorPointRight.style.left = (this.parent.isAdaptive ? width + 10 : width + 2) + 'px';\n      }\n\n      if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {\n        taskBarMainContainer.style.left = item.left - width / 2 + 'px';\n        leftLabelContainer.style.width = item.left - width / 2 + 'px';\n\n        if (!isNullOrUndefined(rightLabelContainer)) {\n          rightLabelContainer.style.left = item.left + width / 2 + 'px';\n        }\n      } else if (this.taskBarEditAction === 'ProgressResizing') {\n        if (this.segmentIndex === -1) {\n          traceChildTaskBar.style.left = item.left + item.progressWidth - 10 + 'px';\n\n          if (!isNullOrUndefined(traceChildProgressBar)) {\n            traceChildProgressBar.style.width = item.progressWidth + 'px';\n            traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n            traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n            childProgressResizer.style.left = item.progressWidth - 8 + 'px';\n          }\n        } else {\n          this.updateSegmentProgress(this.taskBarEditRecord.ganttProperties);\n          traceChildProgressBar.style.width = item.segments[this.segmentIndex].progressWidth + 'px';\n          traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n          traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n          childProgressResizer.style.left = item.segments[this.segmentIndex].progressWidth - 8 + 'px';\n        }\n      } else if (this.taskBarEditAction === 'RightResizing' && !isNullOrUndefined(traceChildTaskBar)) {\n        traceChildTaskBar.style.width = width + 'px';\n\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          traceChildProgressBar.style.width = item.progressWidth + 'px';\n          taskBarRightResizer.style.left = rightResizer + 'px';\n\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.left = item.progressWidth - 10 + 'px';\n          }\n        }\n      } else if (this.taskBarEditAction === 'ParentDrag') {\n        if (!isNullOrUndefined(traceParentTaskBar)) {\n          traceParentTaskBar.style.width = width + 'px';\n        }\n\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          traceParentProgressBar.style.width = item.progressWidth + 'px';\n        }\n      } else if (this.taskBarEditAction === 'ParentResizing') {\n        manualParentTaskbar.style.width = manualTaskbar.style.width = item.width + 'px';\n        manualParentRight.style.left = item.width - manualParentLeft.offsetLeft + 'px';\n      } else if (this.taskBarEditAction === 'ManualParentDrag') {\n        manualParentTaskbar.style.left = item.left - item.autoLeft + 'px';\n      } else {\n        if (!isNullOrUndefined(traceChildTaskBar) && !segmentedTaskBarContainer) {\n          traceChildTaskBar.style.width = width + 'px';\n        }\n\n        if (!isNullOrUndefined(traceChildProgressBar)) {\n          taskBarRightResizer.style.left = rightResizer + 'px';\n          traceChildProgressBar.style.width = item.progressWidth + 'px';\n\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.left = item.progressWidth - 10 + 'px';\n          }\n        }\n\n        if (segmentedTaskBarContainer) {\n          taskBarRightResizer.style.left = rightResizer + 'px';\n          traceChildProgressBar.style.width = segment.progressWidth + 'px';\n\n          if (!isNullOrUndefined(childProgressResizer)) {\n            childProgressResizer.style.left = segment.progressWidth - 10 + 'px';\n          }\n        }\n      }\n    }\n  };\n  /**\n   * To handle mouse up event in chart\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.mouseUpHandler = function (e) {\n    var mouseDragged = this.isMouseDragged;\n    this.previousMouseMove = null;\n    this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n\n    if (this.taskBarEditAction && this.isMouseDragged) {\n      if (!this.dragMouseLeave && this.taskBarEditedAction) {\n        this.taskBarEditedAction(e);\n        this.isMouseDragged = false;\n      } else {\n        this.cancelTaskbarEditActionInMouseLeave();\n      }\n    }\n\n    if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar && !isNullOrUndefined(this.taskBarEditElement)) {\n      if (!isNullOrUndefined(this.taskBarEditElement.querySelector('.e-gantt-child-taskbar'))) {\n        if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar').classList.contains('e-collapsed-taskbar-drag')) {\n          removeClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n          this.taskBarEditElement.style.zIndex = this.prevZIndex;\n          this.prevZIndex = '';\n        }\n      }\n    }\n\n    if (!this.parent.isAdaptive || mouseDragged) {\n      this.initPublicProp();\n    }\n\n    this.stopScrollTimer();\n  };\n  /**\n   * To perform taskbar edit operation.\n   *\n   * @param {PointerEvent} event .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.taskBarEditedAction = function (event) {\n    var args = {};\n    var x1 = this.mouseDownX;\n    var y1 = this.mouseDownY;\n    var item = this.taskBarEditRecord;\n    var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n    var x2 = this.mouseMoveX;\n    var e = this.getCoordinate(event);\n    var resMouseY = e.pageY - this.parent.ganttChartModule.chartBodyContainer.offsetTop;\n\n    if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && !this.drawPredecessor) {\n      this.dependencyCancel = true;\n    }\n\n    if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') && this.drawPredecessor) {\n      this.parent.connectorLineEditModule.updatePredecessor(this.connectorSecondRecord, this.finalPredecessor);\n    } else {\n      if (x1 !== x2 || Math.abs(y1 - resMouseY) >= (this.parent.rowHeight - this.parent.taskbarHeight) / 2) {\n        if (item !== null) {\n          args.editingFields = item.ganttProperties;\n          args.data = item;\n          args.recordIndex = recordIndex;\n          args.previousData = this.previousItem;\n          args.taskBarEditAction = this.taskBarEditAction;\n          args.action = 'TaskbarEditing';\n          args.roundOffDuration = this.roundOffDuration;\n          args.target = this.targetElement;\n          this.taskbarEditedArgs = args;\n          this.taskbarEdited(args);\n        }\n      }\n    }\n  };\n  /**\n   * To cancel the taskbar edt action.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.cancelTaskbarEditActionInMouseLeave = function () {\n    this.parent.editModule.reUpdatePreviousRecords(true);\n  };\n\n  TaskbarEdit.prototype.updateSegmentProgress = function (taskData) {\n    var segments = taskData.segments;\n    var fixedWidth = true;\n    var totalTaskWidth = this.splitTasksDuration(segments) * this.parent.perDayWidth;\n    var totalProgressWidth = this.parent.dataOperation.getProgressWidth(totalTaskWidth, taskData.progress);\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      delete segment.progressWidth;\n\n      if (totalProgressWidth > 0 && totalProgressWidth > segment.width) {\n        totalProgressWidth = totalProgressWidth - segment.width;\n        segment.progressWidth = segment.width;\n        segment.showProgress = false;\n      } else if (fixedWidth) {\n        segment.progressWidth = totalProgressWidth;\n        segment.showProgress = true;\n        totalProgressWidth = totalProgressWidth - segment.width;\n        fixedWidth = false;\n      }\n    }\n  };\n  /**\n   * To trigger taskbar edited event.\n   *\n   * @param {ITaskbarEditedEventArgs} arg .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.taskbarEdited = function (arg) {\n    var args = extend({}, arg);\n    var ganttRecord = args.data;\n    var taskData = ganttRecord.ganttProperties;\n\n    if (args.taskBarEditAction === 'ProgressResizing') {\n      if (args.previousData.progress !== taskData.progress) {\n        this.parent.setRecordValue('progress', this.getProgressPercent(taskData.width, taskData.progressWidth), taskData, true);\n\n        if (ganttRecord.parentItem) {\n          this.parent.editModule.updateParentProgress(ganttRecord.parentItem);\n        }\n\n        if (!isNullOrUndefined(taskData.segments)) {\n          this.updateSegmentProgress(taskData);\n        }\n      }\n    } else {\n      var segments = args.data.ganttProperties.segments;\n\n      if (!isNullOrUndefined(segments) && segments.length > 0 && (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex !== 0 || this.taskBarEditAction === 'ChildDrag' && this.segmentIndex !== 0 || this.taskBarEditAction === 'RightResizing')) {\n        var segment = segments[this.segmentIndex];\n        var ganttProp = this.taskBarEditRecord.ganttProperties;\n        var previousSegment = this.segmentIndex === 0 ? null : segments[this.segmentIndex - 1];\n        var nextSegment = this.segmentIndex === segments.length - 1 ? null : segments[this.segmentIndex + 1];\n        var sDate = !isNullOrUndefined(nextSegment) ? new Date(nextSegment.startDate.getTime()) : this.parent.cloneProjectEndDate;\n        var eDate = !isNullOrUndefined(previousSegment) ? new Date(previousSegment.endDate.getTime()) : this.parent.cloneProjectStartDate;\n        sDate.setHours(0, 0, 0, 0);\n        eDate.setHours(0, 0, 0, 0);\n        var cStartDate = new Date(segment.startDate.getTime());\n        var cEndDate = new Date(segment.endDate.getTime());\n        cStartDate.setDate(cStartDate.getDate() - 1);\n        cEndDate.setDate(cEndDate.getDate() + 1);\n        cStartDate.setHours(0, 0, 0, 0);\n        cEndDate.setHours(0, 0, 0, 0);\n\n        if (cStartDate.getTime() <= eDate.getTime() && !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment)) {\n          var segmentIndexes = [{\n            'firstSegmentIndex': previousSegment.segmentIndex,\n            'secondSegmentIndex': segment.segmentIndex\n          }];\n          this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n        } else if (cEndDate.getTime() >= sDate.getTime() && this.segmentIndex !== segments.length - 1) {\n          var segmentIndexes = [{\n            'firstSegmentIndex': segment.segmentIndex,\n            'secondSegmentIndex': nextSegment.segmentIndex\n          }];\n          this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n        } else if (cEndDate.getTime() >= sDate.getTime()) {\n          segment.endDate.setDate(this.parent.cloneProjectEndDate.getDate() - 1);\n          segment.startDate = this.parent.dataOperation.getStartDate(segment.endDate, segment.duration, ganttProp.durationUnit, ganttProp); // eslint-disable-next-line\n\n          for (var i = segments.length - 2; i >= 0; i++) {\n            var segment_5 = segments[i];\n            var eDate_1 = segment_5.endDate;\n            eDate_1.setDate(eDate_1.getDate() - segment_5.offsetDuration);\n            segment_5.endDate = eDate_1;\n            segment_5.startDate = this.parent.dataOperation.getStartDate(segment_5.endDate, segment_5.duration, ganttProp.durationUnit, ganttProp);\n          }\n        }\n      }\n\n      this.parent.dataOperation.updateWidthLeft(args.data);\n    }\n\n    this.parent.dataOperation.updateTaskData(ganttRecord);\n    this.parent.editModule.initiateUpdateAction(args);\n  };\n  /**\n   * To get progress in percentage.\n   *\n   * @param {number} parentwidth .\n   * @param {number} progresswidth .\n   * @returns {number} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.getProgressPercent = function (parentwidth, progresswidth) {\n    return Math.ceil(progresswidth / parentwidth * 100);\n  };\n  /**\n   * false line implementation.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.drawFalseLine = function () {\n    var x1 = this.mouseDownX;\n    var y1 = this.mouseDownY;\n    var x2 = this.mouseMoveX;\n    var y2 = this.mouseMoveY;\n    var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n    var transform = 'rotate(' + angle + 'deg)';\n    var left;\n\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n      left = this.elementOffsetLeft - this.parent.chartRowsModule.connectorPointWidth / 2 - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n    }\n\n    if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      left = this.elementOffsetLeft + this.elementOffsetWidth + this.parent.chartRowsModule.connectorPointWidth / 2 - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n    }\n\n    var top = this.elementOffsetTop + this.elementOffsetHeight / 2 + this.parent.ganttChartModule.chartBodyContainer.offsetTop - this.parent.ganttChartModule.scrollObject.previousScroll.top;\n    this.removeFalseLine(false);\n    this.falseLine = createElement('div', {\n      className: cls.falseLine,\n      id: 'ganttfalseline' + this.parent.element.id,\n      styles: 'transform-origin: 0% 100%;right: auto;position: absolute;transform:' + transform + ';' + 'border-top-width: 1px;border-top-style: dashed;z-index: 5;width:' + (length - 3) + 'px;' + 'left:' + left + 'px;top:' + top + 'px;'\n    });\n    this.parent.ganttChartModule.chartBodyContainer.appendChild(this.falseLine);\n  };\n  /**\n   *\n   * @param {boolean} isRemoveConnectorPointDisplay .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.removeFalseLine = function (isRemoveConnectorPointDisplay) {\n    if (this.falseLine) {\n      remove(this.falseLine);\n      this.falseLine = null;\n\n      if (isRemoveConnectorPointDisplay) {\n        this.elementOffsetLeft = 0;\n        this.elementOffsetTop = 0;\n        this.elementOffsetWidth = 0;\n        this.elementOffsetHeight = 0;\n        removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n      }\n    }\n  };\n  /**\n   *\n   * @param {PointerEvent} e .\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.updateConnectorLineSecondProperties = function (e) {\n    var target = this.getElementByPosition(e);\n    var element = parentsUntil(target, cls.taskBarMainContainer);\n    this.connectorSecondAction = null;\n    var scrollTop = 0;\n\n    if (parentsUntil(target, cls.connectorPointLeft)) {\n      this.connectorSecondAction = 'ConnectorPointLeftDrag';\n      this.toPredecessorText = 'Start';\n    } else if (parentsUntil(target, cls.connectorPointRight)) {\n      this.connectorSecondAction = 'ConnectorPointRightDrag';\n      this.toPredecessorText = 'Finish';\n    } else {\n      this.connectorSecondAction = null;\n      this.toPredecessorText = null;\n    }\n\n    if (this.taskBarEditElement !== element && this.taskBarEditElement !== this.highlightedSecondElement) {\n      if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n        var top_1 = this.parent.virtualScrollModule.getTopPosition();\n        scrollTop = top_1;\n      }\n\n      if (this.parent.virtualScrollModule && this.parent.enableVirtualization && !this.elementOffsetLeft || !this.parent.enableVirtualization) {\n        this.elementOffsetLeft = this.taskBarEditElement.offsetLeft;\n        this.elementOffsetTop = this.taskBarEditElement.offsetTop + scrollTop;\n        this.elementOffsetWidth = this.taskBarEditElement.offsetWidth;\n        this.elementOffsetHeight = this.taskBarEditElement.offsetHeight;\n      }\n\n      this.showHideTaskBarEditingElements(element, this.highlightedSecondElement, true);\n    }\n\n    if (isNullOrUndefined(this.connectorSecondAction) && !isNullOrUndefined(this.connectorSecondElement)) {\n      this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n      removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointAllowBlock]);\n      removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointAllowBlock]);\n    }\n\n    this.connectorSecondElement = this.connectorSecondAction ? element : null;\n    this.highlightedSecondElement = element;\n    this.connectorSecondRecord = isNullOrUndefined(this.connectorSecondElement) ? null : this.parent.ganttChartModule.getRecordByTaskBar(this.connectorSecondElement);\n  }; // eslint-disable-next-line\n\n\n  TaskbarEdit.prototype.triggerDependencyEvent = function (e, mouseUp) {\n    var fromItem = this.taskBarEditRecord.ganttProperties;\n    var toItem = this.connectorSecondRecord ? this.connectorSecondRecord.ganttProperties : null;\n    var predecessor;\n    var currentTarget;\n    var target = this.getElementByPosition(e);\n    var element = target;\n    var uniqueId = this.parent.viewType === 'ResourceView' ? fromItem.taskId : fromItem.rowUniqueID;\n\n    if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n      predecessor = uniqueId + 'S';\n    } else if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n      predecessor = uniqueId + 'F';\n    }\n\n    if (this.connectorSecondAction) {\n      if (this.connectorSecondAction === 'ConnectorPointLeftDrag') {\n        predecessor += 'S';\n        currentTarget = 'start';\n      } else if (this.connectorSecondAction === 'ConnectorPointRightDrag') {\n        predecessor += 'F';\n        currentTarget = 'finish';\n      }\n    }\n\n    if (isNullOrUndefined(toItem)) {\n      this.drawPredecessor = false;\n      return;\n    }\n\n    if (toItem.predecessorsName) {\n      this.finalPredecessor = toItem.predecessorsName + ',' + predecessor;\n    } else {\n      this.finalPredecessor = predecessor;\n    }\n\n    var isValidLink = this.parent.connectorLineEditModule.validatePredecessorRelation(this.connectorSecondRecord, this.finalPredecessor); // eslint-disable-next-line\n\n    var predecessorArray = this.parent.predecessorModule.calculatePredecessor(predecessor, this.connectorSecondRecord);\n    var args = {};\n    args.fromItem = fromItem;\n    args.toItem = toItem;\n    args.newPredecessorString = this.finalPredecessor;\n    args.predecessor = predecessorArray && predecessorArray[0];\n    args.isValidLink = isValidLink;\n    args.requestType = 'ValidateDependency';\n    this.parent.trigger('actionBegin', args);\n    args.isValidLink = !isValidLink && args.isValidLink ? false : args.isValidLink;\n\n    if (args.isValidLink) {\n      if (!this.editTooltip.toolTipObj && !this.parent.isAdaptive) {\n        this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n      }\n\n      if (this.editTooltip.toolTipObj) {\n        this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n        var table = this.parent.connectorLineModule.tooltipTable.querySelector('#toPredecessor').querySelectorAll('td');\n        table[1].innerText = toItem.taskName;\n        table[2].innerText = this.parent.localeObj.getConstant(currentTarget);\n        var tooltipElement = this.parent.connectorLineModule.tooltipTable.parentElement.parentElement;\n\n        if (tooltipElement.offsetTop + tooltipElement.offsetHeight > e.pageY) {\n          tooltipElement.style.top = e.pageY - tooltipElement.offsetHeight - 20 + 'px';\n        }\n      }\n\n      this.drawPredecessor = true;\n    } else {\n      if (this.parent.isAdaptive) {\n        if (target.classList.contains(cls.connectorPointLeft) || target.classList.contains(cls.connectorPointRight)) {\n          this.showHideActivePredecessors(true);\n        }\n      } else {\n        addClass([element], [cls.connectorPointAllowBlock]);\n      }\n\n      this.drawPredecessor = false;\n    }\n  }; // Get XY coordinates for touch and non-touch device\n\n\n  TaskbarEdit.prototype.getCoordinate = function (event) {\n    var coordinates = {};\n\n    if (this.parent.isAdaptive && event && event.type !== 'click') {\n      var e = event;\n\n      if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n        coordinates.pageX = e.changedTouches[0].pageX;\n        coordinates.pageY = e.changedTouches[0].pageY;\n      }\n    } else if (event) {\n      var e = event;\n      coordinates.pageX = e.pageX;\n      coordinates.pageY = e.pageY;\n    }\n\n    return coordinates;\n  }; // Get current target element by mouse position\n  // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone\n\n\n  TaskbarEdit.prototype.getElementByPosition = function (event) {\n    if (!this.parent.isAdaptive) {\n      return event.target;\n    } else {\n      var e = this.getCoordinate(event);\n      return document.elementFromPoint(e.pageX - window.pageXOffset, e.pageY - window.pageYOffset);\n    }\n  };\n\n  TaskbarEdit.prototype.multipleSelectionEnabled = function () {\n    if (this.parent.selectionModule && this.parent.selectionSettings.mode !== 'Cell' && this.parent.selectionSettings.type === 'Multiple') {\n      this.parent.selectionModule.hidePopUp();\n    }\n  };\n\n  TaskbarEdit.prototype.unWireEvents = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('chartMouseDown', this.mouseDownHandler);\n    this.parent.off('chartMouseUp', this.mouseUpHandler);\n    this.parent.off('chartMouseLeave', this.mouseLeaveHandler);\n    this.parent.off('chartMouseMove', this.mouseMoveAction);\n    this.parent.off('chartMouseClick', this.mouseClickHandler);\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  TaskbarEdit.prototype.destroy = function () {\n    this.unWireEvents();\n    this.stopScrollTimer();\n    this.parent.editModule.taskbarEditModule = undefined;\n  };\n\n  return TaskbarEdit;\n}(DateProcessor);\n\nexport { TaskbarEdit };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","isNullOrUndefined","createElement","extend","addClass","remove","removeClass","closest","merge","parentsUntil","DateProcessor","cls","EditTooltip","TaskbarEdit","_super","ganttObj","_this","isMouseDragged","dependencyCancel","editElement","elementOffsetLeft","elementOffsetTop","elementOffsetWidth","elementOffsetHeight","segmentIndex","parent","initPublicProp","wireEvents","editTooltip","on","mouseDownHandler","mouseUpHandler","mouseLeaveHandler","mouseMoveAction","mouseClickHandler","taskBarEditElement","taskBarEditRecord","taskBarEditAction","connectorSecondElement","connectorSecondRecord","connectorSecondAction","highlightedSecondElement","fromPredecessorText","toPredecessorText","finalPredecessor","drawPredecessor","roundOffDuration","dragMouseLeave","previousItemProperty","tapPointOnFocus","touchEdit","e","editSettings","allowTaskbarEditing","readOnly","canDrag","isAdaptive","targetElement","getElementByPosition","element","taskBarMainContainer","innerHTML","classList","contains","connectorPointLeft","connectorPointRight","updateTaskBarEditElement","preventDefault","selectionModule","enableSelectMultiTouch","ganttChartModule","getRecordByTaskBar","validateConnectorPoint","taskBarEditingAction","showHideActivePredecessors","connectorPointLeftHover","connectorPointRightHover","multipleSelectionEnabled","showHideTaskBarEditingElements","show","ganttProp","ganttProperties","predecessors","predecessor","id","viewType","taskId","rowUniqueID","toString","from","to","applyActiveColor","chartContent","chartBodyContainer","activeChildTask","touchMode","toolbarModule","refreshToolbarItems","enable","ganttRecord","connectorLineModule","getRecordByID","$tr","getChartRows","currentViewData","indexOf","$taskbar","querySelector","$connectorElement","activeConnectedTask","parentRecord","childRecord","isValid","parentId","childId","hasChildRecords","connectorLineEditModule","predecessorIndex","renderPredecessorDeleteConfirmDialog","target","manualParentRightResizer","manualParentMainContainer","manualParentTaskBar","manualParentMilestoneTop","manualParentMilestoneBottom","manualParentMilestone","currentRecord","segments","childTaskBarInnerDiv","index","getAttribute","Number","type","getTaskBarAction","taskFields","dependency","updateMouseDownProperties","level","enableMultiTaskbar","getTaskByUniqueID","parentItem","uniqueID","expanded","prevZIndex","style","zIndex","secondElement","fadeConnectorLine","isShowProgressResizer","progress","isShowConnectorPoints","record","getParentTask","taskBarLeftResizer","leftResizeGripper","taskBarRightResizer","rightResizeGripper","progresElement","childProgressResizer","progressResizeGripper","activeParentTask","scrollElement","querySelectorAll","connectorLineContainer","connectorLineZIndex","parentElement","connectorElement","mouseDownElement","data","action","taskMode","isMilestone","event","getCoordinate","pageX","pageY","containerPosition","getOffsetRect","mouseDownX","left","scrollObject","previousScroll","tooltipPositionX","mouseDownY","top","tooltipTable","getConnectorLineTooltipInnerTd","taskName","isMouseDragCheck","mouseMoveX","mouseMoveY","initiateEditAction","item","previousItem","timelineModule","extendFunction","showHideTaskbarEditTooltip","setAttribute","args","cancel","requestType","trigger","arg","isMouseClick","recordIndex","getIndexByTaskBar","editingFields","previousData","updateMouseMoveProperties","performProgressResize","enableLeftResizing","enableRightResizing","enableDragging","updateConnectorLineSecondProperties","triggerDependencyEvent","drawFalseLine","setItemPosition","updateEditedItem","updateTooltip","taskBarEditedAction","isConnectorLineEdit","width","mouseX","mouseY","offsetWidth","timerCount","startScrollTimer","offsetHeight","stopScrollTimer","direction","scrollTimer","window","setInterval","totalTimelineWidth","setScrollTop","setScrollLeft","clearInterval","differenceWidth","map","segment","previousMouseMove","previousSegment","nextSegment","setRecordValue","dataOperation","updateMappingData","diffrenceWidth","widthValue","progressWidth","diff","progressBorderRadius","enableSplitTaskLeftResize","updateEditPosition","difference","segment_1","perDayWidth","segment_2","singleDayDifference","segment_3","updateIsMilestone","getProgressWidth","projectStartDate","endDate","startDate","getProgressPercent","getRoundOffStartLeft","getDateByLeft","dateValidationModule","getValidEndDate","checkStartDate","Date","getTime","compareDates","duration","calculateDuration","editModule","updateResourceRelatedFields","updateSplitLeftResize","getRoundOffEndLeft","tempEndDate","getValidStartDate","tempdate","checkEndDate","updateSplitRightResizing","updateChildDrag","setSplitTaskDrag","getEndDate","durationUnit","chartRowsModule","incrementSegments","calculateEndDate","getDuration","isAutoSchedule","sumOfDuration","segmentOffsetDuration","offsetDuration","segmentOffset","getDay","includeWeekend","isRoundOff","tierMode","bottomTier","topTier","totalLeft","remainingContribution","getIncrement","remainingLeft","positionValue","undefined","inHour","inMinutes","remainDays","remainDaysInDecimal","pStartDate","timelineStartDate","milliSecondsPerPixel","setTime","isInDst","getDefaultTZOffset","janMonth","getFullYear","julMonth","Math","max","getTimezoneOffset","date","milestoneHeight","rightResizer","chartRow","segmentedTaskBarContainer","leftLabelContainer","rightLabelContainer","traceChildProgressBar","traceChildTaskBar","traceParentTaskBar","traceParentProgressBar","traceConnectorPointRight","rightConnectorPointOuterDiv","manualParentTaskbar","manualTaskbar","manualParentRight","manualParentLeft","manualParentLeftResizer","parent_1","segmentedTasks","getElementsByClassName","segment_4","segmentElement","borderBottomRightRadius","borderTopRightRadius","updateSegmentProgress","offsetLeft","autoLeft","mouseDragged","cancelTaskbarEditActionInMouseLeave","x1","y1","x2","resMouseY","offsetTop","updatePredecessor","abs","rowHeight","taskbarHeight","taskbarEditedArgs","taskbarEdited","reUpdatePreviousRecords","taskData","fixedWidth","totalTaskWidth","splitTasksDuration","totalProgressWidth","showProgress","updateParentProgress","sDate","cloneProjectEndDate","eDate","cloneProjectStartDate","setHours","cStartDate","cEndDate","setDate","getDate","segmentIndexes","mergeTask","getStartDate","segment_5","eDate_1","updateWidthLeft","updateTaskData","initiateUpdateAction","parentwidth","progresswidth","ceil","y2","sqrt","angle","atan2","PI","transform","connectorPointWidth","removeFalseLine","falseLine","className","styles","appendChild","isRemoveConnectorPointDisplay","scrollTop","virtualScrollModule","enableVirtualization","top_1","getTopPosition","connectorPointAllowBlock","mouseUp","fromItem","toItem","currentTarget","uniqueId","predecessorsName","isValidLink","validatePredecessorRelation","predecessorArray","predecessorModule","calculatePredecessor","newPredecessorString","toolTipObj","taskbarEditModule","table","innerText","localeObj","getConstant","tooltipElement","coordinates","changedTouches","document","elementFromPoint","pageXOffset","pageYOffset","selectionSettings","mode","hidePopUp","unWireEvents","isDestroyed","off","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isNullOrUndefined, createElement, extend, addClass, remove, removeClass, closest, merge } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/utils';\nimport { DateProcessor } from '../base/date-processor';\nimport * as cls from '../base/css-constants';\nimport { EditTooltip } from '../renderer/edit-tooltip';\n/**\n * File for handling taskbar editing operation in Gantt.\n */\nvar TaskbarEdit = /** @class */ (function (_super) {\n    __extends(TaskbarEdit, _super);\n    function TaskbarEdit(ganttObj) {\n        var _this = _super.call(this, ganttObj) || this;\n        _this.isMouseDragged = false;\n        _this.dependencyCancel = false;\n        _this.editElement = null;\n        _this.elementOffsetLeft = 0;\n        _this.elementOffsetTop = 0;\n        _this.elementOffsetWidth = 0;\n        _this.elementOffsetHeight = 0;\n        _this.segmentIndex = -1;\n        _this.parent = ganttObj;\n        _this.initPublicProp();\n        _this.wireEvents();\n        _this.editTooltip = new EditTooltip(_this.parent, _this);\n        return _this;\n    }\n    TaskbarEdit.prototype.wireEvents = function () {\n        this.parent.on('chartMouseDown', this.mouseDownHandler, this);\n        this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n        this.parent.on('chartMouseLeave', this.mouseLeaveHandler, this);\n        this.parent.on('chartMouseMove', this.mouseMoveAction, this);\n        this.parent.on('chartMouseClick', this.mouseClickHandler, this);\n    };\n    /**\n     * To initialize the public property.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.initPublicProp = function () {\n        this.taskBarEditElement = null;\n        this.taskBarEditRecord = null;\n        this.taskBarEditAction = null;\n        this.connectorSecondElement = null;\n        this.connectorSecondRecord = null;\n        this.connectorSecondAction = null;\n        this.highlightedSecondElement = null;\n        this.fromPredecessorText = null;\n        this.toPredecessorText = null;\n        this.finalPredecessor = null;\n        this.drawPredecessor = false;\n        this.roundOffDuration = true;\n        this.dragMouseLeave = false;\n        this.isMouseDragged = false;\n        this.previousItemProperty = ['left', 'progress', 'duration', 'isMilestone', 'startDate', 'endDate', 'width', 'progressWidth',\n            'autoLeft', 'autoDuration', 'autoStartDate', 'autoEndDate', 'autoWidth', 'segments'];\n        this.tapPointOnFocus = false;\n        this.touchEdit = false;\n    };\n    TaskbarEdit.prototype.mouseDownHandler = function (e) {\n        if (this.parent.editSettings.allowTaskbarEditing && !this.parent.readOnly) {\n            this.canDrag = false;\n            if (this.parent.isAdaptive && this.taskBarEditElement) {\n                var targetElement = this.getElementByPosition(e);\n                var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n                if (element && element.innerHTML === this.taskBarEditElement.innerHTML &&\n                    !(targetElement.classList.contains(cls.connectorPointLeft) ||\n                        targetElement.classList.contains(cls.connectorPointRight)) &&\n                    !this.tapPointOnFocus) {\n                    this.updateTaskBarEditElement(e);\n                    this.canDrag = true;\n                    e.preventDefault();\n                }\n            }\n            else if (!this.parent.isAdaptive) {\n                this.updateTaskBarEditElement(e);\n            }\n        }\n    };\n    TaskbarEdit.prototype.mouseClickHandler = function (e) {\n        var targetElement = this.getElementByPosition(e);\n        var element = parentsUntil(targetElement, cls.taskBarMainContainer);\n        if (this.parent.selectionModule && this.parent.selectionModule.enableSelectMultiTouch) {\n            if (this.tapPointOnFocus) {\n                this.updateTaskBarEditElement(e);\n            }\n            return;\n        }\n        if (this.tapPointOnFocus && element && element.innerHTML !== this.taskBarEditElement.innerHTML) {\n            this.connectorSecondRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.connectorSecondElement = element;\n            this.fromPredecessorText = 'Finish';\n            if (this.validateConnectorPoint()) {\n                this.taskBarEditingAction(e, true);\n            }\n            this.showHideActivePredecessors(false);\n            this.initPublicProp();\n        }\n        else if (targetElement.classList.contains(cls.connectorPointLeftHover) ||\n            targetElement.classList.contains(cls.connectorPointRightHover)) {\n            this.canDrag = false;\n            this.multipleSelectionEnabled();\n            this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n            this.tapPointOnFocus = true;\n            this.taskBarEditAction = 'ConnectorPointRightDrag';\n            this.connectorSecondRecord = this.taskBarEditRecord;\n            this.taskBarEditingAction(e, false);\n        }\n        else {\n            if (this.tapPointOnFocus) {\n                this.showHideActivePredecessors(false);\n                this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n            }\n            this.updateTaskBarEditElement(e);\n        }\n    };\n    TaskbarEdit.prototype.showHideActivePredecessors = function (show) {\n        var ganttProp = this.taskBarEditRecord.ganttProperties;\n        var predecessors = ganttProp.predecessor;\n        var id = this.parent.viewType === 'ResourceView' ? ganttProp.taskId : ganttProp.rowUniqueID;\n        if (predecessors) {\n            for (var i = 0; i < predecessors.length; i++) {\n                var predecessor = predecessors[i];\n                if (id.toString() === predecessor.from || id.toString() === predecessor.to) {\n                    this.applyActiveColor(predecessor.from, predecessor.to, show);\n                }\n            }\n        }\n        var chartContent = this.parent.ganttChartModule.chartBodyContainer;\n        if (show) {\n            addClass([this.taskBarEditElement], [cls.activeChildTask]);\n            addClass([chartContent], [cls.touchMode]);\n        }\n        else {\n            removeClass([this.taskBarEditElement], [cls.activeChildTask]);\n            removeClass([chartContent], [cls.touchMode]);\n        }\n        this.touchEdit = show;\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    TaskbarEdit.prototype.applyActiveColor = function (from, to, enable) {\n        var taskId = this.parent.viewType === 'ProjectView' ? this.taskBarEditRecord.ganttProperties.taskId.toString() :\n            this.taskBarEditRecord.ganttProperties.rowUniqueID.toString();\n        var ganttRecord = (taskId === from) ? this.parent.connectorLineModule.getRecordByID(to) :\n            this.parent.connectorLineModule.getRecordByID(from);\n        var $tr = this.parent.ganttChartModule.getChartRows()[this.parent.currentViewData.indexOf(ganttRecord)];\n        if (!isNullOrUndefined($tr)) {\n            var $taskbar = $tr.querySelector('.' + cls.taskBarMainContainer);\n            var $connectorElement = this.parent.element.querySelector('#ConnectorLineparent' + from + 'child' + to);\n            if (enable) {\n                addClass([$taskbar], [cls.activeConnectedTask]);\n                if ($connectorElement) {\n                    addClass([$connectorElement], [cls.activeConnectedTask]);\n                }\n            }\n            else {\n                removeClass([$taskbar], [cls.activeConnectedTask]);\n                if ($connectorElement) {\n                    removeClass([$connectorElement], [cls.activeConnectedTask]);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.validateConnectorPoint = function () {\n        var parentRecord = this.taskBarEditRecord.ganttProperties;\n        var childRecord = this.connectorSecondRecord.ganttProperties;\n        var isValid = true;\n        var parentId = this.parent.viewType === 'ResourceView' ? parentRecord.taskId : parentRecord.rowUniqueID;\n        var childId = this.parent.viewType === 'ResourceView' ? childRecord.taskId : childRecord.rowUniqueID;\n        if (this.connectorSecondRecord.hasChildRecords) {\n            isValid = false;\n        }\n        else if (childRecord.predecessor) {\n            for (var i = 0; i < childRecord.predecessor.length; i++) {\n                var predecessor = childRecord.predecessor[i];\n                if (predecessor.from === parentId.toString() &&\n                    predecessor.to === childId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.connectorSecondRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n                else if (predecessor.from === childId.toString() &&\n                    predecessor.to === parentId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.taskBarEditRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n            }\n        }\n        return isValid;\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.mouseLeaveHandler = function (e) {\n        this.dragMouseLeave = true;\n    };\n    /**\n     * To update taskbar edited elements on mouse down action.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {\n        var target = this.getElementByPosition(e);\n        var element;\n        if (target.classList.contains(cls.manualParentRightResizer) || target.classList.contains(cls.manualParentMainContainer)\n            || target.classList.contains(cls.manualParentTaskBar)) {\n            element = parentsUntil(target, cls.manualParentMainContainer);\n        }\n        else if (target.classList.contains(cls.manualParentMilestoneTop) || target.classList.contains(cls.manualParentMilestoneBottom)\n            || target.classList.contains(cls.manualParentMilestone)) {\n            element = parentsUntil(target, cls.manualParentMilestone);\n        }\n        else {\n            element = parentsUntil(target, cls.taskBarMainContainer);\n            if (!isNullOrUndefined(element) && !target.classList.contains('e-connectorpoint-left') &&\n                !target.classList.contains('e-connectorpoint-right')) {\n                var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (!isNullOrUndefined(currentRecord.ganttProperties.segments) && currentRecord.ganttProperties.segments.length > 0) {\n                    element = parentsUntil(target, cls.childTaskBarInnerDiv);\n                }\n            }\n        }\n        if (this.parent.editSettings.allowTaskbarEditing && element) {\n            this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n            this.editElement = element;\n            this.taskBarEditElement = element;\n            var index = this.taskBarEditElement.getAttribute('data-segment-index');\n            if (!isNullOrUndefined(index)) {\n                this.segmentIndex = Number(index);\n            }\n            else {\n                this.segmentIndex = -1;\n            }\n            this.taskBarEditRecord = this.parent.ganttChartModule.getRecordByTaskBar(this.taskBarEditElement);\n            if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {\n                this.roundOffDuration = true;\n                this.taskBarEditAction = this.getTaskBarAction(e);\n                if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') &&\n                    isNullOrUndefined(this.parent.taskFields.dependency)) {\n                    this.taskBarEditAction = null;\n                }\n                this.updateMouseDownProperties(e);\n                if (this.parent.viewType === 'ResourceView') {\n                    if (this.taskBarEditRecord.level === 0) {\n                        return;\n                    }\n                    else if (this.parent.enableMultiTaskbar) {\n                        var parentRecord = this.parent.getTaskByUniqueID(this.taskBarEditRecord.parentItem.uniqueID);\n                        if (!isNullOrUndefined(parentRecord) && !parentRecord.expanded) {\n                            this.prevZIndex = (this.taskBarEditElement).style.zIndex;\n                            (this.taskBarEditElement).style.zIndex = '1000';\n                            addClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (this.taskBarEditElement) {\n                    this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n                }\n                this.initPublicProp();\n            }\n            else {\n                this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n            }\n        }\n    };\n    /**\n     * To show/hide taskbar editing elements.\n     *\n     * @param {Element} element .\n     * @param {Element} secondElement .\n     * @param {boolean} fadeConnectorLine .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.showHideTaskBarEditingElements = function (element, secondElement, fadeConnectorLine) {\n        secondElement = secondElement ? secondElement : this.editElement;\n        var isShowProgressResizer = this.parent.taskFields.progress ? true : false;\n        var isShowConnectorPoints = true;\n        if (this.parent.readOnly) {\n            return;\n        }\n        if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar && element) {\n            var record = this.parent.ganttChartModule.getRecordByTaskBar(element);\n            var parentRecord = this.parent.getParentTask(record.parentItem);\n            if (!isNullOrUndefined(parentRecord)) {\n                if (!parentRecord.expanded) {\n                    isShowProgressResizer = false;\n                    isShowConnectorPoints = false;\n                }\n            }\n        }\n        if (element) {\n            if (element.querySelector('.' + cls.taskBarLeftResizer)) {\n                addClass([element.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n                addClass([element.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n                if (isShowProgressResizer) {\n                    var progresElement = !isNullOrUndefined(element.querySelector('.' + cls.childProgressResizer)) ? true : false;\n                    if (progresElement) {\n                        addClass([element.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n                    }\n                }\n            }\n            else if (this.parent.isAdaptive && isShowProgressResizer) {\n                var record = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (record.hasChildRecords) {\n                    addClass([element], [cls.activeParentTask]);\n                }\n            }\n            if (isShowProgressResizer) {\n                addClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n            }\n            if (!isNullOrUndefined(this.parent.taskFields.dependency)\n                && (element.querySelector('.' + cls.connectorPointLeft)\n                    || element.parentElement.querySelector('.' + cls.connectorPointLeft))\n                && isShowConnectorPoints) {\n                var connectorElement = !isNullOrUndefined(element.querySelector('.' + cls.connectorPointLeft)) ?\n                    element : element.parentElement;\n                addClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n                addClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n            }\n        }\n        else if (!fadeConnectorLine) {\n            removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n        }\n        if (secondElement && element !== secondElement) {\n            if (secondElement.querySelector('.' + cls.taskBarLeftResizer)) {\n                removeClass([secondElement.querySelector('.' + cls.taskBarLeftResizer)], [cls.leftResizeGripper]);\n                removeClass([secondElement.querySelector('.' + cls.taskBarRightResizer)], [cls.rightResizeGripper]);\n                if (secondElement.querySelector('.' + cls.childProgressResizer)) {\n                    removeClass([secondElement.querySelector('.' + cls.childProgressResizer)], [cls.progressResizeGripper]);\n                }\n            }\n            if (!isNullOrUndefined(this.parent.taskFields.dependency)\n                && (secondElement.querySelector('.' + cls.connectorPointLeft)\n                    || secondElement.parentElement.querySelector('.' + cls.connectorPointLeft))) {\n                var connectorElement = !isNullOrUndefined(secondElement.querySelector('.' + cls.connectorPointLeft)) ?\n                    secondElement : secondElement.parentElement;\n                removeClass([connectorElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointLeftHover]);\n                removeClass([connectorElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointRightHover]);\n            }\n            else if (this.parent.isAdaptive) {\n                var record = this.parent.ganttChartModule.getRecordByTaskBar(secondElement);\n                if (record && record.hasChildRecords) {\n                    removeClass([secondElement], [cls.activeParentTask]);\n                }\n            }\n            this.editElement = null;\n        }\n    };\n    /**\n     * To get taskbar edit actions.\n     *\n     * @param {PointerEvent} e .\n     * @returns {string} .\n     * @private\n     */\n    TaskbarEdit.prototype.getTaskBarAction = function (e) {\n        var mouseDownElement = this.getElementByPosition(e);\n        var data = this.taskBarEditRecord;\n        var action = '';\n        if (mouseDownElement.classList.contains(cls.taskBarLeftResizer)) {\n            action = 'LeftResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.taskBarRightResizer)) {\n            action = 'RightResizing';\n        }\n        else if ((mouseDownElement.classList.contains(cls.childProgressResizer) ||\n            closest(mouseDownElement, '.' + cls.childProgressResizer)) && (this.parent.taskFields.progress)) {\n            action = 'ProgressResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.connectorPointLeft)) {\n            action = 'ConnectorPointLeftDrag';\n        }\n        else if (mouseDownElement.classList.contains(cls.connectorPointRight)) {\n            action = 'ConnectorPointRightDrag';\n        }\n        else if (mouseDownElement.classList.contains(cls.manualParentRightResizer)) {\n            action = 'ParentResizing';\n        }\n        else if (mouseDownElement.classList.contains(cls.manualParentTaskBar) ||\n            mouseDownElement.classList.contains(cls.manualParentMainContainer) ||\n            mouseDownElement.classList.contains(cls.manualParentMilestone) ||\n            mouseDownElement.classList.contains(cls.manualParentMilestoneTop) ||\n            mouseDownElement.classList.contains(cls.manualParentMilestoneBottom) ||\n            mouseDownElement.classList.contains(cls.manualParentMilestone)) {\n            action = 'ManualParentDrag';\n        }\n        else if (data) {\n            action = data.hasChildRecords ? this.parent.taskMode === 'Auto' ? 'ParentDrag' : ''\n                : data.ganttProperties.isMilestone ? 'MilestoneDrag' : 'ChildDrag';\n        }\n        return action;\n    };\n    /**\n     * To update property while perform mouse down.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseDownProperties = function (event) {\n        var e = this.getCoordinate(event);\n        if (e.pageX || e.pageY) {\n            var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n            this.mouseDownX = (e.pageX - containerPosition.left) +\n                this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            this.tooltipPositionX = this.mouseDownX;\n            this.mouseDownY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            this.fromPredecessorText = this.taskBarEditAction === 'ConnectorPointLeftDrag' ? 'start' : 'finish';\n            this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.taskBarEditRecord.ganttProperties.taskName, this.fromPredecessorText, '', '');\n        }\n    };\n    TaskbarEdit.prototype.isMouseDragCheck = function () {\n        if (!this.isMouseDragged && this.taskBarEditAction && ((this.mouseDownX !== this.mouseMoveX) &&\n            ((this.mouseDownX + 3) < this.mouseMoveX || (this.mouseDownX - 3) > this.mouseMoveX)\n            || (this.mouseDownY !== this.mouseMoveY) &&\n                ((this.mouseDownY + 3) < this.mouseMoveY || (this.mouseDownY - 3) > this.mouseMoveY))) {\n            this.isMouseDragged = true;\n            this.parent.initiateEditAction(true);\n            var item = this.taskBarEditRecord.ganttProperties;\n            this.previousItem = this.parent.timelineModule.extendFunction(item, this.previousItemProperty);\n            if (this.taskBarEditAction !== 'ConnectorPointLeftDrag' &&\n                this.taskBarEditAction !== 'ConnectorPointRightDrag') {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            this.taskBarEditElement.setAttribute('aria-grabbed', 'true');\n        }\n    };\n    /**\n     * To handle mouse move action in chart\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseMoveAction = function (event) {\n        var _this = this;\n        if (this.parent.isAdaptive) {\n            if (!this.canDrag) {\n                return;\n            }\n            else {\n                this.multipleSelectionEnabled();\n            }\n        }\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        this.mouseMoveX = e.pageX - containerPosition.left +\n            this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        this.mouseMoveY = e.pageY - containerPosition.top +\n            this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.dragMouseLeave = false;\n        this.isMouseDragCheck();\n        if (this.isMouseDragged && this.taskBarEditAction) {\n            var args = {\n                cancel: false,\n                requestType: 'mergeSegment'\n            };\n            this.parent.trigger('actionBegin', args, function (arg) {\n                if (arg.cancel === false) {\n                    _this.taskBarEditingAction(event, false);\n                }\n            });\n        }\n        else if (!this.parent.isAdaptive && !this.taskBarEditAction) {\n            this.updateTaskBarEditElement(event);\n        }\n    };\n    /**\n     * Method to update taskbar editing action on mous move.\n     *\n     * @param {PointerEvent} e .\n     * @param {boolean} isMouseClick .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {\n        var _this = this;\n        var args = {};\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        if (this.taskBarEditRecord !== null) {\n            args.editingFields = this.taskBarEditRecord.ganttProperties;\n            args.data = this.taskBarEditRecord;\n            if (this.parent.viewType === 'ResourceView' && args.data.level === 0) {\n                return;\n            }\n            args.recordIndex = recordIndex;\n            args.taskBarEditAction = this.taskBarEditAction;\n            args.roundOffDuration = this.roundOffDuration;\n            args.cancel = false;\n            args.previousData = this.previousItem;\n            args.segmentIndex = this.segmentIndex;\n            this.roundOffDuration = args.roundOffDuration;\n            this.targetElement = args.target = closest(e.target, '.e-gantt-child-taskbar');\n            this.updateMouseMoveProperties(e);\n            if (this.taskBarEditAction === 'ProgressResizing') {\n                this.performProgressResize(e);\n            }\n            else if (this.taskBarEditAction === 'LeftResizing') {\n                this.enableLeftResizing(e);\n            }\n            else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {\n                this.enableRightResizing(e);\n            }\n            else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' ||\n                this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') {\n                this.enableDragging(e);\n            }\n            else if (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                this.updateConnectorLineSecondProperties(e);\n                this.triggerDependencyEvent(e);\n                if (!this.parent.isAdaptive) {\n                    this.drawFalseLine();\n                }\n            }\n            this.setItemPosition();\n            this.updateEditedItem();\n            this.editTooltip.updateTooltip(this.segmentIndex);\n            if (isMouseClick) {\n                this.taskBarEditedAction(e);\n            }\n            this.parent.trigger('taskbarEditing', args, function (arg) {\n                if (arg.cancel && _this.taskBarEditRecord !== null) {\n                    _this.tapPointOnFocus = false;\n                    merge(_this.taskBarEditRecord.ganttProperties, arg.previousData);\n                }\n            });\n        }\n    };\n    /**\n     * To update property while perform mouse move.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        if (e.pageX || e.pageY) {\n            this.mouseMoveX = e.pageX - containerPosition.left +\n                this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            this.tooltipPositionX = this.mouseMoveX;\n            this.mouseMoveY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        var isConnectorLineEdit = (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') ?\n            true : false;\n        if ((this.taskBarEditRecord.ganttProperties.width > 3 && !(this.taskBarEditAction === 'ProgressResizing' &&\n            (this.taskBarEditRecord.ganttProperties.progress === 0 || this.taskBarEditRecord.ganttProperties.progress === 100))) ||\n            isConnectorLineEdit) {\n            var mouseX = this.mouseMoveX - this.parent.ganttChartModule.scrollObject.previousScroll.left +\n                containerPosition.left;\n            var mouseY = this.mouseMoveY - this.parent.ganttChartModule.scrollObject.previousScroll.top +\n                containerPosition.top;\n            if ((mouseX + 20) >\n                containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('right');\n            }\n            else if ((mouseX - 20) < containerPosition.left) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('left');\n            }\n            else if (isConnectorLineEdit && ((mouseY + 20) >\n                containerPosition.top + this.parent.ganttChartModule.chartBodyContainer.offsetHeight)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('bottom');\n            }\n            else if (isConnectorLineEdit && ((mouseY - 20) < containerPosition.top)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('top');\n            }\n            else {\n                this.stopScrollTimer();\n            }\n        }\n        else {\n            this.stopScrollTimer();\n        }\n    };\n    /**\n     * To start the scroll timer.\n     *\n     * @param {string} direction .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.startScrollTimer = function (direction) {\n        var _this = this;\n        this.stopScrollTimer();\n        this.scrollTimer = window.setInterval(function () {\n            if (direction === 'right' || direction === 'bottom') {\n                _this.timerCount = (_this.timerCount + 1) >= _this.parent.timelineModule.totalTimelineWidth ?\n                    _this.parent.timelineModule.totalTimelineWidth : (_this.timerCount + 1);\n            }\n            else {\n                _this.timerCount = (_this.timerCount - 1) < 0 ? 0 : (_this.timerCount - 1);\n            }\n            if (direction === 'bottom' || direction === 'top') {\n                _this.parent.ganttChartModule.scrollObject.setScrollTop(_this.timerCount);\n            }\n            else {\n                _this.parent.ganttChartModule.scrollObject.setScrollLeft(_this.timerCount);\n            }\n            if (_this.taskBarEditAction === 'ConnectorPointLeftDrag'\n                || _this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                _this.drawFalseLine();\n            }\n        }, 0);\n    };\n    /**\n     * To stop the scroll timer.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.stopScrollTimer = function () {\n        window.clearInterval(this.scrollTimer);\n        this.scrollTimer = null;\n    };\n    /**\n     * To update left and width while perform taskbar drag operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.enableDragging = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') &&\n            !this.taskBarEditElement.classList.contains('e-segment-first')) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left - differenceWidth;\n            }\n            else {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left + differenceWidth;\n            }\n            var previousSegment = segments[this.segmentIndex - 1];\n            var nextSegment = segments[this.segmentIndex + 1];\n            var left = void 0;\n            if (this.taskBarEditElement.classList.contains('e-segment-inprogress')) {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    ((segment.width + segment.left) > (nextSegment.left)) ? nextSegment.left - segment.width : segment.left;\n            }\n            else {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    (item.left + segment.width + segment.left) >= this.parent.timelineModule.totalTimelineWidth ?\n                        (this.parent.timelineModule.totalTimelineWidth - segment.width) : segment.left;\n            }\n            segment.left = left;\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = this.mouseDownX - this.mouseMoveX;\n                if (differenceWidth > 0) {\n                    this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                }\n            }\n            else {\n                differenceWidth = this.mouseMoveX - this.mouseDownX;\n                this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n            }\n            var left = item.left < 0 ? 0 : (item.left + item.width) >= this.parent.timelineModule.totalTimelineWidth ?\n                (this.parent.timelineModule.totalTimelineWidth - item.width) : item.left;\n            this.parent.setRecordValue('left', left, item, true);\n        }\n    };\n    /**\n     * To update left and width while perform progress resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.performProgressResize = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var diffrenceWidth = 0;\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width)) && item.left > 0) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX >= (item.left + item.width)) {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n            }\n        }\n        else {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width))) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX <= item.left) {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n            }\n        }\n        var widthValue = item.progressWidth > item.width ?\n            item.width : item.progressWidth;\n        widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;\n        this.parent.setRecordValue('progressWidth', widthValue, item, true);\n        var diff = item.width - item.progressWidth;\n        if (diff <= 4) {\n            this.progressBorderRadius = 4 - diff;\n        }\n        else {\n            this.progressBorderRadius = 0;\n        }\n    };\n    /**\n     * To update left and width while perform taskbar left resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableLeftResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar')) {\n            this.enableSplitTaskLeftResize(item);\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    if (item.left > 0) {\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                    }\n                }\n                else {\n                    if (this.mouseMoveX > (item.left + item.width)) {\n                        differenceWidth = this.mouseDownX - this.mouseMoveX;\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    if ((item.left) < (item.left + item.width) &&\n                        ((this.previousItem.left + differenceWidth) <= (this.previousItem.left + this.previousItem.width))) {\n                        this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                    }\n                }\n                else {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', 3, item, true);\n                }\n            }\n            this.updateEditPosition(e, item);\n            this.parent.setRecordValue('left', (this.previousItem.left + this.previousItem.width - item.width), item, true);\n        }\n    };\n    TaskbarEdit.prototype.enableSplitTaskLeftResize = function (item) {\n        var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n        var segment = segments[this.segmentIndex];\n        var differenceWidth = 0;\n        //when decrease the left and increase the width\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX < (item.left + segment.width + segment.left)) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                // when resize other than 0th segment\n                if (segment.left > 0) {\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = segment.width + differenceWidth;\n                    if (this.segmentIndex !== 0) {\n                        var previousSegment = segments[this.segmentIndex - 1];\n                        if ((item.left + segment.left) < (item.left + previousSegment.left + previousSegment.width)) {\n                            var difference = (item.left + previousSegment.left + previousSegment.width) - (item.left + segment.left);\n                            segment.width -= difference;\n                            segment.left = segment.left + difference;\n                        }\n                    }\n                }\n                else if (segment.left <= 0 && this.segmentIndex === 0) {\n                    this.parent.setRecordValue('left', item.left - differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width + differenceWidth, item, true);\n                    segment.width = segment.width + differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_1 = segments[i];\n                        segment_1.left = segment_1.left + differenceWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > (item.left + segment.width + segment.left)) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = this.parent.perDayWidth;\n                }\n            }\n        }\n        else {\n            // when increase left value and decrease width of segment\n            if (this.mouseMoveX < (item.left + segment.width + segment.left - this.parent.perDayWidth)) {\n                differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                // when decrease the first segment width\n                if (this.segmentIndex === 0 && segment.left <= 0) {\n                    this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                    segment.width = segment.width - differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_2 = segments[i];\n                        segment_2.left = segment_2.left - differenceWidth;\n                    }\n                    // when decrease remaining segments\n                }\n                else if ((segment.left) < (segment.left + segment.width) &&\n                    ((segment.left + differenceWidth) <= (segment.left + segment.width))) {\n                    segment.left = segment.left + differenceWidth;\n                    segment.width = segment.width - differenceWidth;\n                }\n                // when mouse move goes beyond one day width of task bar.\n            }\n            else {\n                if (this.mouseMoveX < (item.left + segment.left + segment.width)) {\n                    if (segment.width > this.parent.perDayWidth) {\n                        differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                            (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                        this.previousMouseMove = this.mouseMoveX;\n                        var singleDayDifference = (segment.width - differenceWidth) < this.parent.perDayWidth ?\n                            this.parent.perDayWidth > segment.width ?\n                                this.parent.perDayWidth - segment.width : segment.width - this.parent.perDayWidth : 0;\n                        differenceWidth -= singleDayDifference;\n                        if (this.segmentIndex === 0) {\n                            this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                            this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                            for (var i = 1; i < item.segments.length; i++) {\n                                var segment_3 = segments[i];\n                                segment_3.left = segment_3.left - differenceWidth;\n                            }\n                        }\n                        else {\n                            segment.left = segment.left + differenceWidth;\n                            segment.width = segment.width - differenceWidth;\n                        }\n                    }\n                }\n            }\n        }\n        this.parent.setRecordValue('segments', segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * Update mouse position and edited item value\n     *\n     * @param {PointerEvent} e .\n     * @param {ITaskData} item .\n     * @returns {void} .\n     */\n    TaskbarEdit.prototype.updateEditPosition = function (e, item) {\n        this.updateIsMilestone(item);\n        this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(item.width, item.progress), item, true);\n    };\n    /**\n     *  To update milestone property.\n     *\n     * @param {ITaskData} item .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateIsMilestone = function (item) {\n        if (item.width <= 3) {\n            this.parent.setRecordValue('width', 3, item, true);\n            this.parent.setRecordValue('isMilestone', true, item, true);\n        }\n        else {\n            this.parent.setRecordValue('width', item.width, item, true);\n            this.parent.setRecordValue('isMilestone', false, item, true);\n        }\n    };\n    /**\n     * To update left and width while perform taskbar right resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableRightResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar')) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > (item.left + segment.left) && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width - differenceWidth;\n                }\n                else {\n                    if (this.mouseMoveX < (item.left + segment.left)) {\n                        segment.width = this.parent.perDayWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > segment.left) {\n                    differenceWidth = isNullOrUndefined(this.previousMouseMove) ?\n                        (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width + differenceWidth;\n                }\n            }\n            var width = void 0;\n            var nextSegment = this.segmentIndex !== segments.length - 1 ? segments[this.segmentIndex + 1] : null;\n            if (!isNullOrUndefined(nextSegment)) {\n                if (!this.taskBarEditElement.classList.contains('e-segment-last')) {\n                    width = (segment.left + segment.width) > nextSegment.left ? (nextSegment.left - segment.left) : segment.width;\n                }\n                segment.width = width;\n            }\n            if (this.segmentIndex === item.segments.length - 1) {\n                if (this.segmentIndex === 0) {\n                    this.parent.setRecordValue('width', segment.width, item, true);\n                }\n            }\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > item.left && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                }\n                else {\n                    if (this.mouseMoveX < item.left) {\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > item.left) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                }\n            }\n            this.updateEditPosition(e, item);\n        }\n    };\n    /**\n     * To updated startDate and endDate while perform taskbar edit operation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateEditedItem = function () {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var left;\n        var projectStartDate;\n        var endDate;\n        var startDate;\n        switch (this.taskBarEditAction) {\n            case 'ProgressResizing':\n                this.parent.setRecordValue('progress', this.getProgressPercent(item.width, item.progressWidth), item, true);\n                break;\n            case 'LeftResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n                    projectStartDate = this.getDateByLeft(left);\n                    if (isNullOrUndefined(item.endDate)) {\n                        endDate = this.parent.dateValidationModule.getValidEndDate(item);\n                        this.parent.setRecordValue('endDate', endDate, item, true);\n                    }\n                    startDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                    this.parent.setRecordValue('startDate', new Date(startDate.getTime()), item, true);\n                    if (this.parent.dateValidationModule.compareDates(item.startDate, item.endDate) === 0\n                        && isNullOrUndefined(item.isMilestone) && item.isMilestone === false && item.duration === 0) {\n                        this.parent.setRecordValue('duration', 1, item, true);\n                    }\n                    if (item.isMilestone) {\n                        this.parent.setRecordValue('endDate', new Date(startDate.getTime()), item, true);\n                    }\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitLeftResize(item);\n                }\n                break;\n            case 'RightResizing':\n            case 'ParentResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n                    var tempEndDate = this.getDateByLeft(left);\n                    if (isNullOrUndefined(item.startDate)) {\n                        startDate = this.parent.dateValidationModule.getValidStartDate(item);\n                        this.parent.setRecordValue('startDate', startDate, item, true);\n                    }\n                    var tempdate = isNullOrUndefined(item.startDate) ? startDate : item.startDate;\n                    endDate = item.isMilestone ? tempdate :\n                        this.parent.dateValidationModule.checkEndDate(tempEndDate, this.taskBarEditRecord.ganttProperties);\n                    this.parent.setRecordValue('endDate', new Date(endDate.getTime()), item, true);\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitRightResizing(item);\n                }\n                break;\n            case 'ParentDrag':\n            case 'ChildDrag':\n            case 'MilestoneDrag':\n            case 'ManualParentDrag':\n                if (this.segmentIndex === -1 || this.segmentIndex === 0) {\n                    this.updateChildDrag(item);\n                }\n                else {\n                    this.setSplitTaskDrag(item);\n                }\n                break;\n        }\n    };\n    TaskbarEdit.prototype.updateChildDrag = function (item) {\n        var left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left);\n        var endDate;\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n            item.segments[0].startDate = projectStartDate;\n            item.segments[0].endDate = this.parent.dataOperation.getEndDate(item.segments[0].startDate, item.segments[0].duration, item.durationUnit, item, false);\n            this.parent.setRecordValue('segments', item.segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n            this.parent.chartRowsModule.incrementSegments(item.segments, 0, this.taskBarEditRecord);\n            this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        }\n        else {\n            if (!isNullOrUndefined(item.endDate) && isNullOrUndefined(item.startDate)) {\n                endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                endDate = this.parent.dateValidationModule.checkEndDate(endDate, this.taskBarEditRecord.ganttProperties);\n                this.parent.setRecordValue('endDate', endDate, item, true);\n            }\n            else {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n                if (!isNullOrUndefined(item.duration)) {\n                    this.parent.dateValidationModule.calculateEndDate(this.taskBarEditRecord);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.updateSplitLeftResize = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.segmentIndex === 0 ? this.getRoundOffStartLeft(item, this.roundOffDuration) :\n            this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.segmentIndex === 0 ? this.getDateByLeft(left) : this.getDateByLeft(item.left + left);\n        var startDate = this.parent.dataOperation.checkStartDate(projectStartDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.startDate = new Date(startDate.getTime());\n        segment.duration = duration;\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', segment.startDate, item, true);\n        }\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n            var segmentOffsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    TaskbarEdit.prototype.updateSplitRightResizing = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n        var tempEndDate = this.getDateByLeft(left);\n        var endDate = this.parent.dataOperation.checkEndDate(tempEndDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.endDate = new Date(endDate.getTime());\n        segment.duration = duration;\n        // update next segment offset duration\n        if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var segmentOffset = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffset;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n    };\n    TaskbarEdit.prototype.sumOfDuration = function (segments) {\n        var duration = 0;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            duration += segment.duration;\n        }\n        return duration;\n    };\n    TaskbarEdit.prototype.setSplitTaskDrag = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(item.left + left);\n        projectStartDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n        segment.startDate = projectStartDate;\n        segment.endDate = this.parent.dataOperation.getEndDate(segment.startDate, segment.duration, item.durationUnit, item, false);\n        segment.duration = this.parent.dataOperation.getDuration(segment.startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        if (!isNullOrUndefined(this.parent.taskFields.endDate)) {\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'endDate');\n        }\n        //set offset if previous record present\n        if (!isNullOrUndefined(item.segments[this.segmentIndex - 1])) {\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (segment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            segment.offsetDuration = offsetDuration;\n        }\n        //set next record  offset if present\n        if (!isNullOrUndefined(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (nextSegment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            nextSegment.offsetDuration = offsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * To get roundoff enddate.\n     *\n     * @param {ITaskData} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffEndLeft = function (ganttRecord, isRoundOff) {\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var totalLeft = ganttRecord.width + ganttRecord.left;\n        if (this.segmentIndex !== -1) {\n            var segment = ganttRecord.segments[this.segmentIndex];\n            totalLeft = totalLeft - ganttRecord.width + segment.width + segment.left;\n        }\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainingLeft = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var positionValue = remainingLeft / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (positionValue > 0.5) {\n                    totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n                }\n                else if (positionValue < 0.5) {\n                    totalLeft = (totalLeft - remainingLeft) + (this.parent.perDayWidth / 2);\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                var inHour = (this.parent.perDayWidth / 24);\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Hour') / (1000 * 60 * 60)));\n                remainingLeft = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inHour;\n                }\n            }\n            else if (tierMode === 'Minutes') {\n                var inMinutes = (this.parent.perDayWidth / (24 * 60));\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Minutes') / (1000 * 60)));\n                remainingLeft = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inMinutes;\n                }\n            }\n            else {\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + this.parent.perDayWidth;\n                }\n            }\n        }\n        return totalLeft;\n    };\n    /**\n     * To get roundoff startdate.\n     *\n     * @param {ITaskData | ITaskSegment} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffStartLeft = function (ganttRecord, isRoundOff) {\n        var left = isNullOrUndefined(ganttRecord) ? ganttRecord.left\n            : ganttRecord.left;\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainDays = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var remainDaysInDecimal = remainDays / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (remainDaysInDecimal <= 0.5) {\n                    left = left - remainDays;\n                }\n                else if (remainDaysInDecimal > 0.5) {\n                    left = (left - remainDays) + this.parent.perDayWidth / 2;\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Hour') / (1000 * 60 * 60)));\n                remainDays = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                left = left - remainDays;\n            }\n            else if (tierMode === 'Minutes') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Minutes') / (1000 * 60)));\n                remainDays = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                left = left - remainDays;\n            }\n            else {\n                left = left - remainDays;\n            }\n        }\n        return left;\n    };\n    /**\n     * To get date by left value.\n     *\n     * @param {number} left .\n     * @returns {Date} .\n     * @private\n     */\n    TaskbarEdit.prototype.getDateByLeft = function (left) {\n        var pStartDate = new Date(this.parent.timelineModule.timelineStartDate.toString());\n        var milliSecondsPerPixel = (24 * 60 * 60 * 1000) / this.parent.perDayWidth;\n        pStartDate.setTime(pStartDate.getTime() + (left * milliSecondsPerPixel));\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.topTier :\n            this.parent.timelineModule.bottomTier;\n        if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n            if (this.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && !this.isInDst(pStartDate)) {\n                pStartDate.setTime(pStartDate.getTime() + (60 * 60 * 1000));\n            }\n            else if (!this.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && this.isInDst(pStartDate)) {\n                pStartDate.setTime(pStartDate.getTime() - (60 * 60 * 1000));\n            }\n        }\n        return pStartDate;\n    };\n    /**\n     * To get timezone offset.\n     *\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getDefaultTZOffset = function () {\n        var janMonth = new Date(new Date().getFullYear(), 0, 1);\n        var julMonth = new Date(new Date().getFullYear(), 6, 1); //Because there is no reagions DST inbetwwen this range\n        return Math.max(janMonth.getTimezoneOffset(), julMonth.getTimezoneOffset());\n    };\n    /**\n     * To check whether the date is in DST.\n     *\n     * @param {Date} date .\n     * @returns {boolean} .\n     * @private\n     */\n    TaskbarEdit.prototype.isInDst = function (date) {\n        return date.getTimezoneOffset() < this.getDefaultTZOffset();\n    };\n    /**\n     * To set item position.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.setItemPosition = function () {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var segment = !isNullOrUndefined(item.segments) ? item.segments[this.segmentIndex] : null;\n        var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ?\n            this.parent.chartRowsModule.milestoneHeight : item.width;\n        var rightResizer = this.parent.isAdaptive ? (width - 2) : (width - 10);\n        if (!isNullOrUndefined(segment)) {\n            rightResizer = this.parent.isAdaptive ? (segment.width - 2) : (segment.width - 10);\n        }\n        var taskBarMainContainer = (!this.taskBarEditElement.classList.contains(cls.taskBarMainContainer)) ? closest(this.taskBarEditElement, 'tr.' + cls.chartRow)\n            .querySelector('.' + cls.taskBarMainContainer) : this.taskBarEditElement;\n        var segmentedTaskBarContainer = this.taskBarEditElement.classList.contains('e-segmented-taskbar');\n        var leftLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow)\n            .querySelector('.' + cls.leftLabelContainer);\n        var rightLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow)\n            .querySelector('.' + cls.rightLabelContainer);\n        var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceChildProgressBar);\n        var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceChildTaskBar);\n        var childProgressResizer = this.taskBarEditElement.querySelector('.' + cls.childProgressResizer);\n        var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + cls.taskBarRightResizer);\n        var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceParentTaskBar);\n        var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceParentProgressBar);\n        var traceConnectorPointRight = this.taskBarEditElement.querySelector('.' + cls.rightConnectorPointOuterDiv);\n        var manualParentTaskbar = this.taskBarEditElement;\n        var manualTaskbar = this.taskBarEditElement.querySelector('.' + cls.manualParentTaskBar);\n        var manualParentRight = this.taskBarEditElement.querySelector('.' + cls.manualParentRightResizer);\n        var manualParentLeft = this.taskBarEditElement.querySelector('.' + cls.manualParentLeftResizer);\n        if (this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n            this.taskBarEditAction !== 'ConnectorPointLeftDrag') {\n            if (this.taskBarEditAction !== 'ParentResizing' && this.taskBarEditAction !== 'ManualParentDrag') {\n                if (segmentedTaskBarContainer && !isNullOrUndefined(item.segments)\n                    && (this.taskBarEditAction === 'RightResizing' || this.segmentIndex !== 0)) {\n                    this.taskBarEditElement.style.width = (segment.width) + 'px';\n                    this.taskBarEditElement.style.left = (segment.left) + 'px';\n                }\n                taskBarMainContainer.style.width = (width) + 'px';\n                taskBarMainContainer.style.left = (item.left) + 'px';\n                leftLabelContainer.style.width = (item.left) + 'px';\n                if (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex === 0) {\n                    var parent_1 = this.taskBarEditElement.parentElement;\n                    var segmentedTasks = parent_1.getElementsByClassName('e-segmented-taskbar');\n                    for (var i = 0; i < item.segments.length; i++) {\n                        var segment_4 = item.segments[i];\n                        var segmentElement = segmentedTasks[i];\n                        segmentElement.style.width = (segment_4.width) + 'px';\n                        segmentElement.style.left = (segment_4.left) + 'px';\n                    }\n                }\n                if (!isNullOrUndefined(rightLabelContainer)) {\n                    rightLabelContainer.style.left = (item.left + width) + 'px';\n                }\n            }\n            if (traceConnectorPointRight) {\n                traceConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width + 2)) + 'px';\n            }\n            if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {\n                taskBarMainContainer.style.left = (item.left - (width / 2)) + 'px';\n                leftLabelContainer.style.width = (item.left - (width / 2)) + 'px';\n                if (!isNullOrUndefined(rightLabelContainer)) {\n                    rightLabelContainer.style.left = (item.left + (width / 2)) + 'px';\n                }\n            }\n            else if (this.taskBarEditAction === 'ProgressResizing') {\n                if (this.segmentIndex === -1) {\n                    traceChildTaskBar.style.left = (item.left + item.progressWidth - 10) + 'px';\n                    if (!isNullOrUndefined(traceChildProgressBar)) {\n                        traceChildProgressBar.style.width = item.progressWidth + 'px';\n                        traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                        traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                        childProgressResizer.style.left = item.progressWidth - 8 + 'px';\n                    }\n                }\n                else {\n                    this.updateSegmentProgress(this.taskBarEditRecord.ganttProperties);\n                    traceChildProgressBar.style.width = item.segments[this.segmentIndex].progressWidth + 'px';\n                    traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                    traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                    childProgressResizer.style.left = item.segments[this.segmentIndex].progressWidth - 8 + 'px';\n                }\n            }\n            else if (this.taskBarEditAction === 'RightResizing' && !isNullOrUndefined(traceChildTaskBar)) {\n                traceChildTaskBar.style.width = (width) + 'px';\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    taskBarRightResizer.style.left = rightResizer + 'px';\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.left = (item.progressWidth - 10) + 'px';\n                    }\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentDrag') {\n                if (!isNullOrUndefined(traceParentTaskBar)) {\n                    traceParentTaskBar.style.width = (width) + 'px';\n                }\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    traceParentProgressBar.style.width = (item.progressWidth) + 'px';\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentResizing') {\n                manualParentTaskbar.style.width = manualTaskbar.style.width = (item.width) + 'px';\n                manualParentRight.style.left = (item.width - manualParentLeft.offsetLeft) + 'px';\n            }\n            else if (this.taskBarEditAction === 'ManualParentDrag') {\n                manualParentTaskbar.style.left = (item.left - item.autoLeft) + 'px';\n            }\n            else {\n                if (!isNullOrUndefined(traceChildTaskBar) && !segmentedTaskBarContainer) {\n                    traceChildTaskBar.style.width = (width) + 'px';\n                }\n                if (!isNullOrUndefined(traceChildProgressBar)) {\n                    taskBarRightResizer.style.left = rightResizer + 'px';\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.left = item.progressWidth - 10 + 'px';\n                    }\n                }\n                if (segmentedTaskBarContainer) {\n                    taskBarRightResizer.style.left = rightResizer + 'px';\n                    traceChildProgressBar.style.width = (segment.progressWidth) + 'px';\n                    if (!isNullOrUndefined(childProgressResizer)) {\n                        childProgressResizer.style.left = segment.progressWidth - 10 + 'px';\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To handle mouse up event in chart\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseUpHandler = function (e) {\n        var mouseDragged = this.isMouseDragged;\n        this.previousMouseMove = null;\n        this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n        if (this.taskBarEditAction && this.isMouseDragged) {\n            if (!this.dragMouseLeave && this.taskBarEditedAction) {\n                this.taskBarEditedAction(e);\n                this.isMouseDragged = false;\n            }\n            else {\n                this.cancelTaskbarEditActionInMouseLeave();\n            }\n        }\n        if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar && !isNullOrUndefined(this.taskBarEditElement)) {\n            if (!isNullOrUndefined(this.taskBarEditElement.querySelector('.e-gantt-child-taskbar'))) {\n                if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar').classList.contains('e-collapsed-taskbar-drag')) {\n                    removeClass([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                    this.taskBarEditElement.style.zIndex = this.prevZIndex;\n                    this.prevZIndex = '';\n                }\n            }\n        }\n        if (!this.parent.isAdaptive || mouseDragged) {\n            this.initPublicProp();\n        }\n        this.stopScrollTimer();\n    };\n    /**\n     * To perform taskbar edit operation.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditedAction = function (event) {\n        var args = {};\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var item = this.taskBarEditRecord;\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        var x2 = this.mouseMoveX;\n        var e = this.getCoordinate(event);\n        var resMouseY = e.pageY - this.parent.ganttChartModule.chartBodyContainer.offsetTop;\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && !this.drawPredecessor) {\n            this.dependencyCancel = true;\n        }\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && this.drawPredecessor) {\n            this.parent.connectorLineEditModule.updatePredecessor(this.connectorSecondRecord, this.finalPredecessor);\n        }\n        else {\n            if (x1 !== x2 || (Math.abs(y1 - resMouseY) >= (this.parent.rowHeight - this.parent.taskbarHeight) / 2)) {\n                if (item !== null) {\n                    args.editingFields = item.ganttProperties;\n                    args.data = item;\n                    args.recordIndex = recordIndex;\n                    args.previousData = this.previousItem;\n                    args.taskBarEditAction = this.taskBarEditAction;\n                    args.action = 'TaskbarEditing';\n                    args.roundOffDuration = this.roundOffDuration;\n                    args.target = this.targetElement;\n                    this.taskbarEditedArgs = args;\n                    this.taskbarEdited(args);\n                }\n            }\n        }\n    };\n    /**\n     * To cancel the taskbar edt action.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.cancelTaskbarEditActionInMouseLeave = function () {\n        this.parent.editModule.reUpdatePreviousRecords(true);\n    };\n    TaskbarEdit.prototype.updateSegmentProgress = function (taskData) {\n        var segments = taskData.segments;\n        var fixedWidth = true;\n        var totalTaskWidth = this.splitTasksDuration(segments) * this.parent.perDayWidth;\n        var totalProgressWidth = this.parent.dataOperation.getProgressWidth(totalTaskWidth, taskData.progress);\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            delete segment.progressWidth;\n            if (totalProgressWidth > 0 && totalProgressWidth > segment.width) {\n                totalProgressWidth = totalProgressWidth - segment.width;\n                segment.progressWidth = segment.width;\n                segment.showProgress = false;\n            }\n            else if (fixedWidth) {\n                segment.progressWidth = totalProgressWidth;\n                segment.showProgress = true;\n                totalProgressWidth = totalProgressWidth - segment.width;\n                fixedWidth = false;\n            }\n        }\n    };\n    /**\n     * To trigger taskbar edited event.\n     *\n     * @param {ITaskbarEditedEventArgs} arg .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskbarEdited = function (arg) {\n        var args = extend({}, arg);\n        var ganttRecord = args.data;\n        var taskData = ganttRecord.ganttProperties;\n        if (args.taskBarEditAction === 'ProgressResizing') {\n            if (args.previousData.progress !== taskData.progress) {\n                this.parent.setRecordValue('progress', this.getProgressPercent(taskData.width, taskData.progressWidth), taskData, true);\n                if (ganttRecord.parentItem) {\n                    this.parent.editModule.updateParentProgress(ganttRecord.parentItem);\n                }\n                if (!isNullOrUndefined(taskData.segments)) {\n                    this.updateSegmentProgress(taskData);\n                }\n            }\n        }\n        else {\n            var segments = args.data.ganttProperties.segments;\n            if (!isNullOrUndefined(segments) && segments.length > 0\n                && ((this.taskBarEditAction === 'LeftResizing' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'ChildDrag' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'RightResizing'))) {\n                var segment = segments[this.segmentIndex];\n                var ganttProp = this.taskBarEditRecord.ganttProperties;\n                var previousSegment = this.segmentIndex === 0 ? null\n                    : segments[this.segmentIndex - 1];\n                var nextSegment = this.segmentIndex === segments.length - 1 ? null\n                    : segments[this.segmentIndex + 1];\n                var sDate = !isNullOrUndefined(nextSegment) ?\n                    new Date(nextSegment.startDate.getTime()) : this.parent.cloneProjectEndDate;\n                var eDate = !isNullOrUndefined(previousSegment) ?\n                    new Date(previousSegment.endDate.getTime()) : this.parent.cloneProjectStartDate;\n                sDate.setHours(0, 0, 0, 0);\n                eDate.setHours(0, 0, 0, 0);\n                var cStartDate = new Date(segment.startDate.getTime());\n                var cEndDate = new Date(segment.endDate.getTime());\n                cStartDate.setDate(cStartDate.getDate() - 1);\n                cEndDate.setDate(cEndDate.getDate() + 1);\n                cStartDate.setHours(0, 0, 0, 0);\n                cEndDate.setHours(0, 0, 0, 0);\n                if (cStartDate.getTime() <= eDate.getTime() && !isNullOrUndefined(previousSegment) && !isNullOrUndefined(segment)) {\n                    var segmentIndexes = [\n                        { 'firstSegmentIndex': previousSegment.segmentIndex, 'secondSegmentIndex': segment.segmentIndex }\n                    ];\n                    this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                }\n                else if (cEndDate.getTime() >= sDate.getTime() && this.segmentIndex !== segments.length - 1) {\n                    var segmentIndexes = [\n                        { 'firstSegmentIndex': segment.segmentIndex, 'secondSegmentIndex': nextSegment.segmentIndex }\n                    ];\n                    this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                }\n                else if (cEndDate.getTime() >= sDate.getTime()) {\n                    segment.endDate.setDate(this.parent.cloneProjectEndDate.getDate() - 1);\n                    segment.startDate = this.parent.dataOperation.getStartDate(segment.endDate, segment.duration, ganttProp.durationUnit, ganttProp);\n                    // eslint-disable-next-line\n                    for (var i = segments.length - 2; i >= 0; i++) {\n                        var segment_5 = segments[i];\n                        var eDate_1 = segment_5.endDate;\n                        eDate_1.setDate(eDate_1.getDate() - segment_5.offsetDuration);\n                        segment_5.endDate = eDate_1;\n                        segment_5.startDate = this.parent.dataOperation.getStartDate(segment_5.endDate, segment_5.duration, ganttProp.durationUnit, ganttProp);\n                    }\n                }\n            }\n            this.parent.dataOperation.updateWidthLeft(args.data);\n        }\n        this.parent.dataOperation.updateTaskData(ganttRecord);\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To get progress in percentage.\n     *\n     * @param {number} parentwidth .\n     * @param {number} progresswidth .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getProgressPercent = function (parentwidth, progresswidth) {\n        return Math.ceil(((progresswidth / parentwidth) * 100));\n    };\n    /**\n     * false line implementation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.drawFalseLine = function () {\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var x2 = this.mouseMoveX;\n        var y2 = this.mouseMoveY;\n        var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n        var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n        var transform = 'rotate(' + angle + 'deg)';\n        var left;\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            left = (this.elementOffsetLeft - (this.parent.chartRowsModule.connectorPointWidth / 2)) -\n                this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            left = (this.elementOffsetLeft + this.elementOffsetWidth) +\n                (this.parent.chartRowsModule.connectorPointWidth / 2) - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        }\n        var top = ((this.elementOffsetTop) + (this.elementOffsetHeight / 2) +\n            this.parent.ganttChartModule.chartBodyContainer.offsetTop) - this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.removeFalseLine(false);\n        this.falseLine = createElement('div', {\n            className: cls.falseLine, id: 'ganttfalseline' + this.parent.element.id,\n            styles: 'transform-origin: 0% 100%;right: auto;position: absolute;transform:' + transform + ';' +\n                'border-top-width: 1px;border-top-style: dashed;z-index: 5;width:' + (length - 3) + 'px;' +\n                'left:' + left + 'px;top:' + top + 'px;'\n        });\n        this.parent.ganttChartModule.chartBodyContainer.appendChild(this.falseLine);\n    };\n    /**\n     *\n     * @param {boolean} isRemoveConnectorPointDisplay .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.removeFalseLine = function (isRemoveConnectorPointDisplay) {\n        if (this.falseLine) {\n            remove(this.falseLine);\n            this.falseLine = null;\n            if (isRemoveConnectorPointDisplay) {\n                this.elementOffsetLeft = 0;\n                this.elementOffsetTop = 0;\n                this.elementOffsetWidth = 0;\n                this.elementOffsetHeight = 0;\n                removeClass(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + cls.connectorLineContainer), [cls.connectorLineZIndex]);\n            }\n        }\n    };\n    /**\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateConnectorLineSecondProperties = function (e) {\n        var target = this.getElementByPosition(e);\n        var element = parentsUntil(target, cls.taskBarMainContainer);\n        this.connectorSecondAction = null;\n        var scrollTop = 0;\n        if (parentsUntil(target, cls.connectorPointLeft)) {\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.toPredecessorText = 'Start';\n        }\n        else if (parentsUntil(target, cls.connectorPointRight)) {\n            this.connectorSecondAction = 'ConnectorPointRightDrag';\n            this.toPredecessorText = 'Finish';\n        }\n        else {\n            this.connectorSecondAction = null;\n            this.toPredecessorText = null;\n        }\n        if (this.taskBarEditElement !== element && this.taskBarEditElement !== this.highlightedSecondElement) {\n            if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n                var top_1 = this.parent.virtualScrollModule.getTopPosition();\n                scrollTop = top_1;\n            }\n            if ((this.parent.virtualScrollModule && this.parent.enableVirtualization &&\n                !this.elementOffsetLeft) || !this.parent.enableVirtualization) {\n                this.elementOffsetLeft = this.taskBarEditElement.offsetLeft;\n                this.elementOffsetTop = this.taskBarEditElement.offsetTop + scrollTop;\n                this.elementOffsetWidth = this.taskBarEditElement.offsetWidth;\n                this.elementOffsetHeight = this.taskBarEditElement.offsetHeight;\n            }\n            this.showHideTaskBarEditingElements(element, this.highlightedSecondElement, true);\n        }\n        if (isNullOrUndefined(this.connectorSecondAction) && !isNullOrUndefined(this.connectorSecondElement)) {\n            this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n            removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointLeft)], [cls.connectorPointAllowBlock]);\n            removeClass([this.connectorSecondElement.querySelector('.' + cls.connectorPointRight)], [cls.connectorPointAllowBlock]);\n        }\n        this.connectorSecondElement = this.connectorSecondAction ? element : null;\n        this.highlightedSecondElement = element;\n        this.connectorSecondRecord = isNullOrUndefined(this.connectorSecondElement) ?\n            null : this.parent.ganttChartModule.getRecordByTaskBar(this.connectorSecondElement);\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.triggerDependencyEvent = function (e, mouseUp) {\n        var fromItem = this.taskBarEditRecord.ganttProperties;\n        var toItem = this.connectorSecondRecord ? this.connectorSecondRecord.ganttProperties : null;\n        var predecessor;\n        var currentTarget;\n        var target = this.getElementByPosition(e);\n        var element = target;\n        var uniqueId = this.parent.viewType === 'ResourceView' ? fromItem.taskId : fromItem.rowUniqueID;\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            predecessor = uniqueId + 'S';\n        }\n        else if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            predecessor = uniqueId + 'F';\n        }\n        if (this.connectorSecondAction) {\n            if (this.connectorSecondAction === 'ConnectorPointLeftDrag') {\n                predecessor += 'S';\n                currentTarget = 'start';\n            }\n            else if (this.connectorSecondAction === 'ConnectorPointRightDrag') {\n                predecessor += 'F';\n                currentTarget = 'finish';\n            }\n        }\n        if (isNullOrUndefined(toItem)) {\n            this.drawPredecessor = false;\n            return;\n        }\n        if (toItem.predecessorsName) {\n            this.finalPredecessor = toItem.predecessorsName + ',' + predecessor;\n        }\n        else {\n            this.finalPredecessor = predecessor;\n        }\n        var isValidLink = this.parent.connectorLineEditModule.validatePredecessorRelation(this.connectorSecondRecord, this.finalPredecessor);\n        // eslint-disable-next-line\n        var predecessorArray = this.parent.predecessorModule.calculatePredecessor(predecessor, this.connectorSecondRecord);\n        var args = {};\n        args.fromItem = fromItem;\n        args.toItem = toItem;\n        args.newPredecessorString = this.finalPredecessor;\n        args.predecessor = predecessorArray && predecessorArray[0];\n        args.isValidLink = isValidLink;\n        args.requestType = 'ValidateDependency';\n        this.parent.trigger('actionBegin', args);\n        args.isValidLink = !isValidLink && args.isValidLink ? false : args.isValidLink;\n        if (args.isValidLink) {\n            if (!this.editTooltip.toolTipObj && !this.parent.isAdaptive) {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            if (this.editTooltip.toolTipObj) {\n                this.parent.connectorLineModule.tooltipTable.innerHTML = this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', '');\n                var table = this.parent.connectorLineModule.tooltipTable.querySelector('#toPredecessor').querySelectorAll('td');\n                table[1].innerText = toItem.taskName;\n                table[2].innerText = this.parent.localeObj.getConstant(currentTarget);\n                var tooltipElement = this.parent.connectorLineModule.tooltipTable.parentElement.parentElement;\n                if (tooltipElement.offsetTop + tooltipElement.offsetHeight > e.pageY) {\n                    tooltipElement.style.top = (e.pageY - tooltipElement.offsetHeight - 20) + 'px';\n                }\n            }\n            this.drawPredecessor = true;\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (target.classList.contains(cls.connectorPointLeft) ||\n                    target.classList.contains(cls.connectorPointRight)) {\n                    this.showHideActivePredecessors(true);\n                }\n            }\n            else {\n                addClass([element], [cls.connectorPointAllowBlock]);\n            }\n            this.drawPredecessor = false;\n        }\n    };\n    // Get XY coordinates for touch and non-touch device\n    TaskbarEdit.prototype.getCoordinate = function (event) {\n        var coordinates = {};\n        if (this.parent.isAdaptive && event && event.type !== 'click') {\n            var e = event;\n            if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n                coordinates.pageX = e.changedTouches[0].pageX;\n                coordinates.pageY = e.changedTouches[0].pageY;\n            }\n        }\n        else if (event) {\n            var e = event;\n            coordinates.pageX = e.pageX;\n            coordinates.pageY = e.pageY;\n        }\n        return coordinates;\n    };\n    // Get current target element by mouse position\n    // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone\n    TaskbarEdit.prototype.getElementByPosition = function (event) {\n        if (!this.parent.isAdaptive) {\n            return event.target;\n        }\n        else {\n            var e = this.getCoordinate(event);\n            return document.elementFromPoint((e.pageX - window.pageXOffset), (e.pageY - window.pageYOffset));\n        }\n    };\n    TaskbarEdit.prototype.multipleSelectionEnabled = function () {\n        if (this.parent.selectionModule &&\n            this.parent.selectionSettings.mode !== 'Cell'\n            && this.parent.selectionSettings.type === 'Multiple') {\n            this.parent.selectionModule.hidePopUp();\n        }\n    };\n    TaskbarEdit.prototype.unWireEvents = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('chartMouseDown', this.mouseDownHandler);\n        this.parent.off('chartMouseUp', this.mouseUpHandler);\n        this.parent.off('chartMouseLeave', this.mouseLeaveHandler);\n        this.parent.off('chartMouseMove', this.mouseMoveAction);\n        this.parent.off('chartMouseClick', this.mouseClickHandler);\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.destroy = function () {\n        this.unWireEvents();\n        this.stopScrollTimer();\n        this.parent.editModule.taskbarEditModule = undefined;\n    };\n    return TaskbarEdit;\n}(DateProcessor));\nexport { TaskbarEdit };\n"]},"metadata":{},"sourceType":"module"}