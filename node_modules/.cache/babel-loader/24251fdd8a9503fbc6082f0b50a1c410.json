{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, addClass, createElement, EventHandler, isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { removeClass, Complex, Collection, getValue } from '@syncfusion/ej2-base';\nimport { Event, Property, NotifyPropertyChanges, setValue, KeyboardEvents, L10n } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { RowDropSettings, getUid } from '@syncfusion/ej2-grids';\nimport { FilterSettings } from '../models/filter-settings';\nimport { TextWrapSettings } from '../models/textwrap-settings';\nimport { Logger as TreeLogger } from '../actions/logger';\nimport { TreeClipboard } from '../actions/clipboard';\nimport { Selection as TreeGridSelection } from '../actions/selection';\nimport { Print } from '../actions/print';\nimport * as events from '../base/constant';\nimport { SearchSettings } from '../models/search-settings';\nimport { SelectionSettings } from '../models/selection-settings';\nimport { getActualProperties, getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, RemoteSaveAdaptor, JsonAdaptor, Deferred } from '@syncfusion/ej2-data';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { isRemoteData, isOffline, extendArray, isCountRequired, findChildrenRecords } from '../utils';\nimport { Grid, Logger } from '@syncfusion/ej2-grids';\nimport { Render } from '../renderer/render';\nimport { DataManipulation } from './data';\nimport { iterateArrayOrObject } from '@syncfusion/ej2-grids';\nimport { ToolbarItem, ContextMenuItems } from '../enum';\nimport { PageSettings } from '../models/page-settings';\nimport { AggregateRow } from '../models/summary';\nimport { EditSettings } from '../models/edit-settings';\nimport { SortSettings } from '../models/sort-settings';\nimport { isHidden } from '../utils';\nimport { editAction } from '../actions/crud-actions';\nimport { InfiniteScrollSettings } from '../models/infinite-scroll-settings';\n/**\n * Represents the TreeGrid component.\n * ```html\n * <div id='treegrid'></div>\n * <script>\n *  var treegridObj = new TreeGrid({ allowPaging: true });\n *  treegridObj.appendTo('#treegrid');\n * </script>\n * ```\n */\n\nvar TreeGrid =\n/** @class */\nfunction (_super) {\n  __extends(TreeGrid, _super);\n\n  function TreeGrid(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.dataResults = {};\n    _this.uniqueIDCollection = {};\n    _this.uniqueIDFilterCollection = {};\n    _this.changedRecords = 'changedRecords';\n    _this.deletedRecords = 'deletedRecords';\n    _this.addedRecords = 'addedRecords';\n\n    _this.objectEqualityChecker = function (old, current) {\n      if (old) {\n        var keys = Object.keys(old);\n        var isEqual = true;\n        var excludeKeys = ['Children', 'childRecords', 'taskData', 'uniqueID', 'parentItem', 'parentUniqueID', 'index'];\n\n        for (var i = 0; i < keys.length; i++) {\n          if (old[keys[i]] !== current[keys[i]] && excludeKeys.indexOf(keys[i]) === -1) {\n            var isDate = old[keys[i]] instanceof Date && current[keys[i]] instanceof Date;\n\n            if (!isDate || old[keys[i]].getTime() !== current[keys[i]].getTime()) {\n              isEqual = false;\n              break;\n            }\n          }\n        }\n\n        return isEqual;\n      } else {\n        return false;\n      }\n    };\n\n    TreeGrid_1.Inject(TreeGridSelection);\n    setValue('mergePersistData', _this.mergePersistTreeGridData, _this);\n    var logger = 'Logger';\n\n    if (!isNullOrUndefined(_this.injectedModules[logger])) {\n      Grid.Inject(Logger);\n    }\n\n    _this.grid = new Grid();\n    return _this;\n  }\n\n  TreeGrid_1 = TreeGrid;\n  /**\n   * Export TreeGrid data to Excel file(.xlsx).\n   *\n   * @param  {ExcelExportProperties | TreeGridExcelExportProperties} excelExportProperties - Defines the export properties of the Tree Grid.\n   * @param  {boolean} isMultipleExport - Define to enable multiple export.\n   * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n   * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n\n  /* eslint-disable */\n\n  TreeGrid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n    /* eslint-enable */\n    return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, false);\n  };\n  /**\n   * Export TreeGrid data to CSV file.\n   *\n   * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the TreeGrid.\n   * @param  {boolean} isMultipleExport - Define to enable multiple export.\n   * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n   * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n\n  /* eslint-disable */\n\n\n  TreeGrid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n    /* eslint-enable */\n    return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, true);\n  };\n  /**\n   * Export TreeGrid data to PDF document.\n   *\n   * @param {PdfExportProperties | TreeGridPdfExportProperties} pdfExportProperties - Defines the export properties of the Tree Grid.\n   * @param {boolean} isMultipleExport - Define to enable multiple export.\n   * @param {Object} pdfDoc - Defined the Pdf Document if multiple export is enabled.\n   * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n   * @returns {Promise<any>} - Returns promise object of export action\n   */\n\n\n  TreeGrid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n    return this.pdfExportModule.Map(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @private\n   * @returns {string} Returns TreeGrid module name\n   */\n\n\n  TreeGrid.prototype.getModuleName = function () {\n    return 'treegrid';\n  };\n  /**\n   * For internal use only - Initialize the event handler;\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.preRender = function () {\n    this.TreeGridLocale();\n    this.initProperties();\n    this.defaultLocale = {\n      Above: 'Above',\n      Below: 'Below',\n      Child: 'Child',\n      AddRow: 'Add Row',\n      ExpandAll: 'Expand All',\n      CollapseAll: 'Collapse All',\n      RowIndent: 'Indent',\n      RowOutdent: 'Outdent'\n    };\n    this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n\n    if (this.isSelfReference && isNullOrUndefined(this.childMapping)) {\n      this.childMapping = 'Children';\n    }\n  };\n  /**\n   * Sorts a column with the given options.\n   *\n   * @param {string} columnName - Defines the column name to be sorted.\n   * @param {SortDirection} direction - Defines the direction of sorting field.\n   * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.sortByColumn = function (columnName, direction, isMultiSort) {\n    this.sortModule.sortColumn(columnName, direction, isMultiSort);\n  };\n  /**\n   * Clears all the sorted columns of the TreeGrid.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.clearSorting = function () {\n    if (this.sortModule) {\n      this.sortModule.clearSorting();\n    }\n  };\n  /**\n   * Remove sorted column by field name.\n   *\n   * @param {string} field - Defines the column field name to remove sort.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  TreeGrid.prototype.removeSortColumn = function (field) {\n    this.sortModule.removeSortColumn(field);\n  };\n  /**\n   * Searches TreeGrid records using the given key.\n   * You can customize the default search option by using the\n   * [`searchSettings`](./#searchsettings/).\n   *\n   * @param  {string} searchString - Defines the key.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.search = function (searchString) {\n    this.grid.search(searchString);\n  };\n  /**\n   * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.\n   * > * This method ignores the hidden columns.\n   * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.\n   *\n   * @param  {string |string[]} fieldNames - Defines the column names.\n   * @returns {void}\n   *\n   *\n   *\n   */\n\n\n  TreeGrid.prototype.autoFitColumns = function (fieldNames) {\n    this.resizeModule.autoFitColumns(fieldNames);\n    this.updateColumnModel();\n  };\n  /**\n   * Changes the TreeGrid column positions by field names.\n   *\n   * @param  {string} fromFName - Defines the origin field name.\n   * @param  {string} toFName - Defines the destination field name.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.reorderColumns = function (fromFName, toFName) {\n    this.grid.reorderColumns(fromFName, toFName);\n  };\n\n  TreeGrid.prototype.TreeGridLocale = function () {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    var locale = L10n.locale;\n    var localeObject = {};\n    setValue(this.locale, {}, localeObject);\n    var gridLocale;\n    gridLocale = {};\n    gridLocale = getObject(this.locale, locale);\n    var treeGridLocale;\n    treeGridLocale = {};\n    treeGridLocale = getObject(this.getModuleName(), gridLocale);\n    setValue('grid', treeGridLocale, getObject(this.locale, localeObject));\n    L10n.load(localeObject);\n  };\n  /**\n   * By default, prints all the pages of the TreeGrid and hides the pager.\n   * > You can customize print options using the\n   * [`printMode`](./#printmode).\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.print = function () {\n    this.printModule.print();\n  };\n\n  TreeGrid.prototype.treeGridkeyActionHandler = function (e) {\n    if (this.allowKeyboard) {\n      var target = void 0;\n      var parentTarget = void 0;\n      var column = void 0;\n      var row = void 0;\n      var summaryElement = void 0;\n\n      switch (e.action) {\n        case 'ctrlDownArrow':\n          this.expandAll();\n          break;\n\n        case 'ctrlUpArrow':\n          this.collapseAll();\n          break;\n\n        case 'ctrlShiftUpArrow':\n          target = e.target;\n          column = target.closest('.e-rowcell');\n          row = column.closest('tr');\n\n          if (row !== null && row !== undefined) {\n            this.expandCollapseRequest(row.querySelector('.e-treegridexpand'));\n          }\n\n          break;\n\n        case 'ctrlShiftDownArrow':\n          target = e.target;\n          column = target.closest('.e-rowcell');\n          row = column.closest('tr');\n\n          if (row !== null && row !== undefined) {\n            this.expandCollapseRequest(row.querySelector('.e-treegridcollapse'));\n          }\n\n          break;\n\n        case 'downArrow':\n          if (!this.enableVirtualization) {\n            parentTarget = e.target.parentElement;\n            summaryElement = this.findnextRowElement(parentTarget);\n\n            if (summaryElement !== null) {\n              var rowIndex = summaryElement.rowIndex;\n              this.selectRow(rowIndex);\n              var cellIndex = e.target.cellIndex;\n              var row_1 = summaryElement.children[cellIndex];\n              addClass([row_1], 'e-focused');\n              addClass([row_1], 'e-focus');\n            } else {\n              this.clearSelection();\n            }\n          }\n\n          break;\n\n        case 'upArrow':\n          if (!this.enableVirtualization) {\n            parentTarget = e.target.parentElement;\n            summaryElement = this.findPreviousRowElement(parentTarget);\n\n            if (summaryElement !== null) {\n              var rIndex = summaryElement.rowIndex;\n              this.selectRow(rIndex);\n              var cIndex = e.target.cellIndex;\n              var rows = summaryElement.children[cIndex];\n              addClass([rows], 'e-focused');\n              addClass([rows], 'e-focus');\n            } else {\n              this.clearSelection();\n            }\n          }\n\n      }\n    }\n  }; // Get Proper Row Element from the summary\n\n\n  TreeGrid.prototype.findnextRowElement = function (summaryRowElement) {\n    var rowElement = summaryRowElement.nextElementSibling;\n\n    if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 || rowElement.style.display === 'none')) {\n      rowElement = this.findnextRowElement(rowElement);\n    }\n\n    return rowElement;\n  }; // Get Proper Row Element from the summary\n\n\n  TreeGrid.prototype.findPreviousRowElement = function (summaryRowElement) {\n    var rowElement = summaryRowElement.previousElementSibling;\n\n    if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 || rowElement.style.display === 'none')) {\n      rowElement = this.findPreviousRowElement(rowElement);\n    }\n\n    return rowElement;\n  };\n\n  TreeGrid.prototype.initProperties = function () {\n    this.defaultLocale = {};\n    this.flatData = [];\n    this.parentData = [];\n    this.columnModel = [];\n    this.isExpandAll = false;\n    this.isCollapseAll = false;\n    this.keyConfigs = {\n      ctrlDownArrow: 'ctrl+downarrow',\n      ctrlUpArrow: 'ctrl+uparrow',\n      ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n      ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n      downArrow: 'downArrow',\n      upArrow: 'upArrow'\n    };\n    this.isLocalData = !(this.dataSource instanceof DataManager) || this.dataSource.dataSource.offline || !isNullOrUndefined(this.dataSource.ready) || this.dataSource.adaptor instanceof RemoteSaveAdaptor;\n    this.isSelfReference = !isNullOrUndefined(this.parentIdMapping);\n  };\n  /**\n   * Binding events to the element while component creation.\n   *\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.wireEvents = function () {\n    EventHandler.add(this.grid.element, 'click', this.mouseClickHandler, this);\n    EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.treeGridkeyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n\n    if (this.allowKeyboard) {\n      this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n    }\n  };\n  /**\n   * To provide the array of modules needed for component rendering\n   *\n   * @returns {ModuleDeclaration[]} - Returns TreeGrid modules collection\n   * @hidden\n   */\n\n\n  TreeGrid.prototype.requiredModules = function () {\n    var modules = [];\n    var splitFrozenCount = 'splitFrozenCount';\n    this.grid[splitFrozenCount](this.getGridColumns(this.columns));\n\n    if (this.isDestroyed) {\n      return modules;\n    }\n\n    modules.push({\n      member: 'filter',\n      args: [this, this.filterSettings]\n    });\n\n    if (!isNullOrUndefined(this.toolbar)) {\n      modules.push({\n        member: 'toolbar',\n        args: [this]\n      });\n    }\n\n    if (this.contextMenuItems) {\n      modules.push({\n        member: 'contextMenu',\n        args: [this]\n      });\n    }\n\n    if (this.allowPaging) {\n      modules.push({\n        member: 'pager',\n        args: [this, this.pageSettings]\n      });\n    }\n\n    if (this.allowReordering) {\n      modules.push({\n        member: 'reorder',\n        args: [this]\n      });\n    }\n\n    if (this.allowSorting) {\n      modules.push({\n        member: 'sort',\n        args: [this]\n      });\n    }\n\n    if (this.aggregates.length > 0) {\n      modules.push({\n        member: 'summary',\n        args: [this]\n      });\n    }\n\n    modules.push({\n      member: 'resize',\n      args: [this]\n    });\n\n    if (this.allowExcelExport) {\n      modules.push({\n        member: 'ExcelExport',\n        args: [this]\n      });\n    }\n\n    if (this.frozenColumns || this.frozenRows || this.getFrozenColumns() || this.grid.getFrozenLeftColumnsCount() || this.grid.getFrozenRightColumnsCount()) {\n      modules.push({\n        member: 'freeze',\n        args: [this]\n      });\n    }\n\n    if (this.detailTemplate) {\n      modules.push({\n        member: 'detailRow',\n        args: [this]\n      });\n    }\n\n    if (this.allowPdfExport) {\n      modules.push({\n        member: 'PdfExport',\n        args: [this]\n      });\n    }\n\n    if (this.showColumnMenu) {\n      modules.push({\n        member: 'columnMenu',\n        args: [this]\n      });\n    }\n\n    if (this.showColumnChooser) {\n      modules.push({\n        member: 'ColumnChooser',\n        args: [this]\n      });\n    }\n\n    this.extendRequiredModules(modules);\n    return modules;\n  };\n\n  TreeGrid.prototype.extendRequiredModules = function (modules) {\n    if (this.allowRowDragAndDrop) {\n      modules.push({\n        member: 'rowDragAndDrop',\n        args: [this]\n      });\n    }\n\n    if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n      modules.push({\n        member: 'edit',\n        args: [this]\n      });\n    }\n\n    if (this.isCommandColumn(this.columns)) {\n      modules.push({\n        member: 'commandColumn',\n        args: [this]\n      });\n    }\n\n    if (this.allowSelection) {\n      modules.push({\n        member: 'selection',\n        args: [this]\n      });\n    }\n\n    if (this.enableVirtualization) {\n      modules.push({\n        member: 'virtualScroll',\n        args: [this]\n      });\n    }\n\n    if (this.enableInfiniteScrolling) {\n      modules.push({\n        member: 'infiniteScroll',\n        args: [this]\n      });\n    }\n\n    modules.push({\n      member: 'logger',\n      args: [this.grid]\n    });\n  };\n\n  TreeGrid.prototype.isCommandColumn = function (columns) {\n    var _this = this;\n\n    return columns.some(function (col) {\n      if (col.columns) {\n        return _this.isCommandColumn(col.columns);\n      }\n\n      return !!(col.commands || col.commandsTemplate);\n    });\n  };\n  /**\n   * Unbinding events from the element while component destroy.\n   *\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.unwireEvents = function () {\n    if (this.grid && this.grid.element) {\n      EventHandler.remove(this.grid.element, 'click', this.mouseClickHandler);\n    }\n  };\n  /**\n   * Logs tree grid error message on console\n   *\n   * @param {string | string[]} types - Tree Grid error type\n   * @param {object} args - Error details\n   * @hidden\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.log = function (types, args) {\n    if (this.loggerModule) {\n      this.loggerModule.treeLog(types, args, this);\n    }\n  };\n  /**\n   * For internal use only - To Initialize the component rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.render = function () {\n    var _this = this;\n\n    if (this.isReact) {\n      this.grid.isReact = true;\n      this.grid.portals = [];\n    }\n\n    createSpinner({\n      target: this.element\n    }, this.createElement);\n    this.log(['mapping_fields_missing']);\n    this.renderModule = new Render(this);\n    this.dataModule = new DataManipulation(this);\n    this.printModule = new Print(this);\n    this.trigger(events.load);\n    this.autoGenerateColumns();\n    this.initialRender = true;\n\n    if (!isNullOrUndefined(this.dataSource)) {\n      this.convertTreeData(this.dataSource);\n    }\n\n    this.loadGrid();\n\n    if (this.element.classList.contains('e-treegrid') && this.rowDropSettings.targetID) {\n      this.grid.rowDropSettings.targetID += '_gridcontrol';\n    }\n\n    this.addListener();\n    var gridContainer = createElement('div', {\n      id: this.element.id + '_gridcontrol'\n    });\n    addClass([this.element], 'e-treegrid');\n\n    if (!isNullOrUndefined(this.height) && typeof this.height === 'string' && this.height.indexOf('%') !== -1) {\n      this.element.style.height = this.height;\n    }\n\n    if (!isNullOrUndefined(this.width) && typeof this.width === 'string' && this.width.indexOf('%') !== -1) {\n      this.element.style.width = this.width;\n    }\n\n    this.element.appendChild(gridContainer);\n    var gridRequiredModules = this.grid.requiredModules;\n\n    this.grid.requiredModules = function () {\n      var modules = [];\n      modules = gridRequiredModules.apply(this);\n\n      for (var i = 0; i < modules.length; i++) {\n        if (modules[i].member === 'virtualscroll') {\n          modules[i].member = 'treeVirtualScroll';\n        }\n      }\n\n      return modules;\n    };\n\n    this.grid.appendTo(gridContainer);\n    this.wireEvents();\n    this.renderComplete();\n    var destroyTemplate = 'destroyTemplate';\n    var destroyTemplateFn = this.grid[destroyTemplate]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.grid[destroyTemplate] = function (args, index) {\n      destroyTemplateFn.apply(_this.grid);\n      var portals = 'portals';\n\n      if (!(_this.isReact && isNullOrUndefined(_this[portals]))) {\n        _this.clearTemplate(args, index);\n      }\n    };\n  };\n\n  TreeGrid.prototype.afterGridRender = function () {\n    if (!isNullOrUndefined(this.grid.clipboardModule)) {\n      this.grid.clipboardModule.destroy();\n    }\n\n    this.clipboardModule = this.grid.clipboardModule = new TreeClipboard(this);\n  };\n\n  TreeGrid.prototype.convertTreeData = function (data) {\n    var _this = this;\n\n    if (isCountRequired(this)) {\n      data = getValue('result', data);\n    }\n\n    if (data instanceof Array && data.length > 0 && Object.prototype.hasOwnProperty.call(data[0], 'level')) {\n      this.flatData = data;\n      this.flatData.filter(function (e) {\n        setValue('uniqueIDCollection.' + e.uniqueID, e, _this);\n\n        if (e.level === 0) {\n          _this.parentData.push(e);\n        }\n      });\n    } else {\n      if (isCountRequired(this)) {\n        var griddata = getValue('result', this.dataSource);\n        this.dataModule.convertToFlatData(griddata);\n      } else {\n        this.dataModule.convertToFlatData(data);\n      }\n    }\n  }; // private getGridData(): Object {\n  //   if (isRemoteData(this)) {\n  //     return this.dataSource;\n  //   } else if (this.isLocalData && this.dataSource instanceof DataManager) {\n  //     this.dataSource.dataSource.json = this.flatData;\n  //     return this.dataSource;\n  //   }\n  //   return this.flatData;\n  // }\n\n\n  TreeGrid.prototype.bindGridProperties = function () {\n    this.bindedDataSource();\n    this.grid.enableRtl = this.enableRtl;\n    this.grid.allowKeyboard = this.allowKeyboard;\n    this.grid.columns = this.getGridColumns(this.columns);\n    this.grid.allowExcelExport = this.allowExcelExport;\n    this.grid.allowPdfExport = this.allowPdfExport;\n    this.grid.query = this.query;\n    this.grid.columnQueryMode = this.columnQueryMode;\n    this.grid.allowPaging = this.allowPaging;\n    this.grid.pageSettings = getActualProperties(this.pageSettings);\n    this.grid.pagerTemplate = this.pagerTemplate;\n    this.grid.showColumnMenu = this.showColumnMenu;\n    this.grid.allowSorting = this.allowSorting;\n    this.grid.allowFiltering = this.allowFiltering;\n    this.grid.enableVirtualization = this.enableVirtualization;\n    this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n    this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n    this.grid.infiniteScrollSettings = this.infiniteScrollSettings;\n    this.grid.width = this.width;\n    this.grid.height = this.height;\n    this.grid.enableAltRow = this.enableAltRow;\n    this.grid.allowReordering = this.allowReordering;\n    this.grid.allowTextWrap = this.allowTextWrap;\n    this.grid.allowResizing = this.allowResizing;\n    this.grid.enableHover = this.enableHover;\n    this.grid.enableAutoFill = this.enableAutoFill;\n    this.grid.enableImmutableMode = this.enableImmutableMode;\n    this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n    this.grid.rowDropSettings = getActualProperties(this.rowDropSettings);\n    this.grid.rowHeight = this.rowHeight;\n    this.grid.gridLines = this.gridLines;\n    this.grid.allowSelection = this.allowSelection;\n    this.grid.toolbar = getActualProperties(this.getGridToolbar());\n    this.grid.toolbarTemplate = this.toolbarTemplate;\n    this.grid.showColumnChooser = this.showColumnChooser;\n    this.grid.filterSettings = getActualProperties(this.filterSettings);\n    this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n    this.grid.sortSettings = getActualProperties(this.sortSettings);\n    this.grid.searchSettings = getActualProperties(this.searchSettings);\n    this.grid.aggregates = getActualProperties(this.aggregates);\n    this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n    this.grid.printMode = getActualProperties(this.printMode);\n    this.grid.locale = getActualProperties(this.locale);\n    this.grid.selectedRowIndex = this.selectedRowIndex;\n    this.grid.contextMenuItems = getActualProperties(this.getContextMenu());\n    this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n    this.grid.editSettings = this.getGridEditSettings();\n    this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n    this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n    this.grid.frozenRows = this.frozenRows;\n    this.grid.frozenColumns = this.frozenColumns;\n    this.grid.clipMode = getActualProperties(this.clipMode);\n    var templateInstance = 'templateDotnetInstance';\n    this.grid[templateInstance] = this[templateInstance];\n    var isJsComponent = 'isJsComponent';\n    this.grid[isJsComponent] = true;\n  };\n\n  TreeGrid.prototype.triggerEvents = function (args) {\n    this.trigger(getObject('name', args), args);\n  };\n\n  TreeGrid.prototype.bindGridEvents = function () {\n    var _this = this;\n\n    this.grid.rowSelecting = function (args) {\n      if (!isNullOrUndefined(args.target) && (args.target.classList.contains('e-treegridexpand') || args.target.classList.contains('e-treegridcollapse') || args.target.classList.contains('e-summarycell'))) {\n        args.cancel = true;\n        return;\n      }\n\n      _this.trigger(events.rowSelecting, args);\n    };\n\n    this.grid.rowSelected = function (args) {\n      _this.selectedRowIndex = _this.grid.selectedRowIndex;\n\n      _this.notify(events.rowSelected, args);\n\n      _this.trigger(events.rowSelected, args);\n    };\n\n    this.grid.rowDeselected = function (args) {\n      _this.selectedRowIndex = _this.grid.selectedRowIndex;\n\n      _this.trigger(events.rowDeselected, args);\n    };\n\n    this.grid.resizeStop = function (args) {\n      _this.updateColumnModel();\n\n      _this.trigger(events.resizeStop, args);\n    };\n\n    this.grid.excelQueryCellInfo = function (args) {\n      _this.notify('excelCellInfo', args);\n\n      args = _this.dataResults;\n    };\n\n    this.grid.pdfQueryCellInfo = function (args) {\n      _this.notify('pdfCellInfo', args);\n\n      args = _this.dataResults;\n    };\n\n    this.grid.checkBoxChange = function (args) {\n      _this.trigger(events.checkboxChange, args);\n    };\n\n    this.grid.pdfExportComplete = this.triggerEvents.bind(this);\n    this.grid.excelExportComplete = this.triggerEvents.bind(this);\n    this.grid.excelHeaderQueryCellInfo = this.triggerEvents.bind(this);\n    this.grid.pdfHeaderQueryCellInfo = this.triggerEvents.bind(this);\n    this.grid.dataSourceChanged = this.triggerEvents.bind(this);\n    this.grid.recordDoubleClick = this.triggerEvents.bind(this);\n    this.grid.rowDeselecting = this.triggerEvents.bind(this);\n    this.grid.cellDeselected = this.triggerEvents.bind(this);\n    this.grid.cellDeselecting = this.triggerEvents.bind(this);\n    this.grid.columnMenuOpen = this.triggerEvents.bind(this);\n    this.grid.columnMenuClick = this.triggerEvents.bind(this);\n    this.grid.cellSelected = this.triggerEvents.bind(this);\n    this.grid.headerCellInfo = this.triggerEvents.bind(this);\n    this.grid.resizeStart = this.triggerEvents.bind(this);\n    this.grid.resizing = this.triggerEvents.bind(this);\n    this.grid.columnDrag = this.triggerEvents.bind(this);\n    this.grid.columnDragStart = this.triggerEvents.bind(this);\n    this.grid.columnDrop = this.triggerEvents.bind(this);\n    this.grid.beforePrint = this.triggerEvents.bind(this);\n    this.grid.beforeCopy = this.triggerEvents.bind(this);\n\n    this.grid.beforePaste = function (args) {\n      var rows = _this.getRows();\n\n      var rowIndex = 'rowIndex';\n\n      while (rows[args[rowIndex]].classList.contains('e-summaryrow')) {\n        args[rowIndex]++;\n      }\n\n      _this.trigger(events.beforePaste, args);\n    };\n\n    this.grid.load = function () {\n      _this.grid.on('initial-end', _this.afterGridRender, _this);\n\n      if (!isNullOrUndefined(_this.loggerModule)) {\n        var loggerModule = 'loggerModule';\n        _this.loggerModule = _this.grid[loggerModule] = new TreeLogger(_this.grid);\n      }\n    };\n\n    this.grid.printComplete = this.triggerEvents.bind(this);\n    this.grid.actionFailure = this.triggerEvents.bind(this);\n    this.extendedGridDataBoundEvent();\n    this.extendedGridEvents();\n    this.extendedGridActionEvents();\n    this.extendedGridEditEvents();\n    this.bindGridDragEvents();\n    this.bindCallBackEvents();\n  };\n\n  TreeGrid.prototype.lastRowBorder = function (visiblerow, isAddBorder) {\n    for (var j = 0; j < visiblerow.cells.length; j++) {\n      if (isAddBorder) {\n        addClass([visiblerow.cells[j]], 'e-lastrowcell');\n      } else {\n        removeClass([visiblerow.cells[j]], 'e-lastrowcell');\n      }\n    }\n  };\n\n  TreeGrid.prototype.isPixelHeight = function () {\n    if (this.height !== 'auto' && this.height.toString().indexOf('%') === -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  TreeGrid.prototype.extendedGridDataBoundEvent = function () {\n    var _this = this;\n\n    this.grid.dataBound = function (args) {\n      _this.updateRowTemplate();\n\n      _this.updateColumnModel();\n\n      _this.updateAltRow(_this.getRows());\n\n      _this.notify('dataBoundArg', args);\n\n      if (isRemoteData(_this) && !isOffline(_this) && !_this.hasChildMapping) {\n        var req = getObject('dataSource.requests', _this).filter(function (e) {\n          return e.httpRequest.statusText !== 'OK';\n        }).length;\n        setValue('grid.contentModule.isLoaded', !(req > 0), _this);\n      }\n\n      if (_this.isPixelHeight() && _this.initialRender) {\n        var rows = _this.getContentTable().rows;\n\n        var totalRows = [].slice.call(rows);\n\n        for (var i = totalRows.length - 1; i > 0; i--) {\n          if (!isHidden(totalRows[i])) {\n            if (totalRows[i].nextElementSibling) {\n              _this.lastRowBorder(totalRows[i], true);\n            }\n\n            break;\n          }\n        }\n      }\n\n      _this.trigger(events.dataBound, args);\n\n      _this.initialRender = false;\n    }; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var treeGrid = this;\n\n    this.grid.beforeDataBound = function (args) {\n      var dataSource = 'dataSource';\n      var requestType = getObject('action', args);\n\n      if ((isRemoteData(treeGrid) && !isOffline(treeGrid) || isCountRequired(this)) && requestType !== 'edit') {\n        treeGrid.notify('updateRemoteLevel', args);\n        args = treeGrid.dataResults;\n      } else if (treeGrid.flatData.length === 0 && isOffline(treeGrid) && treeGrid.dataSource instanceof DataManager) {\n        var dm = treeGrid.dataSource;\n        treeGrid.dataModule.convertToFlatData(dm.dataSource.json);\n        args.result = treeGrid.grid.dataSource[dataSource].json = treeGrid.flatData;\n      }\n\n      if (!isRemoteData(treeGrid) && !isCountRequired(this) && !isNullOrUndefined(treeGrid.dataSource)) {\n        if (this.isPrinting) {\n          setValue('isPrinting', true, args);\n        }\n\n        treeGrid.notify('dataProcessor', args); //args = treeGrid.dataModule.dataProcessor(args);\n      }\n\n      extend(args, treeGrid.dataResults);\n\n      if (treeGrid.enableImmutableMode) {\n        args.result = args.result.slice();\n      }\n\n      if (treeGrid.initialRender) {\n        this.contentModule.objectEqualityChecker = treeGrid.objectEqualityChecker;\n      } // treeGrid.notify(events.beforeDataBound, args);\n\n\n      if (!this.isPrinting) {\n        var callBackPromise_1 = new Deferred();\n        treeGrid.trigger(events.beforeDataBound, args, function (beforeDataBoundArgs) {\n          callBackPromise_1.resolve(beforeDataBoundArgs);\n        });\n        return callBackPromise_1;\n      }\n    };\n\n    this.grid.log = function (type, args) {\n      if (_this.loggerModule) {\n        _this.loggerModule.log(type, args);\n      }\n    };\n  };\n\n  TreeGrid.prototype.bindCallBackEvents = function () {\n    var _this = this;\n\n    this.grid.toolbarClick = function (args) {\n      if (args.item.id === _this.grid.element.id + '_excelexport' && _this.allowExcelExport === false || args.item.id === _this.grid.element.id + '_pdfexport' && _this.allowPdfExport === false || args.item.id === _this.grid.element.id + '_csvexport' && _this.allowExcelExport === false) {\n        return;\n      }\n\n      var callBackPromise = new Deferred();\n\n      _this.trigger(events.toolbarClick, args, function (toolbarargs) {\n        if (!toolbarargs.cancel) {\n          _this.notify(events.toolbarClick, args);\n        }\n\n        callBackPromise.resolve(toolbarargs);\n      });\n\n      return callBackPromise;\n    };\n\n    this.grid.cellSelecting = function (args) {\n      var callBackPromise = new Deferred();\n\n      _this.trigger(getObject('name', args), args, function (cellselectingArgs) {\n        callBackPromise.resolve(cellselectingArgs);\n      });\n\n      return callBackPromise;\n    };\n\n    this.grid.beginEdit = function (args) {\n      if (!isNullOrUndefined(args.row) && args.row.classList.contains('e-summaryrow')) {\n        args.cancel = true;\n        return;\n      }\n\n      var callBackPromise = new Deferred();\n\n      _this.trigger(events.beginEdit, args, function (begineditArgs) {\n        callBackPromise.resolve(begineditArgs);\n      });\n\n      return callBackPromise;\n    };\n  };\n\n  TreeGrid.prototype.extendedGridEditEvents = function () {\n    var _this = this;\n\n    this.grid.dataStateChange = function (args) {\n      if (_this.isExpandRefresh) {\n        _this.isExpandRefresh = false;\n        _this.grid.dataSource = {\n          result: _this.flatData,\n          count: getValue('count', _this.grid.dataSource)\n        };\n      } else {\n        _this.trigger(events.dataStateChange, args);\n      }\n    };\n\n    this.grid.cellSave = function (args) {\n      if (_this.grid.isContextMenuOpen()) {\n        var contextitems = _this.grid.contextMenuModule.contextMenu.element.getElementsByClassName('e-selected')[0];\n\n        if (isNullOrUndefined(contextitems) || contextitems.id !== _this.element.id + '_gridcontrol_cmenu_Save') {\n          args.cancel = true;\n        }\n      }\n\n      var callBackPromise = new Deferred();\n\n      _this.trigger(events.cellSave, args, function (cellsaveArgs) {\n        if (!cellsaveArgs.cancel) {\n          _this.notify(events.cellSave, cellsaveArgs);\n        }\n\n        callBackPromise.resolve(cellsaveArgs);\n      });\n\n      return callBackPromise;\n    };\n\n    this.grid.cellSaved = function (args) {\n      _this.trigger(events.cellSaved, args);\n\n      _this.notify(events.cellSaved, args);\n    };\n\n    this.grid.cellEdit = function (args) {\n      var prom = 'promise';\n      var promise = new Deferred();\n      args[prom] = promise;\n\n      _this.notify(events.cellEdit, args);\n\n      return promise;\n    };\n\n    this.grid.batchAdd = function (args) {\n      _this.trigger(events.batchAdd, args);\n\n      _this.notify(events.batchAdd, args);\n    };\n\n    this.grid.beforeBatchSave = function (args) {\n      _this.trigger(events.beforeBatchSave, args);\n\n      _this.notify(events.beforeBatchSave, args);\n    };\n\n    this.grid.beforeBatchAdd = function (args) {\n      _this.trigger(events.beforeBatchAdd, args);\n\n      _this.notify(events.beforeBatchAdd, args);\n    };\n\n    this.grid.batchDelete = function (args) {\n      _this.trigger(events.batchDelete, args);\n\n      _this.notify(events.batchDelete, args);\n    };\n\n    this.grid.beforeBatchDelete = function (args) {\n      _this.trigger(events.beforeBatchDelete, args);\n\n      _this.notify(events.beforeBatchDelete, args);\n    };\n\n    this.grid.batchCancel = function (args) {\n      if (_this.editSettings.mode !== 'Cell') {\n        _this.trigger(events.batchCancel, args);\n      }\n\n      _this.notify(events.batchCancel, args);\n    };\n  };\n\n  TreeGrid.prototype.updateRowTemplate = function () {\n    this.treeColumnRowTemplate();\n  };\n\n  TreeGrid.prototype.bindedDataSource = function () {\n    var dataSource = 'dataSource';\n    var isDataAvailable = 'isDataAvailable';\n    var adaptor = 'adaptor';\n    var ready = 'ready';\n\n    if (this.dataSource && isCountRequired(this)) {\n      var data = this.flatData;\n      var datacount = getValue('count', this.dataSource);\n      this.grid.dataSource = {\n        result: data,\n        count: datacount\n      };\n    } else {\n      this.grid.dataSource = !(this.dataSource instanceof DataManager) ? this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n    }\n\n    if (this.dataSource instanceof DataManager && (this.dataSource.dataSource.offline || this.dataSource.ready)) {\n      this.grid.dataSource[dataSource].json = extendArray(this.dataSource[dataSource].json);\n      this.grid.dataSource[ready] = this.dataSource.ready; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      var proxy_1 = this;\n\n      if (!isNullOrUndefined(this.grid.dataSource[ready])) {\n        this.grid.dataSource[ready].then(function (e) {\n          var dm = proxy_1.grid.dataSource;\n          dm[dataSource].offline = true;\n          dm[isDataAvailable] = true;\n          dm[dataSource].json = e.result;\n          dm[adaptor] = new JsonAdaptor();\n        });\n      }\n    }\n  };\n\n  TreeGrid.prototype.extendedGridActionEvents = function () {\n    var _this = this;\n\n    this.grid.actionBegin = function (args) {\n      if (args.requestType === 'sorting' && args.target && args.target.parentElement && args.target.parentElement.classList.contains('e-hierarchycheckbox')) {\n        args.cancel = true;\n      }\n\n      var requestType = getObject('requestType', args);\n\n      if (requestType === 'reorder') {\n        _this.notify('getColumnIndex', {});\n      }\n\n      _this.notify('actionBegin', {\n        editAction: args\n      });\n\n      if (!isRemoteData(_this) && !isNullOrUndefined(_this.filterModule) && !isCountRequired(_this) && (_this.grid.filterSettings.columns.length === 0 || _this.grid.searchSettings.key.length === 0)) {\n        _this.notify('clearFilters', {\n          flatData: _this.grid.dataSource\n        });\n\n        _this.grid.setProperties({\n          dataSource: _this.dataResults.result\n        }, true);\n\n        if (isNullOrUndefined(_this.grid['changedProperties'].dataSource)) {\n          _this.grid.renderModule.data.dataManager = _this.grid.dataSource instanceof DataManager ? _this.grid.dataSource : isNullOrUndefined(_this.grid.dataSource) ? new DataManager() : new DataManager(_this.grid.dataSource);\n        }\n      }\n\n      var callBackPromise = new Deferred();\n\n      _this.trigger(events.actionBegin, args, function (actionArgs) {\n        if (!actionArgs.cancel) {\n          _this.notify(events.beginEdit, actionArgs);\n        }\n\n        callBackPromise.resolve(actionArgs);\n      });\n\n      return callBackPromise;\n    };\n\n    this.grid.actionComplete = function (args) {\n      _this.notify('actioncomplete', args);\n\n      _this.updateColumnModel();\n\n      _this.updateTreeGridModel();\n\n      if (args.requestType === 'reorder') {\n        _this.notify('setColumnIndex', {});\n      }\n\n      _this.notify('actionComplete', {\n        editAction: args\n      });\n\n      if (args.requestType === 'add' && _this.editSettings.newRowPosition !== 'Top' && _this.editSettings.newRowPosition !== 'Bottom') {\n        _this.notify(events.beginAdd, args);\n      }\n\n      if (args.requestType === 'batchsave') {\n        _this.notify(events.batchSave, args);\n      }\n\n      _this.notify('updateGridActions', args);\n\n      if (args.requestType === 'save' && _this.aggregates.map(function (ag) {\n        return ag.showChildSummary === true;\n      }).length) {\n        _this.grid.refresh();\n      }\n\n      _this.trigger(events.actionComplete, args);\n    };\n  };\n\n  TreeGrid.prototype.extendedGridEvents = function () {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var treeGrid = this;\n\n    this.grid.recordDoubleClick = function (args) {\n      _this.trigger(events.recordDoubleClick, args);\n\n      _this.notify(events.recordDoubleClick, args);\n    };\n\n    this.grid.detailDataBound = function (args) {\n      _this.notify('detaildataBound', args);\n\n      _this.trigger(events.detailDataBound, args);\n    };\n\n    this.grid.rowDataBound = function (args) {\n      if (isNullOrUndefined(this.isPrinting)) {\n        setValue('isPrinting', false, args);\n      } else {\n        setValue('isPrinting', this.isPrinting, args);\n      }\n\n      treeGrid.renderModule.RowModifier(args);\n    };\n\n    this.grid.queryCellInfo = function (args) {\n      if (isNullOrUndefined(this.isPrinting)) {\n        setValue('isPrinting', false, args);\n      } else {\n        setValue('isPrinting', this.isPrinting, args);\n      }\n\n      treeGrid.renderModule.cellRender(args);\n    };\n\n    this.grid.contextMenuClick = function (args) {\n      _this.notify(events.contextMenuClick, args);\n\n      _this.trigger(events.contextMenuClick, args);\n    };\n\n    this.grid.contextMenuOpen = function (args) {\n      _this.notify(events.contextMenuOpen, args);\n\n      _this.trigger(events.contextMenuOpen, args);\n    };\n\n    this.grid.queryCellInfo = function (args) {\n      _this.renderModule.cellRender(args);\n    };\n  };\n\n  TreeGrid.prototype.bindGridDragEvents = function () {\n    var _this = this;\n\n    this.grid.rowDragStartHelper = function (args) {\n      _this.trigger(events.rowDragStartHelper, args);\n    };\n\n    this.grid.rowDragStart = function (args) {\n      _this.trigger(events.rowDragStart, args);\n    };\n\n    this.grid.rowDrag = function (args) {\n      if (_this.grid.isEdit) {\n        args.cancel = true;\n        return;\n      }\n\n      _this.notify(events.rowdraging, args);\n\n      _this.trigger(events.rowDrag, args);\n    };\n\n    this.grid.rowDrop = function (args) {\n      if (_this.grid.isEdit) {\n        args.cancel = true;\n        return;\n      }\n\n      _this.notify(events.rowDropped, args);\n\n      args.cancel = true;\n    };\n  };\n  /**\n   * Renders TreeGrid component\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.loadGrid = function () {\n    this.bindGridProperties();\n    this.bindGridEvents();\n    setValue('registeredTemplate', this.registeredTemplate, this.grid);\n    var ref = 'viewContainerRef';\n    setValue('viewContainerRef', this[ref], this.grid);\n  };\n  /**\n   * AutoGenerate TreeGrid columns from first record\n   *\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.autoGenerateColumns = function () {\n    if (!this.columns.length && !this.dataModule.isRemote() && Object.keys(this.dataSource).length) {\n      this.columns = []; // if (this.dataSource instanceof DataManager) {\n      //   record = (<DataManager>this.dataSource).dataSource.json[0];\n      // } else {\n\n      var record = this.dataSource[0]; // }\n\n      var keys = Object.keys(record);\n\n      for (var i = 0; i < keys.length; i++) {\n        if ([this.childMapping, this.parentIdMapping].indexOf(keys[i]) === -1) {\n          this.columns.push(keys[i]);\n        }\n      }\n    }\n  };\n\n  TreeGrid.prototype.getGridEditSettings = function () {\n    var edit = {};\n    var guid = 'guid';\n    edit.allowAdding = this.editSettings.allowAdding;\n    edit.allowEditing = this.editSettings.allowEditing;\n    edit.allowDeleting = this.editSettings.allowDeleting;\n    edit.newRowPosition = this.editSettings.newRowPosition === 'Bottom' ? 'Bottom' : 'Top';\n    edit.allowEditOnDblClick = this.editSettings.allowEditOnDblClick;\n    edit.showConfirmDialog = this.editSettings.showConfirmDialog;\n    edit.template = this.editSettings.template;\n    edit.showDeleteConfirmDialog = this.editSettings.showDeleteConfirmDialog;\n    edit.allowNextRowEdit = this.editSettings.allowNextRowEdit;\n    edit[guid] = this.editSettings[guid];\n    edit.dialog = this.editSettings.dialog;\n\n    switch (this.editSettings.mode) {\n      case 'Dialog':\n        edit.mode = this.editSettings.mode;\n        break;\n\n      case 'Batch':\n        edit.mode = this.editSettings.mode;\n        break;\n\n      case 'Row':\n        edit.mode = 'Normal';\n        break;\n\n      case 'Cell':\n        edit.mode = 'Normal';\n        edit.showConfirmDialog = false;\n        break;\n    }\n\n    return edit;\n  };\n  /**\n   * Defines grid toolbar from treegrid toolbar model\n   *\n   * @hidden\n   * @returns {Object[]} - returns context menu items\n   */\n\n\n  TreeGrid.prototype.getContextMenu = function () {\n    if (this.contextMenuItems) {\n      var items = [];\n\n      for (var i = 0; i < this.contextMenuItems.length; i++) {\n        switch (this.contextMenuItems[i]) {\n          case 'AddRow':\n          case ContextMenuItems.AddRow:\n            items.push({\n              text: this.l10n.getConstant('AddRow'),\n              target: '.e-content',\n              id: this.element.id + '_gridcontrol_cmenu_AddRow',\n              items: [{\n                text: this.l10n.getConstant('Above'),\n                id: 'Above'\n              }, {\n                text: this.l10n.getConstant('Below'),\n                id: 'Below'\n              }, {\n                text: this.l10n.getConstant('Child'),\n                id: 'Child'\n              }]\n            });\n            break;\n\n          default:\n            items.push(this.contextMenuItems[i]);\n        }\n      }\n\n      return items;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Defines grid toolbar from treegrid toolbar model\n   *\n   * @hidden\n   * @returns {Object[]} - Returns toolbar items\n   */\n\n\n  TreeGrid.prototype.getGridToolbar = function () {\n    if (this.toolbar) {\n      var items = [];\n      var tooltipText = void 0;\n\n      for (var i = 0; i < this.toolbar.length; i++) {\n        switch (this.toolbar[i]) {\n          case 'Search':\n          case ToolbarItem.Search:\n            items.push('Search');\n            break;\n\n          case 'Print':\n          case ToolbarItem.Print:\n            items.push('Print');\n            break;\n\n          case 'ExpandAll':\n          case ToolbarItem.ExpandAll:\n            tooltipText = this.l10n.getConstant('ExpandAll');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-expand',\n              id: this.element.id + '_gridcontrol_expandall'\n            });\n            break;\n\n          case 'CollapseAll':\n          case ToolbarItem.CollapseAll:\n            tooltipText = this.l10n.getConstant('CollapseAll');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-collapse',\n              id: this.element.id + '_gridcontrol_collapseall'\n            });\n            break;\n\n          case 'Indent':\n          case ToolbarItem.RowIndent:\n            tooltipText = this.l10n.getConstant('RowIndent');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-indent',\n              id: this.element.id + '_gridcontrol_indent'\n            });\n            break;\n\n          case 'Outdent':\n          case ToolbarItem.RowOutdent:\n            tooltipText = this.l10n.getConstant('RowOutdent');\n            items.push({\n              text: tooltipText,\n              tooltipText: tooltipText,\n              prefixIcon: 'e-outdent',\n              id: this.element.id + '_gridcontrol_outdent'\n            });\n            break;\n\n          default:\n            items.push(this.toolbar[i]);\n        }\n      }\n\n      return items;\n    } else {\n      return null;\n    }\n  };\n\n  TreeGrid.prototype.getGridColumns = function (columns, isEmptyColumnModel, index) {\n    if (isEmptyColumnModel === void 0) {\n      isEmptyColumnModel = true;\n    }\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    var column = columns;\n    var stackedColumn = 'columns';\n\n    if (isEmptyColumnModel) {\n      this.columnModel = [];\n    }\n\n    var treeGridColumn;\n    var gridColumn;\n    index = index === 0 ? -1 : index;\n    var gridColumnCollection = [];\n\n    for (var i = 0; i < column.length; i++) {\n      index = index + 1;\n      var treeColumn = this.grid.getColumnByUid(column[i].uid);\n      gridColumn = treeColumn ? treeColumn : {};\n      treeGridColumn = {};\n\n      if (typeof this.columns[i] === 'string') {\n        gridColumn.field = treeGridColumn.field = this.columns[i];\n      } else {\n        for (var _i = 0, _a = Object.keys(column[i]); _i < _a.length; _i++) {\n          var prop = _a[_i];\n\n          if (index === this.treeColumnIndex && prop === 'template') {\n            treeGridColumn[prop] = column[i][prop];\n          } else if (prop === 'columns' && !isNullOrUndefined(column[i][prop])) {\n            gridColumn[prop] = this.getGridColumns(column[i][prop], false, index);\n            treeGridColumn[prop] = column[i][prop];\n          } else {\n            gridColumn[prop] = treeGridColumn[prop] = column[i][prop];\n          }\n        }\n      }\n\n      if (!treeGridColumn[stackedColumn]) {\n        this.columnModel.push(new Column(treeGridColumn));\n      }\n\n      gridColumnCollection.push(gridColumn);\n    }\n\n    return gridColumnCollection;\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {TreeGridModel} newProp - properties details which has to be modified\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.onPropertyChanged = function (newProp) {\n    var properties = Object.keys(newProp);\n    var requireRefresh = false;\n\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var prop = properties_1[_i];\n\n      switch (prop) {\n        case 'columns':\n          this.grid.columns = this.getGridColumns(this.columns);\n          break;\n\n        case 'treeColumnIndex':\n          this.grid.refreshColumns();\n          break;\n\n        case 'allowPaging':\n          this.grid.allowPaging = this.allowPaging;\n          break;\n\n        case 'pageSettings':\n          this.grid.pageSettings = getActualProperties(this.pageSettings);\n          requireRefresh = true;\n          break;\n\n        case 'enableVirtualization':\n          this.grid.enableVirtualization = this.enableVirtualization;\n          break;\n\n        case 'enableColumnVirtualization':\n          this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n          break;\n\n        case 'toolbar':\n          this.grid.toolbar = this.getGridToolbar();\n          break;\n\n        case 'allowSelection':\n          this.grid.allowSelection = this.allowSelection;\n          break;\n\n        case 'selectionSettings':\n          this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n          break;\n\n        case 'allowSorting':\n          this.grid.allowSorting = this.allowSorting;\n          break;\n\n        case 'allowMultiSorting':\n          this.grid.allowMultiSorting = this.allowMultiSorting;\n          break;\n\n        case 'sortSettings':\n          this.grid.sortSettings = getActualProperties(this.sortSettings);\n          break;\n\n        case 'searchSettings':\n          this.grid.searchSettings = getActualProperties(this.searchSettings);\n          break;\n\n        case 'allowFiltering':\n          this.grid.allowFiltering = this.allowFiltering;\n          break;\n\n        case 'filterSettings':\n          if (!this.initialRender) {\n            this.grid.filterSettings = getActualProperties(this.filterSettings);\n          }\n\n          break;\n\n        case 'showColumnMenu':\n          this.grid.showColumnMenu = this.showColumnMenu;\n          break;\n\n        case 'allowRowDragAndDrop':\n          this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n          break;\n\n        case 'aggregates':\n          this.grid.aggregates = getActualProperties(this.aggregates);\n          break;\n\n        case 'enableInfiniteScrolling':\n          this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n          break;\n\n        case 'dataSource':\n          this.isLocalData = !(this.dataSource instanceof DataManager) || !isNullOrUndefined(this.dataSource.ready) || this.dataSource.adaptor instanceof RemoteSaveAdaptor;\n          this.convertTreeData(this.dataSource);\n\n          if (this.isLocalData) {\n            if (isCountRequired(this)) {\n              var count = getValue('count', this.dataSource);\n              this.grid.dataSource = {\n                result: this.flatData,\n                count: count\n              };\n            } else {\n              var data = this.dataSource;\n              this.grid.dataSource = !(data instanceof DataManager) ? this.flatData : new DataManager(data.dataSource, data.defaultQuery, data.adaptor);\n            }\n\n            if (this.enableVirtualization) {\n              this.grid.contentModule.isDataSourceChanged = true;\n            }\n          } else {\n            this.bindedDataSource();\n\n            if (this.enableVirtualization) {\n              this.grid.contentModule.removeEventListener();\n              this.grid.contentModule.eventListener('on');\n              this.grid.contentModule.renderTable();\n            }\n          }\n\n          break;\n\n        case 'query':\n          this.grid.query = this.query;\n          break;\n\n        case 'enableCollapseAll':\n          if (newProp[prop]) {\n            this.collapseAll();\n          } else {\n            this.expandAll();\n          }\n\n          break;\n\n        case 'expandStateMapping':\n          this.grid.refresh();\n          break;\n\n        case 'gridLines':\n          this.grid.gridLines = this.gridLines;\n          break;\n\n        case 'rowTemplate':\n          this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n          break;\n\n        case 'frozenRows':\n          this.grid.frozenRows = this.frozenRows;\n          break;\n\n        case 'frozenColumns':\n          this.grid.frozenColumns = this.frozenColumns;\n          break;\n\n        case 'rowHeight':\n          this.grid.rowHeight = this.rowHeight;\n          break;\n\n        case 'height':\n          if (!isNullOrUndefined(this.height) && typeof this.height === 'string' && this.height.indexOf('%') !== -1) {\n            this.element.style.height = this.height;\n          }\n\n          this.grid.height = this.height;\n          break;\n\n        case 'width':\n          if (!isNullOrUndefined(this.width) && typeof this.width === 'string' && this.width.indexOf('%') !== -1) {\n            this.element.style.width = this.width;\n          }\n\n          this.grid.width = this.width;\n          break;\n\n        case 'locale':\n          this.grid.locale = this.locale;\n          break;\n\n        case 'selectedRowIndex':\n          this.grid.selectedRowIndex = this.selectedRowIndex;\n          break;\n\n        case 'enableAltRow':\n          this.grid.enableAltRow = this.enableAltRow;\n          break;\n\n        case 'enableHover':\n          this.grid.enableHover = this.enableHover;\n          break;\n\n        case 'enableAutoFill':\n          this.grid.enableAutoFill = this.enableAutoFill;\n          break;\n\n        case 'enableImmutableMode':\n          this.grid.enableImmutableMode = this.enableImmutableMode;\n          break;\n\n        case 'allowExcelExport':\n          this.grid.allowExcelExport = this.allowExcelExport;\n          break;\n\n        case 'allowPdfExport':\n          this.grid.allowPdfExport = this.allowPdfExport;\n          break;\n\n        case 'enableRtl':\n          this.grid.enableRtl = this.enableRtl;\n          break;\n\n        case 'allowReordering':\n          this.grid.allowReordering = this.allowReordering;\n          break;\n\n        case 'allowResizing':\n          this.grid.allowResizing = this.allowResizing;\n          break;\n\n        case 'textWrapSettings':\n          this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n          break;\n\n        case 'allowTextWrap':\n          this.grid.allowTextWrap = getActualProperties(this.allowTextWrap);\n          this.grid.refresh();\n          break;\n\n        case 'contextMenuItems':\n          this.grid.contextMenuItems = this.getContextMenu();\n          break;\n\n        case 'showColumnChooser':\n          this.grid.showColumnChooser = this.showColumnChooser;\n          break;\n\n        case 'detailTemplate':\n          this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n          break;\n\n        case 'columnMenuItems':\n          this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n          break;\n\n        case 'editSettings':\n          if (this.grid.isEdit && this.grid.editSettings.mode === 'Normal' && newProp[prop].mode && (newProp[prop].mode === 'Cell' || newProp[prop].mode === 'Row')) {\n            this.grid.closeEdit();\n          }\n\n          this.grid.editSettings = this.getGridEditSettings();\n          break;\n      }\n\n      if (requireRefresh) {\n        this.grid.refresh();\n      }\n    }\n  };\n  /**\n   * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.destroy = function () {\n    var treeGridElement = this.element;\n\n    if (!treeGridElement) {\n      return;\n    }\n\n    var hasTreeGridChild = treeGridElement.querySelector('.' + 'e-gridheader') && treeGridElement.querySelector('.' + 'e-gridcontent') ? true : false;\n\n    if (hasTreeGridChild) {\n      this.unwireEvents();\n    }\n\n    this.removeListener();\n\n    if (hasTreeGridChild) {\n      _super.prototype.destroy.call(this);\n    }\n\n    if (this.grid) {\n      this.grid.destroy();\n    }\n\n    if (this.dataModule) {\n      this.dataModule.destroy();\n    }\n\n    var modules = ['dataModule', 'sortModule', 'renderModule', 'filterModule', 'printModule', 'clipboardModule', 'excelExportModule', 'pdfExportModule', 'toolbarModule', 'summaryModule', 'reorderModule', 'resizeModule', 'pagerModule', 'keyboardModule', 'columnMenuModule', 'contextMenuModule', 'editModule', 'virtualScrollModule', 'selectionModule', 'detailRow', 'rowDragAndDropModule', 'freezeModule'];\n\n    for (var i = 0; i < modules.length; i++) {\n      if (this[modules[i]]) {\n        this[modules[i]] = null;\n      }\n    }\n\n    this.element.innerHTML = '';\n    this.grid = null;\n  };\n  /**\n   * Update the TreeGrid model\n   *\n   * @method dataBind\n   * @returns {void}\n   * @private\n   */\n\n\n  TreeGrid.prototype.dataBind = function () {\n    if (isNullOrUndefined(this.grid)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(this.rowDropSettings.targetID) && isNullOrUndefined(document.getElementById(this.grid.rowDropSettings.targetID))) {\n      document.getElementById(this.rowDropSettings.targetID).id = this.grid.rowDropSettings.targetID;\n      this.rowDropSettings.targetID = this.grid.rowDropSettings.targetID;\n    }\n\n    _super.prototype.dataBind.call(this);\n\n    this.grid.dataBind();\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Returns persist properties details\n   * @hidden\n   */\n\n\n  TreeGrid.prototype.getPersistData = function () {\n    var keyEntity = ['pageSettings', 'sortSettings', 'filterSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'treeColumnIndex'];\n    var ignoreOnPersist = {\n      pageSettings: ['template', 'pageSizes', 'pageSizeMode', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n      filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent', 'hierarchyMode'],\n      searchSettings: ['fields', 'operator', 'ignoreCase'],\n      sortSettings: [],\n      columns: [],\n      selectedRowIndex: []\n    };\n    var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template', 'commandTemplate', 'commands', 'dataSource'];\n\n    for (var i = 0; i < keyEntity.length; i++) {\n      var currentObject = this[keyEntity[i]];\n\n      for (var k = 0, val = ignoreOnPersist[keyEntity[i]]; !isNullOrUndefined(val) && k < val.length; k++) {\n        var objVal = val[k];\n        delete currentObject[objVal];\n      }\n    }\n\n    this.ignoreInArrays(ignoreOnColumn, this.columns);\n    return this.addOnPersist(keyEntity);\n  };\n\n  TreeGrid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {\n    for (var i = 0; i < columns.length; i++) {\n      if (columns[i].columns) {\n        this.ignoreInColumn(ignoreOnColumn, columns[i]);\n        this.ignoreInArrays(ignoreOnColumn, columns[i].columns);\n      } else {\n        this.ignoreInColumn(ignoreOnColumn, columns[i]);\n      }\n    }\n  };\n\n  TreeGrid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {\n    for (var i = 0; i < ignoreOnColumn.length; i++) {\n      delete column[ignoreOnColumn[i]];\n      column.filter = {};\n    }\n  };\n\n  TreeGrid.prototype.mouseClickHandler = function (e) {\n    if (!isNullOrUndefined(e.touches)) {\n      return;\n    }\n\n    var target = e.target;\n\n    if ((target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse')) && !this.isEditCollapse && !this.grid.isEdit) {\n      this.expandCollapseRequest(target);\n    }\n\n    this.isEditCollapse = false;\n    this.notify('checkboxSelection', {\n      target: target\n    });\n  };\n  /**\n   * Returns TreeGrid rows\n   *\n   * @returns {HTMLTableRowElement[]} - Returns row elements collection\n   */\n\n\n  TreeGrid.prototype.getRows = function () {\n    return this.grid.getRows();\n  };\n  /**\n   * Gets the pager of the TreeGrid.\n   *\n   * @returns {Element} - Returns pager element\n   */\n\n\n  TreeGrid.prototype.getPager = function () {\n    return this.grid.getPager(); //get element from pager\n  };\n  /**\n   * Adds a new record to the TreeGrid. Without passing parameters, it adds empty rows.\n   * > `editSettings.allowEditing` should be true.\n   *\n   * @param {Object} data - Defines the new add record data.\n   * @param {number} index - Defines the row index to be added.\n   * @param {RowPosition} position - Defines the new row position to be added.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.addRecord = function (data, index, position) {\n    if (this.editModule) {\n      var isAddedRowByMethod = 'isAddedRowByMethod';\n      this.editModule[isAddedRowByMethod] = true;\n      this.editModule.addRecord(data, index, position);\n    }\n  };\n  /**\n   * Cancels edited state.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.closeEdit = function () {\n    if (this.grid.editModule) {\n      this.grid.editModule.closeEdit();\n    }\n  };\n  /**\n   * Saves the cell that is currently edited. It does not save the value to the DataSource.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.saveCell = function () {\n    if (this.grid.editModule) {\n      this.grid.editModule.saveCell();\n    }\n  };\n  /**\n   * To update the specified cell by given value without changing into edited state.\n   *\n   * @param {number} rowIndex Defines the row index.\n   * @param {string} field Defines the column field.\n   * @param {string | number | boolean | Date} value - Defines the value to be changed.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.updateCell = function (rowIndex, field, value) {\n    if (this.grid.editModule) {\n      this.grid.editModule.updateCell(rowIndex, field, value);\n    }\n  };\n  /**\n   * To update the specified row by given values without changing into edited state.\n   *\n   * @param {number} index Defines the row index.\n   * @param {Object} data Defines the data object to be updated.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.updateRow = function (index, data) {\n    if (this.grid.editModule) {\n      if (!isNullOrUndefined(index)) {\n        var griddata = this.grid.getCurrentViewRecords()[index];\n        extend(griddata, data);\n        this.grid.editModule.updateRow(index, griddata);\n      } else {\n        this.grid.editModule.updateRow(index, data);\n      }\n    }\n  };\n  /**\n   * Delete a record with Given options. If fieldName and data is not given then TreeGrid will delete the selected record.\n   * > `editSettings.allowDeleting` should be true.\n   *\n   * @param {string} fieldName - Defines the primary key field, 'Name of the column'.\n   * @param {Object} data - Defines the JSON data of the record to be deleted.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.deleteRecord = function (fieldName, data) {\n    if (this.grid.editModule) {\n      this.grid.editModule.deleteRecord(fieldName, data);\n    }\n  };\n  /**\n   * To edit any particular row by TR element.\n   *\n   * @param {HTMLTableRowElement} row - Defines the table row to be edited.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.startEdit = function (row) {\n    if (this.grid.editModule) {\n      this.grid.editModule.startEdit(row);\n    }\n  };\n  /**\n   * To edit any particular cell using row index and cell index.\n   *\n   * @param {number} rowIndex - Defines row index to edit a particular cell.\n   * @param {string} field - Defines the field name of the column to perform cell edit.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.editCell = function (rowIndex, field) {\n    if (this.editModule) {\n      this.editModule.editCell(rowIndex, field);\n    }\n  };\n  /**\n   * Enables or disables ToolBar items.\n   *\n   * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n   * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.enableToolbarItems = function (items, isEnable) {\n    if (this.grid.toolbarModule) {\n      this.grid.toolbarModule.enableItems(items, isEnable);\n    }\n  };\n  /**\n   * If TreeGrid is in editable state, you can save a record by invoking endEdit.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.endEdit = function () {\n    if (this.grid.editModule) {\n      this.grid.editModule.endEdit();\n    }\n  };\n  /**\n   * Column chooser can be displayed on screen by given position(X and Y axis).\n   *\n   * @param {number} x - Defines the X axis.\n   * @param {number} y - Defines the Y axis.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.openColumnChooser = function (x, y) {\n    if (this.columnChooserModule) {\n      this.columnChooserModule.openColumnChooser(x, y);\n    }\n  };\n  /**\n   * Delete any visible row by TR element.\n   *\n   * @param {HTMLTableRowElement} tr - Defines the table row element.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.deleteRow = function (tr) {\n    if (this.grid.editModule) {\n      this.grid.editModule.deleteRow(tr);\n    }\n  };\n  /**\n   * Get the names of the primary key columns of the TreeGrid.\n   *\n   * @returns {string[]} - Returns primary key collection\n   */\n\n\n  TreeGrid.prototype.getPrimaryKeyFieldNames = function () {\n    return this.grid.getPrimaryKeyFieldNames();\n  };\n  /**\n   * Updates particular cell value based on the given primary key value.\n   * > Primary key column must be specified using `columns.isPrimaryKey` property.\n   *\n   * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n   * @param {string } field - Specifies the field name which you want to update.\n   * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.setCellValue = function (key, field, value) {\n    this.grid.setCellValue(key, field, value);\n    var rowIndex = this.grid.getRowIndexByPrimaryKey(key);\n    var record = this.getCurrentViewRecords()[rowIndex];\n\n    if (!isNullOrUndefined(record)) {\n      editAction({\n        value: record,\n        action: 'edit'\n      }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, field);\n    }\n  };\n  /**\n   * Updates and refresh the particular row values based on the given primary key value.\n   * > Primary key column must be specified using `columns.isPrimaryKey` property.\n   *\n   *  @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n   *  @param {Object} rowData - To update new data for the particular row.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.setRowData = function (key, rowData) {\n    var currentRecords = this.getCurrentViewRecords();\n    var primaryKey = this.grid.getPrimaryKeyFieldNames()[0];\n    var level = 0;\n    var record = {};\n    currentRecords.some(function (value) {\n      if (value[primaryKey] === key) {\n        record = value;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    level = record.level;\n    rowData.level = level;\n    rowData.index = record.index;\n    rowData.childRecords = record.childRecords;\n    rowData.taskData = record.taskData;\n    rowData.uniqueID = record.uniqueID;\n    rowData.parentItem = record.parentItem;\n    rowData.checkboxState = record.checkboxState;\n    rowData.hasChildRecords = record.hasChildRecords;\n    rowData.parentUniqueID = record.parentUniqueID;\n    rowData.expanded = record.expanded;\n    this.grid.setRowData(key, rowData);\n  };\n  /**\n   * Navigates to the specified target page.\n   *\n   * @param  {number} pageNo - Defines the page number to navigate.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.goToPage = function (pageNo) {\n    if (this.grid.pagerModule) {\n      this.grid.pagerModule.goToPage(pageNo);\n    }\n  };\n  /**\n   * Defines the text of external message.\n   *\n   * @param  {string} message - Defines the message to update.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.updateExternalMessage = function (message) {\n    if (this.pagerModule) {\n      this.grid.pagerModule.updateExternalMessage(message);\n    }\n  };\n  /**\n   * Gets a cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} - Returns cell element in grid content\n   */\n\n\n  TreeGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets a Column by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {Column} - Returns tree grid column\n   */\n\n\n  TreeGrid.prototype.getColumnByField = function (field) {\n    return iterateArrayOrObject(this.columnModel, function (item) {\n      if (item.field === field) {\n        return item;\n      }\n\n      return undefined;\n    })[0];\n  };\n  /**\n   * Gets a column by UID.\n   *\n   * @param  {string} uid - Specifies the column UID.\n   * @returns {Column} - Returns tree grid column\n   */\n\n\n  TreeGrid.prototype.getColumnByUid = function (uid) {\n    var Columns = this.initialRender ? this.grid.columns : this.columns;\n    return iterateArrayOrObject(Columns, function (item) {\n      if (item.uid === uid) {\n        return item;\n      }\n\n      return undefined;\n    })[0];\n  };\n  /**\n   * Gets the collection of column fields.\n   *\n   * @returns {string[]} - Returns column field name as collection\n   */\n\n\n  TreeGrid.prototype.getColumnFieldNames = function () {\n    return this.grid.getColumnFieldNames();\n  };\n  /**\n   * Gets the footer div of the TreeGrid.\n   *\n   * @returns {Element} - Returns footer content div element\n   */\n\n\n  TreeGrid.prototype.getFooterContent = function () {\n    return this.grid.getFooterContent();\n  };\n  /**\n   * Gets the footer table element of the TreeGrid.\n   *\n   * @returns {Element} - Returns footer content table element\n   */\n\n\n  TreeGrid.prototype.getFooterContentTable = function () {\n    return this.grid.getFooterContentTable();\n  };\n  /**\n   * Shows a column by its column name.\n   *\n   * @param  {string|string[]} keys - Defines a single or collection of column names.\n   * @param  {string} showBy - Defines the column key either as field name or header text.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.showColumns = function (keys, showBy) {\n    this.grid.showColumns(keys, showBy);\n    this.updateColumnModel();\n  };\n  /**\n   * Hides a column by column name.\n   *\n   * @param  {string|string[]} keys - Defines a single or collection of column names.\n   * @param  {string} hideBy - Defines the column key either as field name or header text.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.hideColumns = function (keys, hideBy) {\n    this.grid.hideColumns(keys, hideBy);\n    this.updateColumnModel();\n  };\n  /**\n   * Gets a column header by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {Element} - Returns column header element\n   */\n\n\n  TreeGrid.prototype.getColumnHeaderByField = function (field) {\n    return this.grid.getColumnHeaderByField(field);\n  };\n  /**\n   * Gets a column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} - Returns column header element\n   */\n\n\n  TreeGrid.prototype.getColumnHeaderByIndex = function (index) {\n    return this.grid.getColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a column header by UID.\n   *\n   * @param {string} uid - Specifies the column uid.\n   * @returns {Element} - Returns column header element\n   */\n\n\n  TreeGrid.prototype.getColumnHeaderByUid = function (uid) {\n    return this.grid.getColumnHeaderByUid(uid);\n  };\n  /**\n   * Gets a column index by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {number} - Returns column index\n   */\n\n\n  TreeGrid.prototype.getColumnIndexByField = function (field) {\n    return this.grid.getColumnIndexByField(field);\n  };\n\n  TreeGrid.prototype.getVirtualColIndexByUid = function (uid) {\n    var columnModel = 'columnModel';\n    var index = iterateArrayOrObject(this.grid[columnModel], function (item, index) {\n      if (item.uid === uid) {\n        return index;\n      }\n\n      return undefined;\n    })[0];\n    return !isNullOrUndefined(index) ? index : -1;\n  };\n  /**\n   * Gets a column index by UID.\n   *\n   * @param  {string} uid - Specifies the column UID.\n   * @returns {number} - Returns column index\n   */\n\n\n  TreeGrid.prototype.getColumnIndexByUid = function (uid) {\n    return this.grid.getColumnIndexByUid(uid);\n  };\n  /**\n   * Gets the columns from the TreeGrid.\n   *\n   * @param {boolean} isRefresh - Defined whether to update DOM\n   * @returns {Column[]} - Returns treegrid columns collection\n   */\n\n\n  TreeGrid.prototype.getColumns = function (isRefresh) {\n    this.updateColumnModel(this.grid.getColumns(isRefresh));\n    return this.columnModel;\n  };\n\n  TreeGrid.prototype.updateColumnModel = function (column) {\n    var temp;\n    var field;\n    var gridColumns = isNullOrUndefined(column) ? this.grid.getColumns() : column;\n\n    if (this.treeColumnIndex !== -1 && this.columnModel[this.treeColumnIndex] && !isNullOrUndefined(this.columnModel[this.treeColumnIndex].template)) {\n      temp = this.columnModel[this.treeColumnIndex].template;\n      field = this.columnModel[this.treeColumnIndex].field;\n    }\n\n    var stackedHeader = false;\n    var gridColumn;\n\n    if (!this.enableColumnVirtualization || this.enableColumnVirtualization && this.columnModel.length === gridColumns.length) {\n      this.columnModel = [];\n\n      for (var i = 0; i < gridColumns.length; i++) {\n        gridColumn = {};\n\n        for (var _i = 0, _a = Object.keys(gridColumns[i]); _i < _a.length; _i++) {\n          var prop = _a[_i];\n          gridColumn[prop] = gridColumns[i][prop];\n        }\n\n        this.columnModel.push(new Column(gridColumn));\n\n        if (field === this.columnModel[i].field && !isNullOrUndefined(temp) && temp !== '') {\n          this.columnModel[i].template = temp;\n        }\n      }\n    }\n\n    var merge = 'deepMerge';\n    this[merge] = ['columns']; // Workaround for blazor updateModel\n\n    if (this.grid.columns.length !== this.columnModel.length) {\n      stackedHeader = true;\n    }\n\n    if (!stackedHeader) {\n      this.setProperties({\n        columns: this.columnModel\n      }, true);\n    }\n\n    this[merge] = undefined; // Workaround for blazor updateModel\n\n    return this.columnModel;\n  };\n  /**\n   * Gets the content div of the TreeGrid.\n   *\n   * @returns {Element} - Return tree grid content element\n   */\n\n\n  TreeGrid.prototype.getContent = function () {\n    return this.grid.getContent();\n  };\n\n  TreeGrid.prototype.mergePersistTreeGridData = function () {\n    var persist1 = 'mergePersistGridData';\n    this.grid[persist1].apply(this);\n  };\n\n  TreeGrid.prototype.mergeColumns = function (storedColumn, columns) {\n    var persist2 = 'mergeColumns';\n    this.grid[persist2].apply(this, [storedColumn, columns]);\n  };\n\n  TreeGrid.prototype.updateTreeGridModel = function () {\n    this.setProperties({\n      filterSettings: getObject('properties', this.grid.filterSettings)\n    }, true);\n    this.setProperties({\n      pageSettings: getObject('properties', this.grid.pageSettings)\n    }, true);\n    this.setProperties({\n      searchSettings: getObject('properties', this.grid.searchSettings)\n    }, true);\n    this.setProperties({\n      sortSettings: getObject('properties', this.grid.sortSettings)\n    }, true);\n  };\n  /**\n   * Gets the content table of the TreeGrid.\n   *\n   * @returns {Element} - Returns content table element\n   */\n\n\n  TreeGrid.prototype.getContentTable = function () {\n    return this.grid.getContentTable();\n  };\n  /**\n   * Gets all the TreeGrid's data rows.\n   *\n   * @returns {Element[]} - Returns row elements\n   */\n\n\n  TreeGrid.prototype.getDataRows = function () {\n    var dRows = [];\n    var rows = this.grid.getDataRows();\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      if (!rows[i].classList.contains('e-summaryrow')) {\n        dRows.push(rows[i]);\n      }\n    }\n\n    return dRows;\n  };\n  /**\n   * Get current visible data of TreeGrid.\n   *\n   * @returns {Object[]} - Returns current view records\n   * @isGenericType true\n   */\n\n\n  TreeGrid.prototype.getCurrentViewRecords = function () {\n    return this.grid.currentViewData;\n  };\n  /**\n   * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n   *\n   * @returns {Object} - Returns batch changes\n   */\n\n\n  TreeGrid.prototype.getBatchChanges = function () {\n    return this.grid.editModule.getBatchChanges();\n  };\n  /**\n   * Gets the header div of the TreeGrid.\n   *\n   * @returns {Element} - Returns Header content element\n   */\n\n\n  TreeGrid.prototype.getHeaderContent = function () {\n    return this.grid.getHeaderContent();\n  };\n  /**\n   * Gets the header table element of the TreeGrid.\n   *\n   * @returns {Element} - Return header table element\n   */\n\n\n  TreeGrid.prototype.getHeaderTable = function () {\n    return this.grid.getHeaderTable();\n  };\n  /**\n   * Gets a row by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} - Returns row element\n   */\n\n\n  TreeGrid.prototype.getRowByIndex = function (index) {\n    return this.grid.getRowByIndex(index);\n  };\n  /**\n   * Get a row information based on cell\n   *\n   * @param {Element | EventTarget} target - Target row element\n   * @returns {RowInfo} - Returns row information in a JSON object\n   */\n\n\n  TreeGrid.prototype.getRowInfo = function (target) {\n    return this.grid.getRowInfo(target);\n  };\n  /**\n   * Gets UID by column name.\n   *\n   * @param  {string} field - Specifies the column name.\n   * @returns {string} - Returns unique id based on column field name given\n   */\n\n\n  TreeGrid.prototype.getUidByColumnField = function (field) {\n    return this.grid.getUidByColumnField(field);\n  };\n  /**\n   * Gets the visible columns from the TreeGrid.\n   *\n   * @returns {Column[]} - Returns visible columns collection\n   */\n\n\n  TreeGrid.prototype.getVisibleColumns = function () {\n    var cols = [];\n\n    for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n      var col = _a[_i];\n\n      if (col.visible) {\n        cols.push(col);\n      }\n    }\n\n    return cols;\n  };\n  /**\n   * By default, TreeGrid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.showSpinner = function () {\n    showSpinner(this.element);\n  };\n  /**\n   * Manually shown spinner needs to hide by `hideSpinnner`.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.hideSpinner = function () {\n    hideSpinner(this.element);\n  };\n  /**\n   * Refreshes the TreeGrid header and content.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.refresh = function () {\n    this.uniqueIDCollection = {};\n    this.convertTreeData(this.dataSource);\n\n    if (!isCountRequired(this)) {\n      this.grid.dataSource = !(this.dataSource instanceof DataManager) ? this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n    }\n\n    this.grid.refresh();\n  };\n  /**\n   * Get the records of checked rows.\n   *\n   * @returns {Object[]} - Returns records that has been checked\n   * @isGenericType true\n   */\n\n\n  TreeGrid.prototype.getCheckedRecords = function () {\n    return this.selectionModule.getCheckedrecords();\n  };\n  /**\n   * Get the visible records corresponding to rows visually displayed.\n   *\n   * @returns {Object[]} - Returns visible records based on collapse state of rows\n   * @isGenericType true\n   */\n\n\n  TreeGrid.prototype.getVisibleRecords = function () {\n    var visibleRecords = [];\n    var currentViewRecords = this.getCurrentViewRecords();\n\n    if (!this.allowPaging) {\n      for (var i = 0; i < currentViewRecords.length; i++) {\n        visibleRecords.push(currentViewRecords[i]);\n\n        if (!currentViewRecords[i].expanded) {\n          i += findChildrenRecords(currentViewRecords[i]).length;\n        }\n      }\n    } else {\n      visibleRecords = currentViewRecords;\n    }\n\n    return visibleRecords;\n  };\n  /**\n   * Get the indexes of checked rows.\n   *\n   * @returns {number[]} - Returns checked row indexes\n   */\n\n\n  TreeGrid.prototype.getCheckedRowIndexes = function () {\n    return this.selectionModule.getCheckedRowIndexes();\n  };\n  /**\n   * Checked the checkboxes using rowIndexes.\n   *\n   * @param {number[]} indexes - row indexes\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.selectCheckboxes = function (indexes) {\n    this.selectionModule.selectCheckboxes(indexes);\n  };\n  /**\n   * Refreshes the TreeGrid column changes.\n   *\n   * @param {boolean} refreshUI - Defined whether to refresh the DOM\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.refreshColumns = function (refreshUI) {\n    if (isNullOrUndefined(refreshUI) || refreshUI) {\n      this.grid.columns = this.getGridColumns(this.columns);\n      this.grid.refreshColumns();\n    } else {\n      this.grid.setProperties({\n        columns: this.getGridColumns(this.columns)\n      }, true);\n    }\n  };\n  /**\n   * Refreshes the TreeGrid header.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.refreshHeader = function () {\n    this.grid.refreshHeader();\n  };\n  /**\n   * Expands or collapse child records\n   *\n   * @param {HTMLElement} target - Expand collapse icon cell as target element\n   * @returns {void}\n   * @hidden\n   */\n\n\n  TreeGrid.prototype.expandCollapseRequest = function (target) {\n    if (this.editSettings.mode === 'Batch') {\n      var obj = 'dialogObj';\n      var showDialog = 'showDialog';\n\n      if (this.getBatchChanges()[this.changedRecords].length || this.getBatchChanges()[this.deletedRecords].length || this.getBatchChanges()[this.addedRecords].length) {\n        var dialogObj = this.grid.editModule[obj];\n        this.grid.editModule[showDialog]('CancelEdit', dialogObj);\n        this.targetElement = target;\n        return;\n      }\n    }\n\n    if (this.rowTemplate) {\n      var rowInfo = target.closest('.e-treerowcell').parentElement;\n      var record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n\n      if (target.classList.contains('e-treegridexpand')) {\n        this.collapseRow(rowInfo, record);\n      } else {\n        this.expandRow(rowInfo, record);\n      }\n    } else {\n      var rowInfo = this.grid.getRowInfo(target);\n      var record = rowInfo.rowData;\n\n      if (this.enableImmutableMode) {\n        record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n      }\n\n      if (target.classList.contains('e-treegridexpand')) {\n        this.collapseRow(rowInfo.row, record);\n      } else {\n        this.expandRow(rowInfo.row, record);\n      }\n    }\n  };\n  /**\n   * Expands child rows\n   *\n   * @param {HTMLTableRowElement} row - Expands the given row\n   * @param {Object} record - Expands the given record\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.expandRow = function (row, record) {\n    var _this = this;\n\n    record = this.getCollapseExpandRecords(row, record);\n\n    if (!isNullOrUndefined(row) && row.cells[0].classList.contains('e-lastrowcell')) {\n      this.lastRowBorder(row, false);\n    }\n\n    var args = {\n      data: record,\n      row: row,\n      cancel: false\n    };\n    this.trigger(events.expanding, args, function (expandingArgs) {\n      if (!expandingArgs.cancel) {\n        _this.expandCollapse('expand', row, record);\n\n        var children = 'Children';\n\n        if (!(isRemoteData(_this) && !isOffline(_this)) && (!isCountRequired(_this) || !isNullOrUndefined(record[children]))) {\n          var collapseArgs = {\n            data: record,\n            row: row\n          };\n\n          _this.setHeightForFrozenContent();\n\n          _this.trigger(events.expanded, collapseArgs);\n        }\n      }\n    });\n  };\n\n  TreeGrid.prototype.setHeightForFrozenContent = function () {\n    var freeze = this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0 ? true : false;\n\n    if (this.grid.getFrozenColumns() > 0 || freeze) {\n      this.grid.contentModule.refreshScrollOffset();\n    }\n  };\n\n  TreeGrid.prototype.getCollapseExpandRecords = function (row, record) {\n    if (this.allowPaging && this.pageSettings.pageSizeMode === 'All' && this.isExpandAll && isNullOrUndefined(record) && !isRemoteData(this)) {\n      record = this.flatData.filter(function (e) {\n        return e.hasChildRecords;\n      });\n    } else if (isNullOrUndefined(record)) {\n      record = this.grid.getCurrentViewRecords()[row.rowIndex];\n    }\n\n    return record;\n  };\n  /**\n   * Collapses child rows\n   *\n   * @param {HTMLTableRowElement} row - Collapse the given row\n   * @param {Object} record - Collapse the given record\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.collapseRow = function (row, record) {\n    var _this = this;\n\n    record = this.getCollapseExpandRecords(row, record);\n    var args = {\n      data: record,\n      row: row,\n      cancel: false\n    };\n    this.trigger(events.collapsing, args, function (collapsingArgs) {\n      if (!collapsingArgs.cancel) {\n        _this.expandCollapse('collapse', row, record);\n\n        var collapseArgs = {\n          data: record,\n          row: row\n        };\n\n        if (!isRemoteData(_this)) {\n          _this.setHeightForFrozenContent();\n\n          _this.trigger(events.collapsed, collapseArgs);\n\n          if (_this.enableInfiniteScrolling) {\n            var scrollHeight = _this.grid.getContent().firstElementChild.scrollHeight;\n\n            var scrollTop = _this.grid.getContent().firstElementChild.scrollTop;\n\n            if (scrollHeight - scrollTop < _this.grid.getRowHeight() + +_this.height) {\n              _this.grid.getContent().firstElementChild.scrollBy(0, _this.grid.getRowHeight());\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Expands the records at specific hierarchical level\n   *\n   * @param {number} level - Expands the parent rows at given level\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.expandAtLevel = function (level) {\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this)) {\n      var rec = this.grid.dataSource.filter(function (e) {\n        if (e.hasChildRecords && e.level === level) {\n          e.expanded = true;\n        }\n\n        return e.hasChildRecords && e.level === level;\n      });\n      this.expandRow(null, rec);\n    } else {\n      var rec = this.getRecordDetails(level);\n      var row = getObject('rows', rec);\n      var record = getObject('records', rec);\n\n      for (var i = 0; i < record.length; i++) {\n        if (record[i].parentItem !== undefined) {\n          var pindex = this.flatData[record[i].parentItem.index].index;\n\n          if (this.flatData[pindex].expanded === false) {\n            record.push(this.flatData[pindex]);\n            this.flatData[pindex].expanded = true;\n          }\n        }\n\n        this.expandRow(row[i], record[i]);\n      }\n    }\n  };\n\n  TreeGrid.prototype.getRecordDetails = function (level) {\n    var rows = this.getRows().filter(function (e) {\n      return e.className.indexOf('level' + level) !== -1 && (e.querySelector('.e-treegridcollapse') || e.querySelector('.e-treegridexpand'));\n    });\n    var records = this.getCurrentViewRecords().filter(function (e) {\n      return e.level === level && e.hasChildRecords;\n    });\n    var obj = {\n      records: records,\n      rows: rows\n    };\n    return obj;\n  };\n  /**\n   * Collapses the records at specific hierarchical level\n   *\n   * @param {number} level - Define the parent row level which needs to be collapsed\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.collapseAtLevel = function (level) {\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this)) {\n      var record = this.grid.dataSource.filter(function (e) {\n        if (e.hasChildRecords && e.level === level) {\n          e.expanded = false;\n        }\n\n        return e.hasChildRecords && e.level === level;\n      });\n      this.collapseRow(null, record);\n    } else {\n      var rec = this.getRecordDetails(level);\n      var rows = getObject('rows', rec);\n      var records = getObject('records', rec);\n\n      for (var i = 0; i < records.length; i++) {\n        this.collapseRow(rows[i], records[i]);\n      }\n    }\n\n    if (!this.grid.contentModule.isDataSourceChanged && this.enableVirtualization && this.getRows() && this.parentData.length === this.getRows().length) {\n      var endIndex = 'endIndex';\n      this.grid.contentModule.startIndex = -1;\n      this.grid.contentModule[endIndex] = -1;\n    }\n  };\n  /**\n   * Expands All the rows\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.expandAll = function () {\n    this.expandCollapseAll('expand');\n  };\n  /**\n   * Collapses All the rows\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.collapseAll = function () {\n    this.expandCollapseAll('collapse');\n  };\n\n  TreeGrid.prototype.expandCollapseAll = function (action) {\n    var rows = this.getRows().filter(function (e) {\n      return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n    });\n\n    if (!rows.length && this.getRows().length) {\n      rows.push(this.getRows()[0]);\n    }\n\n    this.isExpandAll = true;\n    this.isCollapseAll = true;\n\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this)) {\n      this.flatData.filter(function (e) {\n        if (e.hasChildRecords) {\n          e.expanded = action === 'collapse' ? false : true;\n        }\n      });\n\n      if (rows.length) {\n        if (action === 'collapse') {\n          this.collapseRow(rows[0]);\n        } else {\n          this.expandRow(rows[0]);\n        }\n      } else if (this.allowPaging) {\n        var isExpandCollapseall = this.enableCollapseAll;\n        this.setProperties({\n          enableCollapseAll: true\n        }, true);\n        this.grid.pagerModule.goToPage(1);\n        this.setProperties({\n          enableCollapseAll: isExpandCollapseall\n        }, true);\n      }\n    } else {\n      for (var i = 0; i < rows.length; i++) {\n        if (action === 'collapse') {\n          this.collapseRow(rows[i]);\n        } else {\n          this.expandRow(rows[i]);\n        }\n      }\n    }\n\n    this.isExpandAll = false;\n    this.isCollapseAll = false;\n  };\n\n  TreeGrid.prototype.expandCollapse = function (action, row, record, isChild) {\n    var expandingArgs = {\n      row: row,\n      data: record,\n      childData: [],\n      requestType: action\n    };\n    var childRecords = this.getCurrentViewRecords().filter(function (e) {\n      return e.parentUniqueID === record.uniqueID;\n    });\n    var targetEle;\n\n    if (!isRemoteData(this) && action === 'expand' && this.isSelfReference && isCountRequired(this) && !childRecords.length) {\n      this.updateChildOnDemand(expandingArgs);\n    }\n\n    var gridRows = this.getRows();\n\n    if (this.rowTemplate) {\n      var rows = this.getContentTable().rows;\n      gridRows = [].slice.call(rows);\n    }\n\n    var rowIndex;\n\n    if (isNullOrUndefined(row)) {\n      rowIndex = this.getCurrentViewRecords().indexOf(record);\n      row = gridRows[rowIndex];\n    } else {\n      rowIndex = +row.getAttribute('aria-rowindex');\n    }\n\n    if (!isNullOrUndefined(row)) {\n      row.setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n    }\n\n    if ((this.allowPaging && this.pageSettings.pageSizeMode === 'All' || this.enableVirtualization) && !isRemoteData(this) && !isCountRequired(this)) {\n      this.notify(events.localPagedExpandCollapse, {\n        action: action,\n        row: row,\n        record: record\n      });\n    } else {\n      var displayAction = void 0;\n\n      if (action === 'expand') {\n        displayAction = 'table-row';\n\n        if (!isChild) {\n          record.expanded = true;\n          this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n        }\n\n        if (!isNullOrUndefined(row)) {\n          targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n        }\n\n        if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) && record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n          targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n        }\n\n        if (isNullOrUndefined(targetEle)) {\n          return;\n        }\n\n        if (!targetEle.classList.contains('e-treegridexpand')) {\n          addClass([targetEle], 'e-treegridexpand');\n        }\n\n        removeClass([targetEle], 'e-treegridcollapse');\n      } else {\n        displayAction = 'none';\n\n        if (!isChild || isCountRequired(this)) {\n          record.expanded = false;\n          this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n        }\n\n        if (!isNullOrUndefined(row)) {\n          targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n        }\n\n        if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) && !record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n          targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n        }\n\n        if (isNullOrUndefined(targetEle)) {\n          return;\n        }\n\n        if (!targetEle.classList.contains('e-treegridcollapse')) {\n          addClass([targetEle], 'e-treegridcollapse');\n        }\n\n        removeClass([targetEle], 'e-treegridexpand');\n      }\n\n      var detailrows = gridRows.filter(function (r) {\n        return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n      });\n\n      if (isRemoteData(this) && !isOffline(this)) {\n        this.remoteExpand(action, row, record);\n      } else {\n        if (!isCountRequired(this) || childRecords.length || action === 'collapse') {\n          this.localExpand(action, row, record);\n        }\n      }\n\n      if (this.isPixelHeight() && !row.cells[0].classList.contains('e-lastrowcell')) {\n        var totalRows = this.getRows();\n        var rows = this.getContentTable().rows;\n        totalRows = [].slice.call(rows);\n\n        for (var i = totalRows.length - 1; i > 0; i--) {\n          if (!isHidden(totalRows[i])) {\n            var table = this.getContentTable();\n            var sHeight = table.scrollHeight;\n            var clientHeight = this.getContent().clientHeight;\n            this.lastRowBorder(totalRows[i], sHeight <= clientHeight);\n            break;\n          }\n        }\n      }\n\n      this.notify('rowExpandCollapse', {\n        detailrows: detailrows,\n        action: displayAction,\n        record: record,\n        row: row\n      });\n      this.updateAltRow(gridRows);\n    }\n  };\n\n  TreeGrid.prototype.updateChildOnDemand = function (expandingArgs) {\n    var _this = this;\n\n    var deff = new Deferred();\n    var childDataBind = 'childDataBind';\n    expandingArgs[childDataBind] = deff.resolve;\n    var record = expandingArgs.data;\n    this.trigger(events.dataStateChange, expandingArgs);\n    deff.promise.then(function () {\n      if (expandingArgs.childData.length) {\n        var currentData = _this.flatData;\n        var index = 0;\n\n        for (var i = 0; i < currentData.length; i++) {\n          if (currentData[i].taskData === record.taskData) {\n            index = i;\n            break;\n          }\n        }\n\n        var data_1 = getValue('result', _this.dataSource);\n        var childData = extendArray(expandingArgs.childData);\n        var length_1 = record[_this.childMapping] ? record[_this.childMapping].length > childData.length ? record[_this.childMapping].length : childData.length : childData.length;\n\n        for (var i = 0; i < length_1; i++) {\n          if (record[_this.childMapping]) {\n            data_1.filter(function (e, i) {\n              if (e[_this.parentIdMapping] === record[_this.idMapping]) {\n                data_1.splice(i, 1);\n              }\n            });\n          }\n\n          if (childData[i]) {\n            childData[i].level = record.level + 1;\n            childData[i].index = Math.ceil(Math.random() * 1000);\n            childData[i].parentItem = extend({}, record);\n            childData[i].taskData = extend({}, childData[i]);\n            delete childData[i].parentItem.childRecords;\n            delete childData[i].taskData.parentItem;\n            childData[i].parentUniqueID = record.uniqueID;\n            childData[i].uniqueID = getUid(_this.element.id + '_data_');\n            setValue('uniqueIDCollection.' + childData[i].uniqueID, childData[i], _this);\n\n            if (!isNullOrUndefined(childData[i][_this.childMapping]) || childData[i][_this.hasChildMapping] && isCountRequired(_this)) {\n              childData[i].hasChildRecords = true;\n            }\n\n            currentData.splice(index + 1 + i, record[_this.childMapping] && record[_this.childMapping][i] ? 1 : 0, childData[i]);\n          } else {\n            currentData.splice(index + 1 + i, 1);\n          }\n        }\n\n        currentData[index][_this.childMapping] = childData;\n        currentData[index].childRecords = childData;\n        currentData[index].expanded = true;\n        setValue('uniqueIDCollection.' + currentData[index].uniqueID, currentData[index], _this);\n\n        for (var j = 0; j < expandingArgs.childData.length; j++) {\n          data_1.push(expandingArgs.childData[j]);\n        }\n      }\n\n      _this.isExpandRefresh = true;\n\n      _this.grid.refresh();\n\n      _this.setHeightForFrozenContent();\n\n      _this.trigger(events.expanded, expandingArgs);\n    });\n  };\n\n  TreeGrid.prototype.remoteExpand = function (action, row, record) {\n    var gridRows = this.getRows();\n\n    if (this.rowTemplate) {\n      var rows_1 = this.getContentTable().rows;\n      gridRows = [].slice.call(rows_1);\n    }\n\n    var args = {\n      data: record,\n      row: row\n    };\n    var rows = [];\n    rows = gridRows.filter(function (r) {\n      return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n    });\n\n    if (action === 'expand') {\n      this.notify(events.remoteExpand, {\n        record: record,\n        rows: rows,\n        parentRow: row\n      });\n      var args_1 = {\n        row: row,\n        data: record\n      };\n\n      if (rows.length > 0) {\n        this.setHeightForFrozenContent();\n        this.trigger(events.expanded, args_1);\n      }\n    } else {\n      this.collapseRemoteChild({\n        record: record,\n        rows: rows\n      });\n      this.setHeightForFrozenContent();\n      this.trigger(events.collapsed, args);\n    }\n  };\n\n  TreeGrid.prototype.localExpand = function (action, row, record) {\n    var rows;\n    var childRecords = this.getCurrentViewRecords().filter(function (e) {\n      return e.parentUniqueID === record.uniqueID;\n    });\n\n    if (this.isPixelHeight() && row.cells[0].classList.contains('e-lastrowcell')) {\n      this.lastRowBorder(row, false);\n    }\n\n    var movableRows;\n    var freezeRightRows;\n    var gridRows = this.getRows();\n\n    if (this.rowTemplate) {\n      var rows_2 = this.getContentTable().rows;\n      gridRows = [].slice.call(rows_2);\n    }\n\n    var displayAction = action === 'expand' ? 'table-row' : 'none';\n    var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n\n    if (this.enableImmutableMode && !this.allowPaging) {\n      rows = [];\n\n      for (var i = 0; i < childRecords.length; i++) {\n        var rowIndex = this.grid.getRowIndexByPrimaryKey(childRecords[i][primaryKeyField]);\n        rows.push(this.getRows()[rowIndex]);\n      }\n    } else {\n      rows = gridRows.filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n\n    var freeze = this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0 ? true : false;\n\n    if (this.frozenRows || this.frozenColumns || this.getFrozenColumns() || freeze) {\n      movableRows = this.getMovableRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n\n    if (freeze) {\n      freezeRightRows = this.getFrozenRightRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n      });\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      if (!isNullOrUndefined(rows[i])) {\n        rows[i].style.display = displayAction;\n      }\n\n      if (!isNullOrUndefined(movableRows)) {\n        movableRows[i].style.display = displayAction;\n      }\n\n      if (!isNullOrUndefined(freezeRightRows)) {\n        freezeRightRows[i].style.display = displayAction;\n      }\n\n      this.notify('childRowExpand', {\n        row: rows[i]\n      });\n\n      if (!isNullOrUndefined(childRecords[i].childRecords) && (action !== 'expand' || isNullOrUndefined(childRecords[i].expanded) || childRecords[i].expanded)) {\n        this.expandCollapse(action, rows[i], childRecords[i], true);\n\n        if (this.frozenColumns <= this.treeColumnIndex && !isNullOrUndefined(movableRows)) {\n          this.expandCollapse(action, movableRows[i], childRecords[i], true);\n        }\n      }\n    }\n  };\n\n  TreeGrid.prototype.updateAltRow = function (rows) {\n    if (this.enableAltRow && !this.rowTemplate) {\n      var visibleRowCount = 0;\n\n      for (var i = 0; rows && i < rows.length; i++) {\n        var gridRow = rows[i];\n\n        if (gridRow.style.display !== 'none') {\n          if (gridRow.classList.contains('e-altrow')) {\n            removeClass([gridRow], 'e-altrow');\n          }\n\n          if (visibleRowCount % 2 !== 0 && !gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n            addClass([gridRow], 'e-altrow');\n          }\n\n          if (!gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n            visibleRowCount++;\n          }\n        }\n      }\n    }\n  };\n\n  TreeGrid.prototype.treeColumnRowTemplate = function () {\n    if (this.rowTemplate) {\n      var rows = this.getContentTable().rows;\n      rows = [].slice.call(rows);\n\n      for (var i = 0; i < rows.length; i++) {\n        var rcell = this.grid.getContentTable().rows[i].cells[this.treeColumnIndex];\n        var row = rows[i];\n        var rowData = this.grid.getRowsObject()[i].data;\n        var arg = {\n          data: rowData,\n          row: row,\n          cell: rcell,\n          column: this.getColumns()[this.treeColumnIndex]\n        };\n        this.renderModule.cellRender(arg);\n      }\n    }\n  };\n\n  TreeGrid.prototype.collapseRemoteChild = function (rowDetails, isChild) {\n    if (!isChild) {\n      rowDetails.record.expanded = false;\n    }\n\n    var rows = rowDetails.rows;\n    var row;\n    var childRecord;\n    var movablerows = [];\n    var rightrows = [];\n    var freeze = this.getFrozenLeftColumnsCount() > 0 || this.getFrozenRightColumnsCount() > 0 ? true : false;\n\n    if (freeze) {\n      movablerows = this.getMovableRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n      });\n      rightrows = this.getFrozenRightRows().filter(function (r) {\n        return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n      });\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      rows[i].style.display = 'none';\n      row = rows[i];\n      var collapsingTd = rows[i].querySelector('.e-detailrowexpand');\n\n      if (!isNullOrUndefined(collapsingTd)) {\n        this.grid.detailRowModule.collapse(collapsingTd);\n      }\n\n      if (freeze) {\n        movablerows[i].style.display = 'none';\n        rightrows[i].style.display = 'none';\n\n        if (!rows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n          if (movablerows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n            row = movablerows[i];\n          } else if (rightrows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n            row = rightrows[i];\n          }\n        }\n      }\n\n      if (row.querySelector('.e-treecolumn-container .e-treegridexpand')) {\n        var expandElement = row.querySelector('.e-treecolumn-container .e-treegridexpand');\n        childRecord = this.rowTemplate ? this.grid.getCurrentViewRecords()[rows[i].rowIndex] : this.grid.getRowObjectFromUID(rows[i].getAttribute('data-Uid')).data;\n\n        if (!isNullOrUndefined(expandElement) && childRecord.expanded) {\n          removeClass([expandElement], 'e-treegridexpand');\n          addClass([expandElement], 'e-treegridcollapse');\n        }\n\n        var cRow = [];\n        var eRows = this.getRows();\n\n        for (var i_1 = 0; i_1 < eRows.length; i_1++) {\n          if (eRows[i_1].querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1))) {\n            cRow.push(eRows[i_1]);\n          }\n        }\n\n        if (cRow.length && childRecord.expanded) {\n          this.collapseRemoteChild({\n            record: childRecord,\n            rows: cRow\n          }, true);\n        }\n      }\n    }\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.addListener = function () {\n    this.on('updateResults', this.updateResultModel, this);\n    this.grid.on('initial-end', this.afterGridRender, this);\n  };\n\n  TreeGrid.prototype.updateResultModel = function (returnResult) {\n    this.dataResults = returnResult;\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.removeListener = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    this.off('updateResults', this.updateResultModel);\n    this.grid.off('initial-end', this.afterGridRender);\n  };\n  /**\n   * Filters TreeGrid row by column name with the given options.\n   *\n   * @param  {string} fieldName - Defines the field name of the column.\n   * @param  {string} filterOperator - Defines the operator to filter records.\n   * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.\n   * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.\n   * @param  {boolean} matchCase - If match case is set to true, the TreeGrid filters the records with exact match. if false, it filters\n   * case insensitive records (uppercase and lowercase letters are treated the same).\n   * @param  {boolean} ignoreAccent - If ignoreAccent is set to true,\n   * then filter ignores diacritic characters or accents while filtering.\n   * @param  {string} actualFilterValue - Defines the actual filter value for filter column.\n   * @param  {string} actualOperator - Defines the actual filter operator for filter column.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n    this.grid.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n  };\n  /**\n   * Clears all the filtered rows of the TreeGrid.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.clearFiltering = function () {\n    this.grid.clearFiltering();\n  };\n  /**\n   * Removes filtered column by field name.\n   *\n   * @param  {string} field - Defines column field name to remove filter.\n   * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  TreeGrid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n    this.grid.removeFilteredColsByField(field, isClearFilterBar);\n  };\n  /**\n   * Selects a row by given index.\n   *\n   * @param  {number} index - Defines the row index.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.selectRow = function (index, isToggle) {\n    this.grid.selectRow(index, isToggle);\n  };\n  /**\n   * Selects a collection of rows by indexes.\n   *\n   * @param  {number[]} rowIndexes - Specifies the row indexes.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.selectRows = function (rowIndexes) {\n    this.grid.selectRows(rowIndexes);\n  };\n  /**\n   * Deselects the current selected rows and cells.\n   *\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.clearSelection = function () {\n    this.grid.clearSelection();\n  };\n  /**\n   * Copy the selected rows or cells data into clipboard.\n   *\n   * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.copy = function (withHeader) {\n    this.clipboardModule.copy(withHeader);\n  };\n  /**\n   * Paste data from clipboard to selected cells.\n   *\n   * @param {boolean} data - Specifies the date for paste.\n   * @param {boolean} rowIndex - Specifies the row index.\n   * @param {boolean} colIndex - Specifies the column index.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.paste = function (data, rowIndex, colIndex) {\n    this.clipboardModule.paste(data, rowIndex, colIndex);\n  };\n  /**\n   * Selects a cell by the given index.\n   *\n   * @param  {IIndex} cellIndex - Defines the row and column indexes.\n   * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.selectCell = function (cellIndex, isToggle) {\n    this.grid.selectCell(cellIndex, isToggle);\n  };\n  /**\n   * Gets the collection of selected rows.\n   *\n   * @returns {Element[]} - Returns selected row elements collection\n   */\n\n\n  TreeGrid.prototype.getSelectedRows = function () {\n    return this.grid.getSelectedRows();\n  };\n  /**\n   * Gets a movable table cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} - Returns movable cell element from the indexes passed\n   */\n\n\n  TreeGrid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getMovableCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets all the TreeGrid's movable table data rows.\n   *\n   * @returns {Element[]} - Returns element collection of movable rows\n   */\n\n\n  TreeGrid.prototype.getMovableDataRows = function () {\n    return this.grid.getMovableDataRows();\n  };\n  /**\n   * Gets a movable tables row by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} - Returns movable row based on index passed\n   */\n\n\n  TreeGrid.prototype.getMovableRowByIndex = function (index) {\n    return this.grid.getMovableRowByIndex(index);\n  };\n  /**\n   * Gets the TreeGrid's movable content rows from frozen treegrid.\n   *\n   * @returns {Element[]}: Returns movable row element\n   */\n\n\n  TreeGrid.prototype.getMovableRows = function () {\n    return this.grid.getMovableRows();\n  };\n  /**\n   * Gets a frozen right tables row element by index.\n   *\n   * @param  {number} index - Specifies the row index.\n   * @returns {Element} returns the element\n   */\n\n\n  TreeGrid.prototype.getFrozenRightRowByIndex = function (index) {\n    return this.grid.getFrozenRightRowByIndex(index);\n  };\n  /**\n   * Gets the Tree Grid's frozen right content rows from frozen Tree Grid.\n   *\n   * @returns {Element[]} returns the element\n   */\n\n\n  TreeGrid.prototype.getFrozenRightRows = function () {\n    return this.grid.getFrozenRightRows();\n  };\n  /**\n   * Gets all the Tree Grid's frozen right table data rows.\n   *\n   * @returns {Element[]} Returns the Element\n   */\n\n\n  TreeGrid.prototype.getFrozenRightDataRows = function () {\n    return this.grid.getFrozenRightDataRows();\n  };\n  /**\n   * Gets a frozen right table cell by row and column index.\n   *\n   * @param  {number} rowIndex - Specifies the row index.\n   * @param  {number} columnIndex - Specifies the column index.\n   * @returns {Element} Returns the Element\n   */\n\n\n  TreeGrid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n    return this.grid.getFrozenRightCellFromIndex(rowIndex, columnIndex);\n  };\n  /**\n   * Gets a frozen left column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   */\n\n\n  TreeGrid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n    return this.grid.getFrozenLeftColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a frozen right column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   */\n\n\n  TreeGrid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n    return this.grid.getFrozenRightColumnHeaderByIndex(index);\n  };\n  /**\n   * Gets a movable column header by column index.\n   *\n   * @param  {number} index - Specifies the column index.\n   * @returns {Element} Returns the Element\n   */\n\n\n  TreeGrid.prototype.getMovableColumnHeaderByIndex = function (index) {\n    return this.grid.getMovableColumnHeaderByIndex(index);\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the movable column count\n   */\n\n\n  TreeGrid.prototype.getMovableColumnsCount = function () {\n    return this.grid.getMovableColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the Frozen Left column\n   */\n\n\n  TreeGrid.prototype.getFrozenLeftColumnsCount = function () {\n    return this.grid.getFrozenLeftColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the Frozen Right column count\n   */\n\n\n  TreeGrid.prototype.getFrozenRightColumnsCount = function () {\n    return this.grid.getFrozenRightColumnsCount();\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n\n\n  TreeGrid.prototype.getFrozenLeftColumns = function () {\n    this.updateColumnModel(this.grid.getFrozenLeftColumns());\n    return this.columnModel;\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n\n\n  TreeGrid.prototype.getFrozenRightColumns = function () {\n    this.updateColumnModel(this.grid.getFrozenRightColumns());\n    return this.columnModel;\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible movable count\n   */\n\n\n  TreeGrid.prototype.getVisibleMovableCount = function () {\n    return this.grid.getVisibleMovableCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible Frozen Right count\n   */\n\n\n  TreeGrid.prototype.getVisibleFrozenRightCount = function () {\n    return this.grid.getVisibleFrozenRightCount();\n  };\n  /**\n   * @hidden\n   * @returns {number} Returns the visible Frozen left count\n   */\n\n\n  TreeGrid.prototype.getVisibleFrozenLeftCount = function () {\n    return this.grid.getVisibleFrozenLeftCount();\n  };\n  /**\n   * @hidden\n   * @returns {Column[]} Returns the column\n   */\n\n\n  TreeGrid.prototype.getMovableColumns = function () {\n    this.updateColumnModel(this.grid.getMovableColumns());\n    return this.columnModel;\n  };\n  /**\n   * Gets the number of frozen column in tree grid\n   *\n   * @hidden\n   * @returns {number} - Returns frozen column count\n   */\n\n\n  TreeGrid.prototype.getFrozenColumns = function () {\n    return this.getFrozenCount(this.columns, 0) + this.frozenColumns;\n  };\n\n  TreeGrid.prototype.getFrozenCount = function (cols, cnt) {\n    for (var j = 0, len = cols.length; j < len; j++) {\n      if (cols[j].columns) {\n        cnt = this.getFrozenCount(cols[j].columns, cnt);\n      } else {\n        if (cols[j].isFrozen) {\n          cnt++;\n        }\n      }\n    }\n\n    return cnt;\n  };\n  /**\n   * Gets the collection of selected row indexes.\n   *\n   * @returns {number[]} - Returns selected rows index collection\n   */\n\n\n  TreeGrid.prototype.getSelectedRowIndexes = function () {\n    return this.grid.getSelectedRowIndexes();\n  };\n  /**\n   * Gets the collection of selected row and cell indexes.\n   *\n   * @returns {ISelectedCell[]} - Returns selected cell's index details\n   */\n\n\n  TreeGrid.prototype.getSelectedRowCellIndexes = function () {\n    return this.grid.getSelectedRowCellIndexes();\n  };\n  /**\n   * Gets the collection of selected records.\n   *\n   * @isGenericType true\n   * @returns {Object[]} - Returns selected records collection\n   */\n\n\n  TreeGrid.prototype.getSelectedRecords = function () {\n    return this.grid.getSelectedRecords();\n  };\n  /**\n   * Gets the data module.\n   *\n   * @returns {{baseModule: Data, treeModule: DataManipulation}}: Returns grid and treegrid data module\n   */\n\n\n  TreeGrid.prototype.getDataModule = function () {\n    return {\n      baseModule: this.grid.getDataModule(),\n      treeModule: this.dataModule\n    };\n  };\n  /**\n   * Reorder the rows based on given indexes and position\n   *\n   * @param {number[]} fromIndexes - Source indexes of rows\n   * @param {number} toIndex - Destination index of row\n   * @param {string} position - Defines drop position as above or below or child\n   * @returns {void}\n   */\n\n\n  TreeGrid.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n    this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex, position);\n  };\n\n  var TreeGrid_1;\n\n  __decorate([Property(0)], TreeGrid.prototype, \"frozenRows\", void 0);\n\n  __decorate([Property(0)], TreeGrid.prototype, \"frozenColumns\", void 0);\n\n  __decorate([Property('Ellipsis')], TreeGrid.prototype, \"clipMode\", void 0);\n\n  __decorate([Property([])], TreeGrid.prototype, \"columns\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"childMapping\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"hasChildMapping\", void 0);\n\n  __decorate([Property(0)], TreeGrid.prototype, \"treeColumnIndex\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"idMapping\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"parentIdMapping\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableCollapseAll\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"expandStateMapping\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowRowDragAndDrop\", void 0);\n\n  __decorate([Property([])], TreeGrid.prototype, \"dataSource\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"query\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"cloneQuery\", void 0);\n\n  __decorate([Property('AllPages')], TreeGrid.prototype, \"printMode\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowPaging\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"loadChildOnDemand\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowTextWrap\", void 0);\n\n  __decorate([Complex({}, TextWrapSettings)], TreeGrid.prototype, \"textWrapSettings\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowReordering\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowResizing\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"autoCheckHierarchy\", void 0);\n\n  __decorate([Complex({}, PageSettings)], TreeGrid.prototype, \"pageSettings\", void 0);\n\n  __decorate([Complex({}, RowDropSettings)], TreeGrid.prototype, \"rowDropSettings\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"pagerTemplate\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"showColumnMenu\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"showColumnChooser\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowSorting\", void 0);\n\n  __decorate([Property(true)], TreeGrid.prototype, \"allowMultiSorting\", void 0);\n\n  __decorate([Complex({}, SortSettings)], TreeGrid.prototype, \"sortSettings\", void 0);\n\n  __decorate([Collection([], AggregateRow)], TreeGrid.prototype, \"aggregates\", void 0);\n\n  __decorate([Complex({}, EditSettings)], TreeGrid.prototype, \"editSettings\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowFiltering\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"detailTemplate\", void 0);\n\n  __decorate([Complex({}, FilterSettings)], TreeGrid.prototype, \"filterSettings\", void 0);\n\n  __decorate([Complex({}, SearchSettings)], TreeGrid.prototype, \"searchSettings\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"toolbar\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"toolbarTemplate\", void 0);\n\n  __decorate([Property('Default')], TreeGrid.prototype, \"gridLines\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"contextMenuItems\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"columnMenuItems\", void 0);\n\n  __decorate([Property()], TreeGrid.prototype, \"rowTemplate\", void 0);\n\n  __decorate([Property('Parent')], TreeGrid.prototype, \"copyHierarchyMode\", void 0);\n\n  __decorate([Property(null)], TreeGrid.prototype, \"rowHeight\", void 0);\n\n  __decorate([Property(true)], TreeGrid.prototype, \"enableAltRow\", void 0);\n\n  __decorate([Property(true)], TreeGrid.prototype, \"allowKeyboard\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableHover\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableAutoFill\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableImmutableMode\", void 0);\n\n  __decorate([Property('auto')], TreeGrid.prototype, \"height\", void 0);\n\n  __decorate([Property('auto')], TreeGrid.prototype, \"width\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableVirtualization\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableColumnVirtualization\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"enableInfiniteScrolling\", void 0);\n\n  __decorate([Complex({}, InfiniteScrollSettings)], TreeGrid.prototype, \"infiniteScrollSettings\", void 0);\n\n  __decorate([Property('All')], TreeGrid.prototype, \"columnQueryMode\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"load\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"expanding\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"expanded\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"collapsing\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"collapsed\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellSave\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellSaved\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beginEdit\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"batchAdd\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"batchDelete\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"batchCancel\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchAdd\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchDelete\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeBatchSave\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellEdit\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"dataStateChange\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"recordDoubleClick\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDataBound\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"detailDataBound\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"queryCellInfo\", void 0);\n\n  __decorate([Property(true)], TreeGrid.prototype, \"allowSelection\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowSelecting\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowSelected\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDeselecting\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDeselected\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"headerCellInfo\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellSelecting\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"columnMenuOpen\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"columnMenuClick\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellSelected\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellDeselecting\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"cellDeselected\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"resizing\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"columnDragStart\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"columnDrag\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"columnDrop\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"checkboxChange\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"printComplete\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforePrint\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"toolbarClick\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeDataBound\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"contextMenuOpen\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"contextMenuClick\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeCopy\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforePaste\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDrag\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDragStart\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDragStartHelper\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"rowDrop\", void 0);\n\n  __decorate([Property(-1)], TreeGrid.prototype, \"selectedRowIndex\", void 0);\n\n  __decorate([Complex({}, SelectionSettings)], TreeGrid.prototype, \"selectionSettings\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowExcelExport\", void 0);\n\n  __decorate([Property(false)], TreeGrid.prototype, \"allowPdfExport\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"pdfQueryCellInfo\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"excelQueryCellInfo\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforeExcelExport\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"excelExportComplete\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"beforePdfExport\", void 0);\n\n  __decorate([Event()], TreeGrid.prototype, \"pdfExportComplete\", void 0);\n\n  TreeGrid = TreeGrid_1 = __decorate([NotifyPropertyChanges], TreeGrid);\n  return TreeGrid;\n}(Component);\n\nexport { TreeGrid };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-treegrid/src/treegrid/base/treegrid.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","addClass","createElement","EventHandler","isNullOrUndefined","extend","removeClass","Complex","Collection","getValue","Event","Property","NotifyPropertyChanges","setValue","KeyboardEvents","L10n","Column","RowDropSettings","getUid","FilterSettings","TextWrapSettings","Logger","TreeLogger","TreeClipboard","Selection","TreeGridSelection","Print","events","SearchSettings","SelectionSettings","getActualProperties","getObject","DataManager","RemoteSaveAdaptor","JsonAdaptor","Deferred","createSpinner","hideSpinner","showSpinner","isRemoteData","isOffline","extendArray","isCountRequired","findChildrenRecords","Grid","Render","DataManipulation","iterateArrayOrObject","ToolbarItem","ContextMenuItems","PageSettings","AggregateRow","EditSettings","SortSettings","isHidden","editAction","InfiniteScrollSettings","TreeGrid","_super","options","element","_this","call","dataResults","uniqueIDCollection","uniqueIDFilterCollection","changedRecords","deletedRecords","addedRecords","objectEqualityChecker","old","current","keys","isEqual","excludeKeys","indexOf","isDate","Date","getTime","TreeGrid_1","Inject","mergePersistTreeGridData","logger","injectedModules","grid","excelExport","excelExportProperties","isMultipleExport","workbook","isBlob","excelExportModule","Map","csvExport","pdfExport","pdfExportProperties","pdfDoc","pdfExportModule","getModuleName","preRender","TreeGridLocale","initProperties","defaultLocale","Above","Below","Child","AddRow","ExpandAll","CollapseAll","RowIndent","RowOutdent","l10n","locale","isSelfReference","childMapping","sortByColumn","columnName","direction","isMultiSort","sortModule","sortColumn","clearSorting","removeSortColumn","field","search","searchString","autoFitColumns","fieldNames","resizeModule","updateColumnModel","reorderColumns","fromFName","toFName","localeObject","gridLocale","treeGridLocale","load","print","printModule","treeGridkeyActionHandler","e","allowKeyboard","parentTarget","column","row","summaryElement","action","expandAll","collapseAll","closest","undefined","expandCollapseRequest","querySelector","enableVirtualization","parentElement","findnextRowElement","rowIndex","selectRow","cellIndex","row_1","children","clearSelection","findPreviousRowElement","rIndex","cIndex","rows","summaryRowElement","rowElement","nextElementSibling","className","style","display","previousElementSibling","flatData","parentData","columnModel","isExpandAll","isCollapseAll","keyConfigs","ctrlDownArrow","ctrlUpArrow","ctrlShiftUpArrow","ctrlShiftDownArrow","downArrow","upArrow","isLocalData","dataSource","offline","ready","adaptor","parentIdMapping","wireEvents","add","mouseClickHandler","keyboardModule","keyAction","bind","eventName","tabIndex","requiredModules","modules","splitFrozenCount","getGridColumns","columns","isDestroyed","push","member","args","filterSettings","toolbar","contextMenuItems","allowPaging","pageSettings","allowReordering","allowSorting","aggregates","allowExcelExport","frozenColumns","frozenRows","getFrozenColumns","getFrozenLeftColumnsCount","getFrozenRightColumnsCount","detailTemplate","allowPdfExport","showColumnMenu","showColumnChooser","extendRequiredModules","allowRowDragAndDrop","editSettings","allowAdding","allowDeleting","allowEditing","isCommandColumn","allowSelection","enableInfiniteScrolling","some","col","commands","commandsTemplate","unwireEvents","remove","log","types","loggerModule","treeLog","render","isReact","portals","renderModule","dataModule","trigger","autoGenerateColumns","initialRender","convertTreeData","loadGrid","classList","contains","rowDropSettings","targetID","addListener","gridContainer","id","height","width","appendChild","gridRequiredModules","apply","appendTo","renderComplete","destroyTemplate","destroyTemplateFn","index","clearTemplate","afterGridRender","clipboardModule","destroy","data","filter","uniqueID","level","griddata","convertToFlatData","bindGridProperties","bindedDataSource","enableRtl","query","columnQueryMode","pagerTemplate","allowFiltering","enableColumnVirtualization","infiniteScrollSettings","enableAltRow","allowTextWrap","allowResizing","enableHover","enableAutoFill","enableImmutableMode","rowHeight","gridLines","getGridToolbar","toolbarTemplate","selectionSettings","sortSettings","searchSettings","textWrapSettings","printMode","selectedRowIndex","getContextMenu","columnMenuItems","getGridEditSettings","rowTemplate","clipMode","templateInstance","isJsComponent","triggerEvents","bindGridEvents","rowSelecting","cancel","rowSelected","notify","rowDeselected","resizeStop","excelQueryCellInfo","pdfQueryCellInfo","checkBoxChange","checkboxChange","pdfExportComplete","excelExportComplete","excelHeaderQueryCellInfo","pdfHeaderQueryCellInfo","dataSourceChanged","recordDoubleClick","rowDeselecting","cellDeselected","cellDeselecting","columnMenuOpen","columnMenuClick","cellSelected","headerCellInfo","resizeStart","resizing","columnDrag","columnDragStart","columnDrop","beforePrint","beforeCopy","beforePaste","getRows","on","printComplete","actionFailure","extendedGridDataBoundEvent","extendedGridEvents","extendedGridActionEvents","extendedGridEditEvents","bindGridDragEvents","bindCallBackEvents","lastRowBorder","visiblerow","isAddBorder","j","cells","isPixelHeight","toString","dataBound","updateRowTemplate","updateAltRow","hasChildMapping","req","httpRequest","statusText","getContentTable","totalRows","slice","treeGrid","beforeDataBound","requestType","dm","json","result","isPrinting","contentModule","callBackPromise_1","beforeDataBoundArgs","resolve","type","toolbarClick","item","callBackPromise","toolbarargs","cellSelecting","cellselectingArgs","beginEdit","begineditArgs","dataStateChange","isExpandRefresh","count","cellSave","isContextMenuOpen","contextitems","contextMenuModule","contextMenu","getElementsByClassName","cellsaveArgs","cellSaved","cellEdit","prom","promise","batchAdd","beforeBatchSave","beforeBatchAdd","batchDelete","beforeBatchDelete","batchCancel","mode","treeColumnRowTemplate","isDataAvailable","datacount","defaultQuery","proxy_1","then","actionBegin","filterModule","setProperties","dataManager","actionArgs","actionComplete","updateTreeGridModel","newRowPosition","beginAdd","batchSave","map","ag","showChildSummary","refresh","detailDataBound","rowDataBound","RowModifier","queryCellInfo","cellRender","contextMenuClick","contextMenuOpen","rowDragStartHelper","rowDragStart","rowDrag","isEdit","rowdraging","rowDrop","rowDropped","registeredTemplate","ref","isRemote","record","edit","guid","allowEditOnDblClick","showConfirmDialog","template","showDeleteConfirmDialog","allowNextRowEdit","dialog","items","text","getConstant","tooltipText","Search","prefixIcon","isEmptyColumnModel","stackedColumn","treeGridColumn","gridColumn","gridColumnCollection","treeColumn","getColumnByUid","uid","_i","_a","prop","treeColumnIndex","onPropertyChanged","newProp","properties","requireRefresh","properties_1","refreshColumns","allowMultiSorting","isDataSourceChanged","removeEventListener","eventListener","renderTable","closeEdit","treeGridElement","hasTreeGridChild","removeListener","innerHTML","dataBind","document","getElementById","getPersistData","keyEntity","ignoreOnPersist","ignoreOnColumn","currentObject","k","val","objVal","ignoreInArrays","addOnPersist","ignoreInColumn","touches","isEditCollapse","getPager","addRecord","position","editModule","isAddedRowByMethod","saveCell","updateCell","value","updateRow","getCurrentViewRecords","deleteRecord","fieldName","startEdit","editCell","enableToolbarItems","isEnable","toolbarModule","enableItems","endEdit","openColumnChooser","x","y","columnChooserModule","deleteRow","tr","getPrimaryKeyFieldNames","setCellValue","getRowIndexByPrimaryKey","setRowData","rowData","currentRecords","primaryKey","childRecords","taskData","parentItem","checkboxState","hasChildRecords","parentUniqueID","expanded","goToPage","pageNo","pagerModule","updateExternalMessage","message","getCellFromIndex","columnIndex","getColumnByField","Columns","getColumnFieldNames","getFooterContent","getFooterContentTable","showColumns","showBy","hideColumns","hideBy","getColumnHeaderByField","getColumnHeaderByIndex","getColumnHeaderByUid","getColumnIndexByField","getVirtualColIndexByUid","getColumnIndexByUid","getColumns","isRefresh","temp","gridColumns","stackedHeader","merge","getContent","persist1","mergeColumns","storedColumn","persist2","getDataRows","dRows","len","currentViewData","getBatchChanges","getHeaderContent","getHeaderTable","getRowByIndex","getRowInfo","getUidByColumnField","getVisibleColumns","cols","visible","getCheckedRecords","selectionModule","getCheckedrecords","getVisibleRecords","visibleRecords","currentViewRecords","getCheckedRowIndexes","selectCheckboxes","indexes","refreshUI","refreshHeader","obj","showDialog","dialogObj","targetElement","rowInfo","collapseRow","expandRow","getCollapseExpandRecords","expanding","expandingArgs","expandCollapse","collapseArgs","setHeightForFrozenContent","freeze","refreshScrollOffset","pageSizeMode","collapsing","collapsingArgs","collapsed","scrollHeight","firstElementChild","scrollTop","getRowHeight","scrollBy","expandAtLevel","rec","getRecordDetails","pindex","records","collapseAtLevel","endIndex","startIndex","expandCollapseAll","isExpandCollapseall","enableCollapseAll","isChild","childData","targetEle","updateChildOnDemand","gridRows","getAttribute","setAttribute","localPagedExpandCollapse","displayAction","expandStateMapping","detailrows","remoteExpand","localExpand","table","sHeight","clientHeight","deff","childDataBind","currentData","data_1","length_1","idMapping","splice","Math","ceil","random","rows_1","parentRow","args_1","collapseRemoteChild","movableRows","freezeRightRows","rows_2","primaryKeyField","getMovableRows","getFrozenRightRows","visibleRowCount","gridRow","rcell","getRowsObject","arg","cell","rowDetails","childRecord","movablerows","rightrows","collapsingTd","detailRowModule","collapse","expandElement","getRowObjectFromUID","cRow","eRows","i_1","updateResultModel","returnResult","off","filterByColumn","filterOperator","filterValue","predicate","matchCase","ignoreAccent","actualFilterValue","actualOperator","clearFiltering","removeFilteredColsByField","isClearFilterBar","isToggle","selectRows","rowIndexes","copy","withHeader","paste","colIndex","selectCell","getSelectedRows","getMovableCellFromIndex","getMovableDataRows","getMovableRowByIndex","getFrozenRightRowByIndex","getFrozenRightDataRows","getFrozenRightCellFromIndex","getFrozenLeftColumnHeaderByIndex","getFrozenRightColumnHeaderByIndex","getMovableColumnHeaderByIndex","getMovableColumnsCount","getFrozenLeftColumns","getFrozenRightColumns","getVisibleMovableCount","getVisibleFrozenRightCount","getVisibleFrozenLeftCount","getMovableColumns","getFrozenCount","cnt","isFrozen","getSelectedRowIndexes","getSelectedRowCellIndexes","getSelectedRecords","getDataModule","baseModule","treeModule","reorderRows","fromIndexes","toIndex","rowDragAndDropModule"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, addClass, createElement, EventHandler, isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { removeClass, Complex, Collection, getValue } from '@syncfusion/ej2-base';\nimport { Event, Property, NotifyPropertyChanges, setValue, KeyboardEvents, L10n } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { RowDropSettings, getUid } from '@syncfusion/ej2-grids';\nimport { FilterSettings } from '../models/filter-settings';\nimport { TextWrapSettings } from '../models/textwrap-settings';\nimport { Logger as TreeLogger } from '../actions/logger';\nimport { TreeClipboard } from '../actions/clipboard';\nimport { Selection as TreeGridSelection } from '../actions/selection';\nimport { Print } from '../actions/print';\nimport * as events from '../base/constant';\nimport { SearchSettings } from '../models/search-settings';\nimport { SelectionSettings } from '../models/selection-settings';\nimport { getActualProperties, getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, RemoteSaveAdaptor, JsonAdaptor, Deferred } from '@syncfusion/ej2-data';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { isRemoteData, isOffline, extendArray, isCountRequired, findChildrenRecords } from '../utils';\nimport { Grid, Logger } from '@syncfusion/ej2-grids';\nimport { Render } from '../renderer/render';\nimport { DataManipulation } from './data';\nimport { iterateArrayOrObject } from '@syncfusion/ej2-grids';\nimport { ToolbarItem, ContextMenuItems } from '../enum';\nimport { PageSettings } from '../models/page-settings';\nimport { AggregateRow } from '../models/summary';\nimport { EditSettings } from '../models/edit-settings';\nimport { SortSettings } from '../models/sort-settings';\nimport { isHidden } from '../utils';\nimport { editAction } from '../actions/crud-actions';\nimport { InfiniteScrollSettings } from '../models/infinite-scroll-settings';\n/**\n * Represents the TreeGrid component.\n * ```html\n * <div id='treegrid'></div>\n * <script>\n *  var treegridObj = new TreeGrid({ allowPaging: true });\n *  treegridObj.appendTo('#treegrid');\n * </script>\n * ```\n */\nvar TreeGrid = /** @class */ (function (_super) {\n    __extends(TreeGrid, _super);\n    function TreeGrid(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.dataResults = {};\n        _this.uniqueIDCollection = {};\n        _this.uniqueIDFilterCollection = {};\n        _this.changedRecords = 'changedRecords';\n        _this.deletedRecords = 'deletedRecords';\n        _this.addedRecords = 'addedRecords';\n        _this.objectEqualityChecker = function (old, current) {\n            if (old) {\n                var keys = Object.keys(old);\n                var isEqual = true;\n                var excludeKeys = ['Children', 'childRecords', 'taskData', 'uniqueID', 'parentItem', 'parentUniqueID', 'index'];\n                for (var i = 0; i < keys.length; i++) {\n                    if (old[keys[i]] !== current[keys[i]] && excludeKeys.indexOf(keys[i]) === -1) {\n                        var isDate = old[keys[i]] instanceof Date && current[keys[i]] instanceof Date;\n                        if (!isDate || (old[keys[i]].getTime() !== current[keys[i]].getTime())) {\n                            isEqual = false;\n                            break;\n                        }\n                    }\n                }\n                return isEqual;\n            }\n            else {\n                return false;\n            }\n        };\n        TreeGrid_1.Inject(TreeGridSelection);\n        setValue('mergePersistData', _this.mergePersistTreeGridData, _this);\n        var logger = 'Logger';\n        if (!isNullOrUndefined(_this.injectedModules[logger])) {\n            Grid.Inject(Logger);\n        }\n        _this.grid = new Grid();\n        return _this;\n    }\n    TreeGrid_1 = TreeGrid;\n    /**\n     * Export TreeGrid data to Excel file(.xlsx).\n     *\n     * @param  {ExcelExportProperties | TreeGridExcelExportProperties} excelExportProperties - Defines the export properties of the Tree Grid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, false);\n    };\n    /**\n     * Export TreeGrid data to CSV file.\n     *\n     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the TreeGrid.\n     * @param  {boolean} isMultipleExport - Define to enable multiple export.\n     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.\n     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, true);\n    };\n    /**\n     * Export TreeGrid data to PDF document.\n     *\n     * @param {PdfExportProperties | TreeGridPdfExportProperties} pdfExportProperties - Defines the export properties of the Tree Grid.\n     * @param {boolean} isMultipleExport - Define to enable multiple export.\n     * @param {Object} pdfDoc - Defined the Pdf Document if multiple export is enabled.\n     * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.\n     * @returns {Promise<any>} - Returns promise object of export action\n     */\n    TreeGrid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        return this.pdfExportModule.Map(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns TreeGrid module name\n     */\n    TreeGrid.prototype.getModuleName = function () {\n        return 'treegrid';\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.preRender = function () {\n        this.TreeGridLocale();\n        this.initProperties();\n        this.defaultLocale = {\n            Above: 'Above',\n            Below: 'Below',\n            Child: 'Child',\n            AddRow: 'Add Row',\n            ExpandAll: 'Expand All',\n            CollapseAll: 'Collapse All',\n            RowIndent: 'Indent',\n            RowOutdent: 'Outdent'\n        };\n        this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n        if (this.isSelfReference && isNullOrUndefined(this.childMapping)) {\n            this.childMapping = 'Children';\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     * @returns {void}\n     */\n    TreeGrid.prototype.sortByColumn = function (columnName, direction, isMultiSort) {\n        this.sortModule.sortColumn(columnName, direction, isMultiSort);\n    };\n    /**\n     * Clears all the sorted columns of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSorting = function () {\n        if (this.sortModule) {\n            this.sortModule.clearSorting();\n        }\n    };\n    /**\n     * Remove sorted column by field name.\n     *\n     * @param {string} field - Defines the column field name to remove sort.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeSortColumn = function (field) {\n        this.sortModule.removeSortColumn(field);\n    };\n    /**\n     * Searches TreeGrid records using the given key.\n     * You can customize the default search option by using the\n     * [`searchSettings`](./#searchsettings/).\n     *\n     * @param  {string} searchString - Defines the key.\n     * @returns {void}\n     */\n    TreeGrid.prototype.search = function (searchString) {\n        this.grid.search(searchString);\n    };\n    /**\n     * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.\n     * > * This method ignores the hidden columns.\n     * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.\n     *\n     * @param  {string |string[]} fieldNames - Defines the column names.\n     * @returns {void}\n     *\n     *\n     *\n     */\n    TreeGrid.prototype.autoFitColumns = function (fieldNames) {\n        this.resizeModule.autoFitColumns(fieldNames);\n        this.updateColumnModel();\n    };\n    /**\n     * Changes the TreeGrid column positions by field names.\n     *\n     * @param  {string} fromFName - Defines the origin field name.\n     * @param  {string} toFName - Defines the destination field name.\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderColumns = function (fromFName, toFName) {\n        this.grid.reorderColumns(fromFName, toFName);\n    };\n    TreeGrid.prototype.TreeGridLocale = function () {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var locale = L10n.locale;\n        var localeObject = {};\n        setValue(this.locale, {}, localeObject);\n        var gridLocale;\n        gridLocale = {};\n        gridLocale = getObject(this.locale, locale);\n        var treeGridLocale;\n        treeGridLocale = {};\n        treeGridLocale = getObject(this.getModuleName(), gridLocale);\n        setValue('grid', treeGridLocale, getObject(this.locale, localeObject));\n        L10n.load(localeObject);\n    };\n    /**\n     * By default, prints all the pages of the TreeGrid and hides the pager.\n     * > You can customize print options using the\n     * [`printMode`](./#printmode).\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.print = function () {\n        this.printModule.print();\n    };\n    TreeGrid.prototype.treeGridkeyActionHandler = function (e) {\n        if (this.allowKeyboard) {\n            var target = void 0;\n            var parentTarget = void 0;\n            var column = void 0;\n            var row = void 0;\n            var summaryElement = void 0;\n            switch (e.action) {\n                case 'ctrlDownArrow':\n                    this.expandAll();\n                    break;\n                case 'ctrlUpArrow':\n                    this.collapseAll();\n                    break;\n                case 'ctrlShiftUpArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    row = column.closest('tr');\n                    if (row !== null && row !== undefined) {\n                        this.expandCollapseRequest(row.querySelector('.e-treegridexpand'));\n                    }\n                    break;\n                case 'ctrlShiftDownArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    row = column.closest('tr');\n                    if (row !== null && row !== undefined) {\n                        this.expandCollapseRequest(row.querySelector('.e-treegridcollapse'));\n                    }\n                    break;\n                case 'downArrow':\n                    if (!this.enableVirtualization) {\n                        parentTarget = e.target.parentElement;\n                        summaryElement = this.findnextRowElement(parentTarget);\n                        if (summaryElement !== null) {\n                            var rowIndex = summaryElement.rowIndex;\n                            this.selectRow(rowIndex);\n                            var cellIndex = e.target.cellIndex;\n                            var row_1 = summaryElement.children[cellIndex];\n                            addClass([row_1], 'e-focused');\n                            addClass([row_1], 'e-focus');\n                        }\n                        else {\n                            this.clearSelection();\n                        }\n                    }\n                    break;\n                case 'upArrow':\n                    if (!this.enableVirtualization) {\n                        parentTarget = e.target.parentElement;\n                        summaryElement = this.findPreviousRowElement(parentTarget);\n                        if (summaryElement !== null) {\n                            var rIndex = summaryElement.rowIndex;\n                            this.selectRow(rIndex);\n                            var cIndex = e.target.cellIndex;\n                            var rows = summaryElement.children[cIndex];\n                            addClass([rows], 'e-focused');\n                            addClass([rows], 'e-focus');\n                        }\n                        else {\n                            this.clearSelection();\n                        }\n                    }\n            }\n        }\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findnextRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.nextElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.style.display === 'none')) {\n            rowElement = this.findnextRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findPreviousRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.previousElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.style.display === 'none')) {\n            rowElement = this.findPreviousRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    TreeGrid.prototype.initProperties = function () {\n        this.defaultLocale = {};\n        this.flatData = [];\n        this.parentData = [];\n        this.columnModel = [];\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n        this.keyConfigs = {\n            ctrlDownArrow: 'ctrl+downarrow',\n            ctrlUpArrow: 'ctrl+uparrow',\n            ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n            ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n            downArrow: 'downArrow',\n            upArrow: 'upArrow'\n        };\n        this.isLocalData = (!(this.dataSource instanceof DataManager) || this.dataSource.dataSource.offline\n            || (!isNullOrUndefined(this.dataSource.ready)) || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n        this.isSelfReference = !isNullOrUndefined(this.parentIdMapping);\n    };\n    /**\n     * Binding events to the element while component creation.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.wireEvents = function () {\n        EventHandler.add(this.grid.element, 'click', this.mouseClickHandler, this);\n        EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.treeGridkeyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n        if (this.allowKeyboard) {\n            this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n        }\n    };\n    /**\n     * To provide the array of modules needed for component rendering\n     *\n     * @returns {ModuleDeclaration[]} - Returns TreeGrid modules collection\n     * @hidden\n     */\n    TreeGrid.prototype.requiredModules = function () {\n        var modules = [];\n        var splitFrozenCount = 'splitFrozenCount';\n        this.grid[splitFrozenCount](this.getGridColumns(this.columns));\n        if (this.isDestroyed) {\n            return modules;\n        }\n        modules.push({\n            member: 'filter', args: [this, this.filterSettings]\n        });\n        if (!isNullOrUndefined(this.toolbar)) {\n            modules.push({\n                member: 'toolbar',\n                args: [this]\n            });\n        }\n        if (this.contextMenuItems) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this]\n            });\n        }\n        if (this.allowPaging) {\n            modules.push({\n                member: 'pager',\n                args: [this, this.pageSettings]\n            });\n        }\n        if (this.allowReordering) {\n            modules.push({\n                member: 'reorder',\n                args: [this]\n            });\n        }\n        if (this.allowSorting) {\n            modules.push({\n                member: 'sort',\n                args: [this]\n            });\n        }\n        if (this.aggregates.length > 0) {\n            modules.push({\n                member: 'summary', args: [this]\n            });\n        }\n        modules.push({\n            member: 'resize', args: [this]\n        });\n        if (this.allowExcelExport) {\n            modules.push({\n                member: 'ExcelExport', args: [this]\n            });\n        }\n        if (this.frozenColumns || this.frozenRows || this.getFrozenColumns() ||\n            this.grid.getFrozenLeftColumnsCount() || this.grid.getFrozenRightColumnsCount()) {\n            modules.push({\n                member: 'freeze', args: [this]\n            });\n        }\n        if (this.detailTemplate) {\n            modules.push({\n                member: 'detailRow', args: [this]\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport', args: [this]\n            });\n        }\n        if (this.showColumnMenu) {\n            modules.push({\n                member: 'columnMenu', args: [this]\n            });\n        }\n        if (this.showColumnChooser) {\n            modules.push({\n                member: 'ColumnChooser', args: [this]\n            });\n        }\n        this.extendRequiredModules(modules);\n        return modules;\n    };\n    TreeGrid.prototype.extendRequiredModules = function (modules) {\n        if (this.allowRowDragAndDrop) {\n            modules.push({\n                member: 'rowDragAndDrop',\n                args: [this]\n            });\n        }\n        if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n            modules.push({\n                member: 'edit',\n                args: [this]\n            });\n        }\n        if (this.isCommandColumn(this.columns)) {\n            modules.push({\n                member: 'commandColumn',\n                args: [this]\n            });\n        }\n        if (this.allowSelection) {\n            modules.push({\n                member: 'selection',\n                args: [this]\n            });\n        }\n        if (this.enableVirtualization) {\n            modules.push({\n                member: 'virtualScroll',\n                args: [this]\n            });\n        }\n        if (this.enableInfiniteScrolling) {\n            modules.push({\n                member: 'infiniteScroll',\n                args: [this]\n            });\n        }\n        modules.push({\n            member: 'logger',\n            args: [this.grid]\n        });\n    };\n    TreeGrid.prototype.isCommandColumn = function (columns) {\n        var _this = this;\n        return columns.some(function (col) {\n            if (col.columns) {\n                return _this.isCommandColumn(col.columns);\n            }\n            return !!(col.commands || col.commandsTemplate);\n        });\n    };\n    /**\n     * Unbinding events from the element while component destroy.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.unwireEvents = function () {\n        if (this.grid && this.grid.element) {\n            EventHandler.remove(this.grid.element, 'click', this.mouseClickHandler);\n        }\n    };\n    /**\n     * Logs tree grid error message on console\n     *\n     * @param {string | string[]} types - Tree Grid error type\n     * @param {object} args - Error details\n     * @hidden\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.log = function (types, args) {\n        if (this.loggerModule) {\n            this.loggerModule.treeLog(types, args, this);\n        }\n    };\n    /**\n     * For internal use only - To Initialize the component rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.render = function () {\n        var _this = this;\n        if (this.isReact) {\n            this.grid.isReact = true;\n            this.grid.portals = [];\n        }\n        createSpinner({ target: this.element }, this.createElement);\n        this.log(['mapping_fields_missing']);\n        this.renderModule = new Render(this);\n        this.dataModule = new DataManipulation(this);\n        this.printModule = new Print(this);\n        this.trigger(events.load);\n        this.autoGenerateColumns();\n        this.initialRender = true;\n        if (!isNullOrUndefined(this.dataSource)) {\n            this.convertTreeData(this.dataSource);\n        }\n        this.loadGrid();\n        if (this.element.classList.contains('e-treegrid') && this.rowDropSettings.targetID) {\n            this.grid.rowDropSettings.targetID += '_gridcontrol';\n        }\n        this.addListener();\n        var gridContainer = createElement('div', { id: this.element.id + '_gridcontrol' });\n        addClass([this.element], 'e-treegrid');\n        if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n            this.element.style.height = this.height;\n        }\n        if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n            this.element.style.width = this.width;\n        }\n        this.element.appendChild(gridContainer);\n        var gridRequiredModules = this.grid.requiredModules;\n        this.grid.requiredModules = function () {\n            var modules = [];\n            modules = gridRequiredModules.apply(this);\n            for (var i = 0; i < modules.length; i++) {\n                if (modules[i].member === 'virtualscroll') {\n                    modules[i].member = 'treeVirtualScroll';\n                }\n            }\n            return modules;\n        };\n        this.grid.appendTo(gridContainer);\n        this.wireEvents();\n        this.renderComplete();\n        var destroyTemplate = 'destroyTemplate';\n        var destroyTemplateFn = this.grid[destroyTemplate];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.grid[destroyTemplate] = function (args, index) {\n            destroyTemplateFn.apply(_this.grid);\n            var portals = 'portals';\n            if (!(_this.isReact && isNullOrUndefined(_this[portals]))) {\n                _this.clearTemplate(args, index);\n            }\n        };\n    };\n    TreeGrid.prototype.afterGridRender = function () {\n        if (!isNullOrUndefined(this.grid.clipboardModule)) {\n            this.grid.clipboardModule.destroy();\n        }\n        this.clipboardModule = this.grid.clipboardModule = new TreeClipboard(this);\n    };\n    TreeGrid.prototype.convertTreeData = function (data) {\n        var _this = this;\n        if (isCountRequired(this)) {\n            data = getValue('result', data);\n        }\n        if (data instanceof Array && data.length > 0 && Object.prototype.hasOwnProperty.call(data[0], 'level')) {\n            this.flatData = data;\n            this.flatData.filter(function (e) {\n                setValue('uniqueIDCollection.' + e.uniqueID, e, _this);\n                if (e.level === 0) {\n                    _this.parentData.push(e);\n                }\n            });\n        }\n        else {\n            if (isCountRequired(this)) {\n                var griddata = getValue('result', this.dataSource);\n                this.dataModule.convertToFlatData(griddata);\n            }\n            else {\n                this.dataModule.convertToFlatData(data);\n            }\n        }\n    };\n    // private getGridData(): Object {\n    //   if (isRemoteData(this)) {\n    //     return this.dataSource;\n    //   } else if (this.isLocalData && this.dataSource instanceof DataManager) {\n    //     this.dataSource.dataSource.json = this.flatData;\n    //     return this.dataSource;\n    //   }\n    //   return this.flatData;\n    // }\n    TreeGrid.prototype.bindGridProperties = function () {\n        this.bindedDataSource();\n        this.grid.enableRtl = this.enableRtl;\n        this.grid.allowKeyboard = this.allowKeyboard;\n        this.grid.columns = this.getGridColumns(this.columns);\n        this.grid.allowExcelExport = this.allowExcelExport;\n        this.grid.allowPdfExport = this.allowPdfExport;\n        this.grid.query = this.query;\n        this.grid.columnQueryMode = this.columnQueryMode;\n        this.grid.allowPaging = this.allowPaging;\n        this.grid.pageSettings = getActualProperties(this.pageSettings);\n        this.grid.pagerTemplate = this.pagerTemplate;\n        this.grid.showColumnMenu = this.showColumnMenu;\n        this.grid.allowSorting = this.allowSorting;\n        this.grid.allowFiltering = this.allowFiltering;\n        this.grid.enableVirtualization = this.enableVirtualization;\n        this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n        this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n        this.grid.infiniteScrollSettings = this.infiniteScrollSettings;\n        this.grid.width = this.width;\n        this.grid.height = this.height;\n        this.grid.enableAltRow = this.enableAltRow;\n        this.grid.allowReordering = this.allowReordering;\n        this.grid.allowTextWrap = this.allowTextWrap;\n        this.grid.allowResizing = this.allowResizing;\n        this.grid.enableHover = this.enableHover;\n        this.grid.enableAutoFill = this.enableAutoFill;\n        this.grid.enableImmutableMode = this.enableImmutableMode;\n        this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n        this.grid.rowDropSettings = getActualProperties(this.rowDropSettings);\n        this.grid.rowHeight = this.rowHeight;\n        this.grid.gridLines = this.gridLines;\n        this.grid.allowSelection = this.allowSelection;\n        this.grid.toolbar = getActualProperties(this.getGridToolbar());\n        this.grid.toolbarTemplate = this.toolbarTemplate;\n        this.grid.showColumnChooser = this.showColumnChooser;\n        this.grid.filterSettings = getActualProperties(this.filterSettings);\n        this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n        this.grid.sortSettings = getActualProperties(this.sortSettings);\n        this.grid.searchSettings = getActualProperties(this.searchSettings);\n        this.grid.aggregates = getActualProperties(this.aggregates);\n        this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n        this.grid.printMode = getActualProperties(this.printMode);\n        this.grid.locale = getActualProperties(this.locale);\n        this.grid.selectedRowIndex = this.selectedRowIndex;\n        this.grid.contextMenuItems = getActualProperties(this.getContextMenu());\n        this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n        this.grid.editSettings = this.getGridEditSettings();\n        this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n        this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n        this.grid.frozenRows = this.frozenRows;\n        this.grid.frozenColumns = this.frozenColumns;\n        this.grid.clipMode = getActualProperties(this.clipMode);\n        var templateInstance = 'templateDotnetInstance';\n        this.grid[templateInstance] = this[templateInstance];\n        var isJsComponent = 'isJsComponent';\n        this.grid[isJsComponent] = true;\n    };\n    TreeGrid.prototype.triggerEvents = function (args) {\n        this.trigger(getObject('name', args), args);\n    };\n    TreeGrid.prototype.bindGridEvents = function () {\n        var _this = this;\n        this.grid.rowSelecting = function (args) {\n            if (!isNullOrUndefined(args.target) && (args.target.classList.contains('e-treegridexpand')\n                || args.target.classList.contains('e-treegridcollapse') || args.target.classList.contains('e-summarycell'))) {\n                args.cancel = true;\n                return;\n            }\n            _this.trigger(events.rowSelecting, args);\n        };\n        this.grid.rowSelected = function (args) {\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            _this.notify(events.rowSelected, args);\n            _this.trigger(events.rowSelected, args);\n        };\n        this.grid.rowDeselected = function (args) {\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            _this.trigger(events.rowDeselected, args);\n        };\n        this.grid.resizeStop = function (args) {\n            _this.updateColumnModel();\n            _this.trigger(events.resizeStop, args);\n        };\n        this.grid.excelQueryCellInfo = function (args) {\n            _this.notify('excelCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.pdfQueryCellInfo = function (args) {\n            _this.notify('pdfCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.checkBoxChange = function (args) {\n            _this.trigger(events.checkboxChange, args);\n        };\n        this.grid.pdfExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.pdfHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.dataSourceChanged = this.triggerEvents.bind(this);\n        this.grid.recordDoubleClick = this.triggerEvents.bind(this);\n        this.grid.rowDeselecting = this.triggerEvents.bind(this);\n        this.grid.cellDeselected = this.triggerEvents.bind(this);\n        this.grid.cellDeselecting = this.triggerEvents.bind(this);\n        this.grid.columnMenuOpen = this.triggerEvents.bind(this);\n        this.grid.columnMenuClick = this.triggerEvents.bind(this);\n        this.grid.cellSelected = this.triggerEvents.bind(this);\n        this.grid.headerCellInfo = this.triggerEvents.bind(this);\n        this.grid.resizeStart = this.triggerEvents.bind(this);\n        this.grid.resizing = this.triggerEvents.bind(this);\n        this.grid.columnDrag = this.triggerEvents.bind(this);\n        this.grid.columnDragStart = this.triggerEvents.bind(this);\n        this.grid.columnDrop = this.triggerEvents.bind(this);\n        this.grid.beforePrint = this.triggerEvents.bind(this);\n        this.grid.beforeCopy = this.triggerEvents.bind(this);\n        this.grid.beforePaste = function (args) {\n            var rows = _this.getRows();\n            var rowIndex = 'rowIndex';\n            while (rows[args[rowIndex]].classList.contains('e-summaryrow')) {\n                args[rowIndex]++;\n            }\n            _this.trigger(events.beforePaste, args);\n        };\n        this.grid.load = function () {\n            _this.grid.on('initial-end', _this.afterGridRender, _this);\n            if (!isNullOrUndefined(_this.loggerModule)) {\n                var loggerModule = 'loggerModule';\n                _this.loggerModule = _this.grid[loggerModule] = new TreeLogger(_this.grid);\n            }\n        };\n        this.grid.printComplete = this.triggerEvents.bind(this);\n        this.grid.actionFailure = this.triggerEvents.bind(this);\n        this.extendedGridDataBoundEvent();\n        this.extendedGridEvents();\n        this.extendedGridActionEvents();\n        this.extendedGridEditEvents();\n        this.bindGridDragEvents();\n        this.bindCallBackEvents();\n    };\n    TreeGrid.prototype.lastRowBorder = function (visiblerow, isAddBorder) {\n        for (var j = 0; j < visiblerow.cells.length; j++) {\n            if (isAddBorder) {\n                addClass([visiblerow.cells[j]], 'e-lastrowcell');\n            }\n            else {\n                removeClass([visiblerow.cells[j]], 'e-lastrowcell');\n            }\n        }\n    };\n    TreeGrid.prototype.isPixelHeight = function () {\n        if (this.height !== 'auto' && this.height.toString().indexOf('%') === -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TreeGrid.prototype.extendedGridDataBoundEvent = function () {\n        var _this = this;\n        this.grid.dataBound = function (args) {\n            _this.updateRowTemplate();\n            _this.updateColumnModel();\n            _this.updateAltRow(_this.getRows());\n            _this.notify('dataBoundArg', args);\n            if (isRemoteData(_this) && !isOffline(_this) && !_this.hasChildMapping) {\n                var req = getObject('dataSource.requests', _this).filter(function (e) {\n                    return e.httpRequest.statusText !== 'OK';\n                }).length;\n                setValue('grid.contentModule.isLoaded', !(req > 0), _this);\n            }\n            if (_this.isPixelHeight() && _this.initialRender) {\n                var rows = _this.getContentTable().rows;\n                var totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i > 0; i--) {\n                    if (!isHidden(totalRows[i])) {\n                        if (totalRows[i].nextElementSibling) {\n                            _this.lastRowBorder(totalRows[i], true);\n                        }\n                        break;\n                    }\n                }\n            }\n            _this.trigger(events.dataBound, args);\n            _this.initialRender = false;\n        };\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.beforeDataBound = function (args) {\n            var dataSource = 'dataSource';\n            var requestType = getObject('action', args);\n            if (((isRemoteData(treeGrid) && !isOffline(treeGrid)) || isCountRequired(this)) && requestType !== 'edit') {\n                treeGrid.notify('updateRemoteLevel', args);\n                args = (treeGrid.dataResults);\n            }\n            else if (treeGrid.flatData.length === 0 && isOffline(treeGrid) && treeGrid.dataSource instanceof DataManager) {\n                var dm = treeGrid.dataSource;\n                treeGrid.dataModule.convertToFlatData(dm.dataSource.json);\n                args.result = treeGrid.grid.dataSource[dataSource].json = treeGrid.flatData;\n            }\n            if (!isRemoteData(treeGrid) && !isCountRequired(this) && !isNullOrUndefined(treeGrid.dataSource)) {\n                if (this.isPrinting) {\n                    setValue('isPrinting', true, args);\n                }\n                treeGrid.notify('dataProcessor', args);\n                //args = treeGrid.dataModule.dataProcessor(args);\n            }\n            extend(args, treeGrid.dataResults);\n            if (treeGrid.enableImmutableMode) {\n                args.result = args.result.slice();\n            }\n            if (treeGrid.initialRender) {\n                this.contentModule.objectEqualityChecker = treeGrid.objectEqualityChecker;\n            }\n            // treeGrid.notify(events.beforeDataBound, args);\n            if (!this.isPrinting) {\n                var callBackPromise_1 = new Deferred();\n                treeGrid.trigger(events.beforeDataBound, args, function (beforeDataBoundArgs) {\n                    callBackPromise_1.resolve(beforeDataBoundArgs);\n                });\n                return callBackPromise_1;\n            }\n        };\n        this.grid.log = function (type, args) {\n            if (_this.loggerModule) {\n                _this.loggerModule.log(type, args);\n            }\n        };\n    };\n    TreeGrid.prototype.bindCallBackEvents = function () {\n        var _this = this;\n        this.grid.toolbarClick = function (args) {\n            if ((args.item.id === _this.grid.element.id + '_excelexport' && _this.allowExcelExport === false) ||\n                (args.item.id === _this.grid.element.id + '_pdfexport' && _this.allowPdfExport === false) ||\n                (args.item.id === _this.grid.element.id + '_csvexport' && _this.allowExcelExport === false)) {\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.toolbarClick, args, function (toolbarargs) {\n                if (!toolbarargs.cancel) {\n                    _this.notify(events.toolbarClick, args);\n                }\n                callBackPromise.resolve(toolbarargs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSelecting = function (args) {\n            var callBackPromise = new Deferred();\n            _this.trigger(getObject('name', args), args, function (cellselectingArgs) {\n                callBackPromise.resolve(cellselectingArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.beginEdit = function (args) {\n            if (!isNullOrUndefined(args.row) && args.row.classList.contains('e-summaryrow')) {\n                args.cancel = true;\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.beginEdit, args, function (begineditArgs) {\n                callBackPromise.resolve(begineditArgs);\n            });\n            return callBackPromise;\n        };\n    };\n    TreeGrid.prototype.extendedGridEditEvents = function () {\n        var _this = this;\n        this.grid.dataStateChange = function (args) {\n            if (_this.isExpandRefresh) {\n                _this.isExpandRefresh = false;\n                _this.grid.dataSource = { result: _this.flatData, count: getValue('count', _this.grid.dataSource) };\n            }\n            else {\n                _this.trigger(events.dataStateChange, args);\n            }\n        };\n        this.grid.cellSave = function (args) {\n            if (_this.grid.isContextMenuOpen()) {\n                var contextitems = _this.grid.contextMenuModule.contextMenu.element.getElementsByClassName('e-selected')[0];\n                if ((isNullOrUndefined(contextitems) || contextitems.id !== _this.element.id + '_gridcontrol_cmenu_Save')) {\n                    args.cancel = true;\n                }\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.cellSave, args, function (cellsaveArgs) {\n                if (!cellsaveArgs.cancel) {\n                    _this.notify(events.cellSave, cellsaveArgs);\n                }\n                callBackPromise.resolve(cellsaveArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSaved = function (args) {\n            _this.trigger(events.cellSaved, args);\n            _this.notify(events.cellSaved, args);\n        };\n        this.grid.cellEdit = function (args) {\n            var prom = 'promise';\n            var promise = new Deferred();\n            args[prom] = promise;\n            _this.notify(events.cellEdit, args);\n            return promise;\n        };\n        this.grid.batchAdd = function (args) {\n            _this.trigger(events.batchAdd, args);\n            _this.notify(events.batchAdd, args);\n        };\n        this.grid.beforeBatchSave = function (args) {\n            _this.trigger(events.beforeBatchSave, args);\n            _this.notify(events.beforeBatchSave, args);\n        };\n        this.grid.beforeBatchAdd = function (args) {\n            _this.trigger(events.beforeBatchAdd, args);\n            _this.notify(events.beforeBatchAdd, args);\n        };\n        this.grid.batchDelete = function (args) {\n            _this.trigger(events.batchDelete, args);\n            _this.notify(events.batchDelete, args);\n        };\n        this.grid.beforeBatchDelete = function (args) {\n            _this.trigger(events.beforeBatchDelete, args);\n            _this.notify(events.beforeBatchDelete, args);\n        };\n        this.grid.batchCancel = function (args) {\n            if (_this.editSettings.mode !== 'Cell') {\n                _this.trigger(events.batchCancel, args);\n            }\n            _this.notify(events.batchCancel, args);\n        };\n    };\n    TreeGrid.prototype.updateRowTemplate = function () {\n        this.treeColumnRowTemplate();\n    };\n    TreeGrid.prototype.bindedDataSource = function () {\n        var dataSource = 'dataSource';\n        var isDataAvailable = 'isDataAvailable';\n        var adaptor = 'adaptor';\n        var ready = 'ready';\n        if (this.dataSource && isCountRequired(this)) {\n            var data = this.flatData;\n            var datacount = getValue('count', this.dataSource);\n            this.grid.dataSource = { result: data, count: datacount };\n        }\n        else {\n            this.grid.dataSource = !(this.dataSource instanceof DataManager) ?\n                this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n        }\n        if (this.dataSource instanceof DataManager && (this.dataSource.dataSource.offline || this.dataSource.ready)) {\n            this.grid.dataSource[dataSource].json = extendArray(this.dataSource[dataSource].json);\n            this.grid.dataSource[ready] = this.dataSource.ready;\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var proxy_1 = this;\n            if (!isNullOrUndefined(this.grid.dataSource[ready])) {\n                this.grid.dataSource[ready].then(function (e) {\n                    var dm = proxy_1.grid.dataSource;\n                    dm[dataSource].offline = true;\n                    dm[isDataAvailable] = true;\n                    dm[dataSource].json = e.result;\n                    dm[adaptor] = new JsonAdaptor();\n                });\n            }\n        }\n    };\n    TreeGrid.prototype.extendedGridActionEvents = function () {\n        var _this = this;\n        this.grid.actionBegin = function (args) {\n            if (args.requestType === 'sorting' && args.target && args.target.parentElement &&\n                args.target.parentElement.classList.contains('e-hierarchycheckbox')) {\n                args.cancel = true;\n            }\n            var requestType = getObject('requestType', args);\n            if (requestType === 'reorder') {\n                _this.notify('getColumnIndex', {});\n            }\n            _this.notify('actionBegin', { editAction: args });\n            if (!isRemoteData(_this) && !isNullOrUndefined(_this.filterModule) && !isCountRequired(_this)\n                && (_this.grid.filterSettings.columns.length === 0 || _this.grid.searchSettings.key.length === 0)) {\n                _this.notify('clearFilters', { flatData: _this.grid.dataSource });\n                _this.grid.setProperties({ dataSource: _this.dataResults.result }, true);\n                if (isNullOrUndefined(_this.grid['changedProperties'].dataSource)) {\n                    _this.grid.renderModule.data.dataManager = _this.grid.dataSource instanceof DataManager ? _this.grid.dataSource :\n                        (isNullOrUndefined(_this.grid.dataSource) ? new DataManager() : new DataManager(_this.grid.dataSource));\n                }\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.actionBegin, args, function (actionArgs) {\n                if (!actionArgs.cancel) {\n                    _this.notify(events.beginEdit, actionArgs);\n                }\n                callBackPromise.resolve(actionArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.actionComplete = function (args) {\n            _this.notify('actioncomplete', args);\n            _this.updateColumnModel();\n            _this.updateTreeGridModel();\n            if (args.requestType === 'reorder') {\n                _this.notify('setColumnIndex', {});\n            }\n            _this.notify('actionComplete', { editAction: args });\n            if (args.requestType === 'add' && (_this.editSettings.newRowPosition !== 'Top' && _this.editSettings.newRowPosition !== 'Bottom')) {\n                _this.notify(events.beginAdd, args);\n            }\n            if (args.requestType === 'batchsave') {\n                _this.notify(events.batchSave, args);\n            }\n            _this.notify('updateGridActions', args);\n            if (args.requestType === 'save' && _this.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n                _this.grid.refresh();\n            }\n            _this.trigger(events.actionComplete, args);\n        };\n    };\n    TreeGrid.prototype.extendedGridEvents = function () {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.recordDoubleClick = function (args) {\n            _this.trigger(events.recordDoubleClick, args);\n            _this.notify(events.recordDoubleClick, args);\n        };\n        this.grid.detailDataBound = function (args) {\n            _this.notify('detaildataBound', args);\n            _this.trigger(events.detailDataBound, args);\n        };\n        this.grid.rowDataBound = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.RowModifier(args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.cellRender(args);\n        };\n        this.grid.contextMenuClick = function (args) {\n            _this.notify(events.contextMenuClick, args);\n            _this.trigger(events.contextMenuClick, args);\n        };\n        this.grid.contextMenuOpen = function (args) {\n            _this.notify(events.contextMenuOpen, args);\n            _this.trigger(events.contextMenuOpen, args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            _this.renderModule.cellRender(args);\n        };\n    };\n    TreeGrid.prototype.bindGridDragEvents = function () {\n        var _this = this;\n        this.grid.rowDragStartHelper = function (args) {\n            _this.trigger(events.rowDragStartHelper, args);\n        };\n        this.grid.rowDragStart = function (args) {\n            _this.trigger(events.rowDragStart, args);\n        };\n        this.grid.rowDrag = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowdraging, args);\n            _this.trigger(events.rowDrag, args);\n        };\n        this.grid.rowDrop = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowDropped, args);\n            args.cancel = true;\n        };\n    };\n    /**\n     * Renders TreeGrid component\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.loadGrid = function () {\n        this.bindGridProperties();\n        this.bindGridEvents();\n        setValue('registeredTemplate', this.registeredTemplate, this.grid);\n        var ref = 'viewContainerRef';\n        setValue('viewContainerRef', this[ref], this.grid);\n    };\n    /**\n     * AutoGenerate TreeGrid columns from first record\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.autoGenerateColumns = function () {\n        if (!this.columns.length && (!this.dataModule.isRemote() && Object.keys(this.dataSource).length)) {\n            this.columns = [];\n            // if (this.dataSource instanceof DataManager) {\n            //   record = (<DataManager>this.dataSource).dataSource.json[0];\n            // } else {\n            var record = this.dataSource[0];\n            // }\n            var keys = Object.keys(record);\n            for (var i = 0; i < keys.length; i++) {\n                if ([this.childMapping, this.parentIdMapping].indexOf(keys[i]) === -1) {\n                    this.columns.push(keys[i]);\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.getGridEditSettings = function () {\n        var edit = {};\n        var guid = 'guid';\n        edit.allowAdding = this.editSettings.allowAdding;\n        edit.allowEditing = this.editSettings.allowEditing;\n        edit.allowDeleting = this.editSettings.allowDeleting;\n        edit.newRowPosition = this.editSettings.newRowPosition === 'Bottom' ? 'Bottom' : 'Top';\n        edit.allowEditOnDblClick = this.editSettings.allowEditOnDblClick;\n        edit.showConfirmDialog = this.editSettings.showConfirmDialog;\n        edit.template = this.editSettings.template;\n        edit.showDeleteConfirmDialog = this.editSettings.showDeleteConfirmDialog;\n        edit.allowNextRowEdit = this.editSettings.allowNextRowEdit;\n        edit[guid] = this.editSettings[guid];\n        edit.dialog = this.editSettings.dialog;\n        switch (this.editSettings.mode) {\n            case 'Dialog':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Batch':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Row':\n                edit.mode = 'Normal';\n                break;\n            case 'Cell':\n                edit.mode = 'Normal';\n                edit.showConfirmDialog = false;\n                break;\n        }\n        return edit;\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - returns context menu items\n     */\n    TreeGrid.prototype.getContextMenu = function () {\n        if (this.contextMenuItems) {\n            var items = [];\n            for (var i = 0; i < this.contextMenuItems.length; i++) {\n                switch (this.contextMenuItems[i]) {\n                    case 'AddRow':\n                    case ContextMenuItems.AddRow:\n                        items.push({ text: this.l10n.getConstant('AddRow'),\n                            target: '.e-content', id: this.element.id + '_gridcontrol_cmenu_AddRow',\n                            items: [{ text: this.l10n.getConstant('Above'), id: 'Above' }, { text: this.l10n.getConstant('Below'), id: 'Below' }, { text: this.l10n.getConstant('Child'), id: 'Child' }] });\n                        break;\n                    default:\n                        items.push(this.contextMenuItems[i]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - Returns toolbar items\n     */\n    TreeGrid.prototype.getGridToolbar = function () {\n        if (this.toolbar) {\n            var items = [];\n            var tooltipText = void 0;\n            for (var i = 0; i < this.toolbar.length; i++) {\n                switch (this.toolbar[i]) {\n                    case 'Search':\n                    case ToolbarItem.Search:\n                        items.push('Search');\n                        break;\n                    case 'Print':\n                    case ToolbarItem.Print:\n                        items.push('Print');\n                        break;\n                    case 'ExpandAll':\n                    case ToolbarItem.ExpandAll:\n                        tooltipText = this.l10n.getConstant('ExpandAll');\n                        items.push({ text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-expand', id: this.element.id + '_gridcontrol_expandall' });\n                        break;\n                    case 'CollapseAll':\n                    case ToolbarItem.CollapseAll:\n                        tooltipText = this.l10n.getConstant('CollapseAll');\n                        items.push({ text: tooltipText,\n                            tooltipText: tooltipText, prefixIcon: 'e-collapse', id: this.element.id + '_gridcontrol_collapseall'\n                        });\n                        break;\n                    case 'Indent':\n                    case ToolbarItem.RowIndent:\n                        tooltipText = this.l10n.getConstant('RowIndent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-indent', id: this.element.id + '_gridcontrol_indent'\n                        });\n                        break;\n                    case 'Outdent':\n                    case ToolbarItem.RowOutdent:\n                        tooltipText = this.l10n.getConstant('RowOutdent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-outdent', id: this.element.id + '_gridcontrol_outdent'\n                        });\n                        break;\n                    default:\n                        items.push(this.toolbar[i]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    TreeGrid.prototype.getGridColumns = function (columns, isEmptyColumnModel, index) {\n        if (isEmptyColumnModel === void 0) { isEmptyColumnModel = true; }\n        if (index === void 0) { index = 0; }\n        var column = columns;\n        var stackedColumn = 'columns';\n        if (isEmptyColumnModel) {\n            this.columnModel = [];\n        }\n        var treeGridColumn;\n        var gridColumn;\n        index = index === 0 ? -1 : index;\n        var gridColumnCollection = [];\n        for (var i = 0; i < column.length; i++) {\n            index = index + 1;\n            var treeColumn = this.grid.getColumnByUid(column[i].uid);\n            gridColumn = treeColumn ? treeColumn : {};\n            treeGridColumn = {};\n            if (typeof this.columns[i] === 'string') {\n                gridColumn.field = treeGridColumn.field = this.columns[i];\n            }\n            else {\n                for (var _i = 0, _a = Object.keys(column[i]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    if (index === this.treeColumnIndex && prop === 'template') {\n                        treeGridColumn[prop] = column[i][prop];\n                    }\n                    else if (prop === 'columns' && !isNullOrUndefined(column[i][prop])) {\n                        gridColumn[prop] = this.getGridColumns(column[i][prop], false, index);\n                        treeGridColumn[prop] = column[i][prop];\n                    }\n                    else {\n                        gridColumn[prop] = treeGridColumn[prop] = column[i][prop];\n                    }\n                }\n            }\n            if (!treeGridColumn[stackedColumn]) {\n                this.columnModel.push(new Column(treeGridColumn));\n            }\n            gridColumnCollection.push(gridColumn);\n        }\n        return gridColumnCollection;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {TreeGridModel} newProp - properties details which has to be modified\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.onPropertyChanged = function (newProp) {\n        var properties = Object.keys(newProp);\n        var requireRefresh = false;\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            switch (prop) {\n                case 'columns':\n                    this.grid.columns = this.getGridColumns(this.columns);\n                    break;\n                case 'treeColumnIndex':\n                    this.grid.refreshColumns();\n                    break;\n                case 'allowPaging':\n                    this.grid.allowPaging = this.allowPaging;\n                    break;\n                case 'pageSettings':\n                    this.grid.pageSettings = getActualProperties(this.pageSettings);\n                    requireRefresh = true;\n                    break;\n                case 'enableVirtualization':\n                    this.grid.enableVirtualization = this.enableVirtualization;\n                    break;\n                case 'enableColumnVirtualization':\n                    this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n                    break;\n                case 'toolbar':\n                    this.grid.toolbar = this.getGridToolbar();\n                    break;\n                case 'allowSelection':\n                    this.grid.allowSelection = this.allowSelection;\n                    break;\n                case 'selectionSettings':\n                    this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n                    break;\n                case 'allowSorting':\n                    this.grid.allowSorting = this.allowSorting;\n                    break;\n                case 'allowMultiSorting':\n                    this.grid.allowMultiSorting = this.allowMultiSorting;\n                    break;\n                case 'sortSettings':\n                    this.grid.sortSettings = getActualProperties(this.sortSettings);\n                    break;\n                case 'searchSettings':\n                    this.grid.searchSettings = getActualProperties(this.searchSettings);\n                    break;\n                case 'allowFiltering':\n                    this.grid.allowFiltering = this.allowFiltering;\n                    break;\n                case 'filterSettings':\n                    if (!this.initialRender) {\n                        this.grid.filterSettings = getActualProperties(this.filterSettings);\n                    }\n                    break;\n                case 'showColumnMenu':\n                    this.grid.showColumnMenu = this.showColumnMenu;\n                    break;\n                case 'allowRowDragAndDrop':\n                    this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n                    break;\n                case 'aggregates':\n                    this.grid.aggregates = getActualProperties(this.aggregates);\n                    break;\n                case 'enableInfiniteScrolling':\n                    this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n                    break;\n                case 'dataSource':\n                    this.isLocalData = (!(this.dataSource instanceof DataManager) || (!isNullOrUndefined(this.dataSource.ready))\n                        || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n                    this.convertTreeData(this.dataSource);\n                    if (this.isLocalData) {\n                        if (isCountRequired(this)) {\n                            var count = getValue('count', this.dataSource);\n                            this.grid.dataSource = { result: this.flatData, count: count };\n                        }\n                        else {\n                            var data = this.dataSource;\n                            this.grid.dataSource = !(data instanceof DataManager) ?\n                                this.flatData : new DataManager(data.dataSource, data.defaultQuery, data.adaptor);\n                        }\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.isDataSourceChanged = true;\n                        }\n                    }\n                    else {\n                        this.bindedDataSource();\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.removeEventListener();\n                            this.grid.contentModule.eventListener('on');\n                            this.grid.contentModule.renderTable();\n                        }\n                    }\n                    break;\n                case 'query':\n                    this.grid.query = this.query;\n                    break;\n                case 'enableCollapseAll':\n                    if (newProp[prop]) {\n                        this.collapseAll();\n                    }\n                    else {\n                        this.expandAll();\n                    }\n                    break;\n                case 'expandStateMapping':\n                    this.grid.refresh();\n                    break;\n                case 'gridLines':\n                    this.grid.gridLines = this.gridLines;\n                    break;\n                case 'rowTemplate':\n                    this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n                    break;\n                case 'frozenRows':\n                    this.grid.frozenRows = this.frozenRows;\n                    break;\n                case 'frozenColumns':\n                    this.grid.frozenColumns = this.frozenColumns;\n                    break;\n                case 'rowHeight':\n                    this.grid.rowHeight = this.rowHeight;\n                    break;\n                case 'height':\n                    if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n                        this.element.style.height = this.height;\n                    }\n                    this.grid.height = this.height;\n                    break;\n                case 'width':\n                    if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n                        this.element.style.width = this.width;\n                    }\n                    this.grid.width = this.width;\n                    break;\n                case 'locale':\n                    this.grid.locale = this.locale;\n                    break;\n                case 'selectedRowIndex':\n                    this.grid.selectedRowIndex = this.selectedRowIndex;\n                    break;\n                case 'enableAltRow':\n                    this.grid.enableAltRow = this.enableAltRow;\n                    break;\n                case 'enableHover':\n                    this.grid.enableHover = this.enableHover;\n                    break;\n                case 'enableAutoFill':\n                    this.grid.enableAutoFill = this.enableAutoFill;\n                    break;\n                case 'enableImmutableMode':\n                    this.grid.enableImmutableMode = this.enableImmutableMode;\n                    break;\n                case 'allowExcelExport':\n                    this.grid.allowExcelExport = this.allowExcelExport;\n                    break;\n                case 'allowPdfExport':\n                    this.grid.allowPdfExport = this.allowPdfExport;\n                    break;\n                case 'enableRtl':\n                    this.grid.enableRtl = this.enableRtl;\n                    break;\n                case 'allowReordering':\n                    this.grid.allowReordering = this.allowReordering;\n                    break;\n                case 'allowResizing':\n                    this.grid.allowResizing = this.allowResizing;\n                    break;\n                case 'textWrapSettings':\n                    this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n                    break;\n                case 'allowTextWrap':\n                    this.grid.allowTextWrap = getActualProperties(this.allowTextWrap);\n                    this.grid.refresh();\n                    break;\n                case 'contextMenuItems':\n                    this.grid.contextMenuItems = this.getContextMenu();\n                    break;\n                case 'showColumnChooser':\n                    this.grid.showColumnChooser = this.showColumnChooser;\n                    break;\n                case 'detailTemplate':\n                    this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n                    break;\n                case 'columnMenuItems':\n                    this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n                    break;\n                case 'editSettings':\n                    if (this.grid.isEdit && this.grid.editSettings.mode === 'Normal' && newProp[prop].mode &&\n                        (newProp[prop].mode === 'Cell' || newProp[prop].mode === 'Row')) {\n                        this.grid.closeEdit();\n                    }\n                    this.grid.editSettings = this.getGridEditSettings();\n                    break;\n            }\n            if (requireRefresh) {\n                this.grid.refresh();\n            }\n        }\n    };\n    /**\n     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    TreeGrid.prototype.destroy = function () {\n        var treeGridElement = this.element;\n        if (!treeGridElement) {\n            return;\n        }\n        var hasTreeGridChild = treeGridElement.querySelector('.' + 'e-gridheader') &&\n            treeGridElement.querySelector('.' + 'e-gridcontent') ? true : false;\n        if (hasTreeGridChild) {\n            this.unwireEvents();\n        }\n        this.removeListener();\n        if (hasTreeGridChild) {\n            _super.prototype.destroy.call(this);\n        }\n        if (this.grid) {\n            this.grid.destroy();\n        }\n        if (this.dataModule) {\n            this.dataModule.destroy();\n        }\n        var modules = ['dataModule', 'sortModule', 'renderModule', 'filterModule', 'printModule', 'clipboardModule',\n            'excelExportModule', 'pdfExportModule', 'toolbarModule', 'summaryModule', 'reorderModule', 'resizeModule',\n            'pagerModule', 'keyboardModule', 'columnMenuModule', 'contextMenuModule', 'editModule', 'virtualScrollModule',\n            'selectionModule', 'detailRow', 'rowDragAndDropModule', 'freezeModule'];\n        for (var i = 0; i < modules.length; i++) {\n            if (this[modules[i]]) {\n                this[modules[i]] = null;\n            }\n        }\n        this.element.innerHTML = '';\n        this.grid = null;\n    };\n    /**\n     * Update the TreeGrid model\n     *\n     * @method dataBind\n     * @returns {void}\n     * @private\n     */\n    TreeGrid.prototype.dataBind = function () {\n        if (isNullOrUndefined(this.grid)) {\n            return;\n        }\n        if (!isNullOrUndefined(this.rowDropSettings.targetID) &&\n            isNullOrUndefined(document.getElementById(this.grid.rowDropSettings.targetID))) {\n            document.getElementById(this.rowDropSettings.targetID).id = this.grid.rowDropSettings.targetID;\n            this.rowDropSettings.targetID = this.grid.rowDropSettings.targetID;\n        }\n        _super.prototype.dataBind.call(this);\n        this.grid.dataBind();\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Returns persist properties details\n     * @hidden\n     */\n    TreeGrid.prototype.getPersistData = function () {\n        var keyEntity = ['pageSettings', 'sortSettings',\n            'filterSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'treeColumnIndex'];\n        var ignoreOnPersist = {\n            pageSettings: ['template', 'pageSizes', 'pageSizeMode', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n            filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent', 'hierarchyMode'],\n            searchSettings: ['fields', 'operator', 'ignoreCase'],\n            sortSettings: [], columns: [], selectedRowIndex: []\n        };\n        var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template',\n            'commandTemplate', 'commands', 'dataSource'];\n        for (var i = 0; i < keyEntity.length; i++) {\n            var currentObject = this[keyEntity[i]];\n            for (var k = 0, val = ignoreOnPersist[keyEntity[i]]; (!isNullOrUndefined(val) && k < val.length); k++) {\n                var objVal = val[k];\n                delete currentObject[objVal];\n            }\n        }\n        this.ignoreInArrays(ignoreOnColumn, this.columns);\n        return this.addOnPersist(keyEntity);\n    };\n    TreeGrid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[i].columns) {\n                this.ignoreInColumn(ignoreOnColumn, columns[i]);\n                this.ignoreInArrays(ignoreOnColumn, columns[i].columns);\n            }\n            else {\n                this.ignoreInColumn(ignoreOnColumn, columns[i]);\n            }\n        }\n    };\n    TreeGrid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {\n        for (var i = 0; i < ignoreOnColumn.length; i++) {\n            delete column[ignoreOnColumn[i]];\n            column.filter = {};\n        }\n    };\n    TreeGrid.prototype.mouseClickHandler = function (e) {\n        if (!isNullOrUndefined(e.touches)) {\n            return;\n        }\n        var target = e.target;\n        if ((target.classList.contains('e-treegridexpand') ||\n            target.classList.contains('e-treegridcollapse')) && (!this.isEditCollapse && !this.grid.isEdit)) {\n            this.expandCollapseRequest(target);\n        }\n        this.isEditCollapse = false;\n        this.notify('checkboxSelection', { target: target });\n    };\n    /**\n     * Returns TreeGrid rows\n     *\n     * @returns {HTMLTableRowElement[]} - Returns row elements collection\n     */\n    TreeGrid.prototype.getRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets the pager of the TreeGrid.\n     *\n     * @returns {Element} - Returns pager element\n     */\n    TreeGrid.prototype.getPager = function () {\n        return this.grid.getPager(); //get element from pager\n    };\n    /**\n     * Adds a new record to the TreeGrid. Without passing parameters, it adds empty rows.\n     * > `editSettings.allowEditing` should be true.\n     *\n     * @param {Object} data - Defines the new add record data.\n     * @param {number} index - Defines the row index to be added.\n     * @param {RowPosition} position - Defines the new row position to be added.\n     * @returns {void}\n     */\n    TreeGrid.prototype.addRecord = function (data, index, position) {\n        if (this.editModule) {\n            var isAddedRowByMethod = 'isAddedRowByMethod';\n            this.editModule[isAddedRowByMethod] = true;\n            this.editModule.addRecord(data, index, position);\n        }\n    };\n    /**\n     * Cancels edited state.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.closeEdit = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.closeEdit();\n        }\n    };\n    /**\n     * Saves the cell that is currently edited. It does not save the value to the DataSource.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.saveCell = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.saveCell();\n        }\n    };\n    /**\n     * To update the specified cell by given value without changing into edited state.\n     *\n     * @param {number} rowIndex Defines the row index.\n     * @param {string} field Defines the column field.\n     * @param {string | number | boolean | Date} value - Defines the value to be changed.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateCell = function (rowIndex, field, value) {\n        if (this.grid.editModule) {\n            this.grid.editModule.updateCell(rowIndex, field, value);\n        }\n    };\n    /**\n     * To update the specified row by given values without changing into edited state.\n     *\n     * @param {number} index Defines the row index.\n     * @param {Object} data Defines the data object to be updated.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateRow = function (index, data) {\n        if (this.grid.editModule) {\n            if (!isNullOrUndefined(index)) {\n                var griddata = this.grid.getCurrentViewRecords()[index];\n                extend(griddata, data);\n                this.grid.editModule.updateRow(index, griddata);\n            }\n            else {\n                this.grid.editModule.updateRow(index, data);\n            }\n        }\n    };\n    /**\n     * Delete a record with Given options. If fieldName and data is not given then TreeGrid will delete the selected record.\n     * > `editSettings.allowDeleting` should be true.\n     *\n     * @param {string} fieldName - Defines the primary key field, 'Name of the column'.\n     * @param {Object} data - Defines the JSON data of the record to be deleted.\n     * @returns {void}\n     */\n    TreeGrid.prototype.deleteRecord = function (fieldName, data) {\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRecord(fieldName, data);\n        }\n    };\n    /**\n     * To edit any particular row by TR element.\n     *\n     * @param {HTMLTableRowElement} row - Defines the table row to be edited.\n     * @returns {void}\n     */\n    TreeGrid.prototype.startEdit = function (row) {\n        if (this.grid.editModule) {\n            this.grid.editModule.startEdit(row);\n        }\n    };\n    /**\n     * To edit any particular cell using row index and cell index.\n     *\n     * @param {number} rowIndex - Defines row index to edit a particular cell.\n     * @param {string} field - Defines the field name of the column to perform cell edit.\n     * @returns {void}\n     */\n    TreeGrid.prototype.editCell = function (rowIndex, field) {\n        if (this.editModule) {\n            this.editModule.editCell(rowIndex, field);\n        }\n    };\n    /**\n     * Enables or disables ToolBar items.\n     *\n     * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n     * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n     * @returns {void}\n     */\n    TreeGrid.prototype.enableToolbarItems = function (items, isEnable) {\n        if (this.grid.toolbarModule) {\n            this.grid.toolbarModule.enableItems(items, isEnable);\n        }\n    };\n    /**\n     * If TreeGrid is in editable state, you can save a record by invoking endEdit.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.endEdit = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.endEdit();\n        }\n    };\n    /**\n     * Column chooser can be displayed on screen by given position(X and Y axis).\n     *\n     * @param {number} x - Defines the X axis.\n     * @param {number} y - Defines the Y axis.\n     * @returns {void}\n     */\n    TreeGrid.prototype.openColumnChooser = function (x, y) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.openColumnChooser(x, y);\n        }\n    };\n    /**\n     * Delete any visible row by TR element.\n     *\n     * @param {HTMLTableRowElement} tr - Defines the table row element.\n     * @returns {void}\n     */\n    TreeGrid.prototype.deleteRow = function (tr) {\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRow(tr);\n        }\n    };\n    /**\n     * Get the names of the primary key columns of the TreeGrid.\n     *\n     * @returns {string[]} - Returns primary key collection\n     */\n    TreeGrid.prototype.getPrimaryKeyFieldNames = function () {\n        return this.grid.getPrimaryKeyFieldNames();\n    };\n    /**\n     * Updates particular cell value based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     * @param {string } field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setCellValue = function (key, field, value) {\n        this.grid.setCellValue(key, field, value);\n        var rowIndex = this.grid.getRowIndexByPrimaryKey(key);\n        var record = this.getCurrentViewRecords()[rowIndex];\n        if (!isNullOrUndefined(record)) {\n            editAction({ value: record, action: 'edit' }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, field);\n        }\n    };\n    /**\n     * Updates and refresh the particular row values based on the given primary key value.\n     * > Primary key column must be specified using `columns.isPrimaryKey` property.\n     *\n     *  @param {string| number} key - Specifies the PrimaryKey value of dataSource.\n     *  @param {Object} rowData - To update new data for the particular row.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setRowData = function (key, rowData) {\n        var currentRecords = this.getCurrentViewRecords();\n        var primaryKey = this.grid.getPrimaryKeyFieldNames()[0];\n        var level = 0;\n        var record = {};\n        currentRecords.some(function (value) {\n            if (value[primaryKey] === key) {\n                record = value;\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        level = record.level;\n        rowData.level = level;\n        rowData.index = record.index;\n        rowData.childRecords = record.childRecords;\n        rowData.taskData = record.taskData;\n        rowData.uniqueID = record.uniqueID;\n        rowData.parentItem = record.parentItem;\n        rowData.checkboxState = record.checkboxState;\n        rowData.hasChildRecords = record.hasChildRecords;\n        rowData.parentUniqueID = record.parentUniqueID;\n        rowData.expanded = record.expanded;\n        this.grid.setRowData(key, rowData);\n    };\n    /**\n     * Navigates to the specified target page.\n     *\n     * @param  {number} pageNo - Defines the page number to navigate.\n     * @returns {void}\n     */\n    TreeGrid.prototype.goToPage = function (pageNo) {\n        if (this.grid.pagerModule) {\n            this.grid.pagerModule.goToPage(pageNo);\n        }\n    };\n    /**\n     * Defines the text of external message.\n     *\n     * @param  {string} message - Defines the message to update.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateExternalMessage = function (message) {\n        if (this.pagerModule) {\n            this.grid.pagerModule.updateExternalMessage(message);\n        }\n    };\n    /**\n     * Gets a cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} - Returns cell element in grid content\n     */\n    TreeGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a Column by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {Column} - Returns tree grid column\n     */\n    TreeGrid.prototype.getColumnByField = function (field) {\n        return iterateArrayOrObject(this.columnModel, function (item) {\n            if (item.field === field) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets a column by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     * @returns {Column} - Returns tree grid column\n     */\n    TreeGrid.prototype.getColumnByUid = function (uid) {\n        var Columns = this.initialRender ? this.grid.columns : this.columns;\n        return iterateArrayOrObject(Columns, function (item) {\n            if (item.uid === uid) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Gets the collection of column fields.\n     *\n     * @returns {string[]} - Returns column field name as collection\n     */\n    TreeGrid.prototype.getColumnFieldNames = function () {\n        return this.grid.getColumnFieldNames();\n    };\n    /**\n     * Gets the footer div of the TreeGrid.\n     *\n     * @returns {Element} - Returns footer content div element\n     */\n    TreeGrid.prototype.getFooterContent = function () {\n        return this.grid.getFooterContent();\n    };\n    /**\n     * Gets the footer table element of the TreeGrid.\n     *\n     * @returns {Element} - Returns footer content table element\n     */\n    TreeGrid.prototype.getFooterContentTable = function () {\n        return this.grid.getFooterContentTable();\n    };\n    /**\n     * Shows a column by its column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} showBy - Defines the column key either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.showColumns = function (keys, showBy) {\n        this.grid.showColumns(keys, showBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Hides a column by column name.\n     *\n     * @param  {string|string[]} keys - Defines a single or collection of column names.\n     * @param  {string} hideBy - Defines the column key either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideColumns = function (keys, hideBy) {\n        this.grid.hideColumns(keys, hideBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Gets a column header by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByField = function (field) {\n        return this.grid.getColumnHeaderByField(field);\n    };\n    /**\n     * Gets a column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a column header by UID.\n     *\n     * @param {string} uid - Specifies the column uid.\n     * @returns {Element} - Returns column header element\n     */\n    TreeGrid.prototype.getColumnHeaderByUid = function (uid) {\n        return this.grid.getColumnHeaderByUid(uid);\n    };\n    /**\n     * Gets a column index by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {number} - Returns column index\n     */\n    TreeGrid.prototype.getColumnIndexByField = function (field) {\n        return this.grid.getColumnIndexByField(field);\n    };\n    TreeGrid.prototype.getVirtualColIndexByUid = function (uid) {\n        var columnModel = 'columnModel';\n        var index = iterateArrayOrObject(this.grid[columnModel], function (item, index) {\n            if (item.uid === uid) {\n                return index;\n            }\n            return undefined;\n        })[0];\n        return !isNullOrUndefined(index) ? index : -1;\n    };\n    /**\n     * Gets a column index by UID.\n     *\n     * @param  {string} uid - Specifies the column UID.\n     * @returns {number} - Returns column index\n     */\n    TreeGrid.prototype.getColumnIndexByUid = function (uid) {\n        return this.grid.getColumnIndexByUid(uid);\n    };\n    /**\n     * Gets the columns from the TreeGrid.\n     *\n     * @param {boolean} isRefresh - Defined whether to update DOM\n     * @returns {Column[]} - Returns treegrid columns collection\n     */\n    TreeGrid.prototype.getColumns = function (isRefresh) {\n        this.updateColumnModel(this.grid.getColumns(isRefresh));\n        return this.columnModel;\n    };\n    TreeGrid.prototype.updateColumnModel = function (column) {\n        var temp;\n        var field;\n        var gridColumns = isNullOrUndefined(column) ? this.grid.getColumns() : column;\n        if (this.treeColumnIndex !== -1 && this.columnModel[this.treeColumnIndex] &&\n            !isNullOrUndefined(this.columnModel[this.treeColumnIndex].template)) {\n            temp = this.columnModel[this.treeColumnIndex].template;\n            field = this.columnModel[this.treeColumnIndex].field;\n        }\n        var stackedHeader = false;\n        var gridColumn;\n        if (!this.enableColumnVirtualization || (this.enableColumnVirtualization && this.columnModel.length === gridColumns.length)) {\n            this.columnModel = [];\n            for (var i = 0; i < gridColumns.length; i++) {\n                gridColumn = {};\n                for (var _i = 0, _a = Object.keys(gridColumns[i]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    gridColumn[prop] = gridColumns[i][prop];\n                }\n                this.columnModel.push(new Column(gridColumn));\n                if (field === this.columnModel[i].field && (!isNullOrUndefined(temp) && temp !== '')) {\n                    this.columnModel[i].template = temp;\n                }\n            }\n        }\n        var merge = 'deepMerge';\n        this[merge] = ['columns']; // Workaround for blazor updateModel\n        if (this.grid.columns.length !== this.columnModel.length) {\n            stackedHeader = true;\n        }\n        if (!stackedHeader) {\n            this.setProperties({ columns: this.columnModel }, true);\n        }\n        this[merge] = undefined; // Workaround for blazor updateModel\n        return this.columnModel;\n    };\n    /**\n     * Gets the content div of the TreeGrid.\n     *\n     * @returns {Element} - Return tree grid content element\n     */\n    TreeGrid.prototype.getContent = function () {\n        return this.grid.getContent();\n    };\n    TreeGrid.prototype.mergePersistTreeGridData = function () {\n        var persist1 = 'mergePersistGridData';\n        this.grid[persist1].apply(this);\n    };\n    TreeGrid.prototype.mergeColumns = function (storedColumn, columns) {\n        var persist2 = 'mergeColumns';\n        this.grid[persist2].apply(this, [storedColumn, columns]);\n    };\n    TreeGrid.prototype.updateTreeGridModel = function () {\n        this.setProperties({ filterSettings: getObject('properties', this.grid.filterSettings) }, true);\n        this.setProperties({ pageSettings: getObject('properties', this.grid.pageSettings) }, true);\n        this.setProperties({ searchSettings: getObject('properties', this.grid.searchSettings) }, true);\n        this.setProperties({ sortSettings: getObject('properties', this.grid.sortSettings) }, true);\n    };\n    /**\n     * Gets the content table of the TreeGrid.\n     *\n     * @returns {Element} - Returns content table element\n     */\n    TreeGrid.prototype.getContentTable = function () {\n        return this.grid.getContentTable();\n    };\n    /**\n     * Gets all the TreeGrid's data rows.\n     *\n     * @returns {Element[]} - Returns row elements\n     */\n    TreeGrid.prototype.getDataRows = function () {\n        var dRows = [];\n        var rows = this.grid.getDataRows();\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (!rows[i].classList.contains('e-summaryrow')) {\n                dRows.push(rows[i]);\n            }\n        }\n        return dRows;\n    };\n    /**\n     * Get current visible data of TreeGrid.\n     *\n     * @returns {Object[]} - Returns current view records\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCurrentViewRecords = function () {\n        return this.grid.currentViewData;\n    };\n    /**\n     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n     *\n     * @returns {Object} - Returns batch changes\n     */\n    TreeGrid.prototype.getBatchChanges = function () {\n        return this.grid.editModule.getBatchChanges();\n    };\n    /**\n     * Gets the header div of the TreeGrid.\n     *\n     * @returns {Element} - Returns Header content element\n     */\n    TreeGrid.prototype.getHeaderContent = function () {\n        return this.grid.getHeaderContent();\n    };\n    /**\n     * Gets the header table element of the TreeGrid.\n     *\n     * @returns {Element} - Return header table element\n     */\n    TreeGrid.prototype.getHeaderTable = function () {\n        return this.grid.getHeaderTable();\n    };\n    /**\n     * Gets a row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} - Returns row element\n     */\n    TreeGrid.prototype.getRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Get a row information based on cell\n     *\n     * @param {Element | EventTarget} target - Target row element\n     * @returns {RowInfo} - Returns row information in a JSON object\n     */\n    TreeGrid.prototype.getRowInfo = function (target) {\n        return this.grid.getRowInfo(target);\n    };\n    /**\n     * Gets UID by column name.\n     *\n     * @param  {string} field - Specifies the column name.\n     * @returns {string} - Returns unique id based on column field name given\n     */\n    TreeGrid.prototype.getUidByColumnField = function (field) {\n        return this.grid.getUidByColumnField(field);\n    };\n    /**\n     * Gets the visible columns from the TreeGrid.\n     *\n     * @returns {Column[]} - Returns visible columns collection\n     */\n    TreeGrid.prototype.getVisibleColumns = function () {\n        var cols = [];\n        for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n            var col = _a[_i];\n            if (col.visible) {\n                cols.push(col);\n            }\n        }\n        return cols;\n    };\n    /**\n     * By default, TreeGrid shows the spinner for all its actions. You can use this method to show spinner at your needed time.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.showSpinner = function () {\n        showSpinner(this.element);\n    };\n    /**\n     * Manually shown spinner needs to hide by `hideSpinnner`.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideSpinner = function () {\n        hideSpinner(this.element);\n    };\n    /**\n     * Refreshes the TreeGrid header and content.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refresh = function () {\n        this.uniqueIDCollection = {};\n        this.convertTreeData(this.dataSource);\n        if (!isCountRequired(this)) {\n            this.grid.dataSource = !(this.dataSource instanceof DataManager) ? this.flatData :\n                new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n        }\n        this.grid.refresh();\n    };\n    /**\n     * Get the records of checked rows.\n     *\n     * @returns {Object[]} - Returns records that has been checked\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCheckedRecords = function () {\n        return this.selectionModule.getCheckedrecords();\n    };\n    /**\n     * Get the visible records corresponding to rows visually displayed.\n     *\n     * @returns {Object[]} - Returns visible records based on collapse state of rows\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getVisibleRecords = function () {\n        var visibleRecords = [];\n        var currentViewRecords = this.getCurrentViewRecords();\n        if (!this.allowPaging) {\n            for (var i = 0; i < currentViewRecords.length; i++) {\n                visibleRecords.push(currentViewRecords[i]);\n                if (!currentViewRecords[i].expanded) {\n                    i += findChildrenRecords(currentViewRecords[i]).length;\n                }\n            }\n        }\n        else {\n            visibleRecords = currentViewRecords;\n        }\n        return visibleRecords;\n    };\n    /**\n     * Get the indexes of checked rows.\n     *\n     * @returns {number[]} - Returns checked row indexes\n     */\n    TreeGrid.prototype.getCheckedRowIndexes = function () {\n        return this.selectionModule.getCheckedRowIndexes();\n    };\n    /**\n     * Checked the checkboxes using rowIndexes.\n     *\n     * @param {number[]} indexes - row indexes\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCheckboxes = function (indexes) {\n        this.selectionModule.selectCheckboxes(indexes);\n    };\n    /**\n     * Refreshes the TreeGrid column changes.\n     *\n     * @param {boolean} refreshUI - Defined whether to refresh the DOM\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshColumns = function (refreshUI) {\n        if (isNullOrUndefined(refreshUI) || refreshUI) {\n            this.grid.columns = this.getGridColumns(this.columns);\n            this.grid.refreshColumns();\n        }\n        else {\n            this.grid.setProperties({ columns: this.getGridColumns(this.columns) }, true);\n        }\n    };\n    /**\n     * Refreshes the TreeGrid header.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshHeader = function () {\n        this.grid.refreshHeader();\n    };\n    /**\n     * Expands or collapse child records\n     *\n     * @param {HTMLElement} target - Expand collapse icon cell as target element\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.expandCollapseRequest = function (target) {\n        if (this.editSettings.mode === 'Batch') {\n            var obj = 'dialogObj';\n            var showDialog = 'showDialog';\n            if (this.getBatchChanges()[this.changedRecords].length ||\n                this.getBatchChanges()[this.deletedRecords].length || this.getBatchChanges()[this.addedRecords].length) {\n                var dialogObj = this.grid.editModule[obj];\n                this.grid.editModule[showDialog]('CancelEdit', dialogObj);\n                this.targetElement = target;\n                return;\n            }\n        }\n        if (this.rowTemplate) {\n            var rowInfo = target.closest('.e-treerowcell').parentElement;\n            var record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo, record);\n            }\n            else {\n                this.expandRow(rowInfo, record);\n            }\n        }\n        else {\n            var rowInfo = this.grid.getRowInfo(target);\n            var record = rowInfo.rowData;\n            if (this.enableImmutableMode) {\n                record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n            }\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo.row, record);\n            }\n            else {\n                this.expandRow(rowInfo.row, record);\n            }\n        }\n    };\n    /**\n     * Expands child rows\n     *\n     * @param {HTMLTableRowElement} row - Expands the given row\n     * @param {Object} record - Expands the given record\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandRow = function (row, record) {\n        var _this = this;\n        record = this.getCollapseExpandRecords(row, record);\n        if (!isNullOrUndefined(row) && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        var args = { data: record, row: row, cancel: false };\n        this.trigger(events.expanding, args, function (expandingArgs) {\n            if (!expandingArgs.cancel) {\n                _this.expandCollapse('expand', row, record);\n                var children = 'Children';\n                if (!(isRemoteData(_this) && !isOffline(_this)) && (!isCountRequired(_this) || !isNullOrUndefined(record[children]))) {\n                    var collapseArgs = { data: record, row: row };\n                    _this.setHeightForFrozenContent();\n                    _this.trigger(events.expanded, collapseArgs);\n                }\n            }\n        });\n    };\n    TreeGrid.prototype.setHeightForFrozenContent = function () {\n        var freeze = (this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (this.grid.getFrozenColumns() > 0 || freeze) {\n            this.grid.contentModule.refreshScrollOffset();\n        }\n    };\n    TreeGrid.prototype.getCollapseExpandRecords = function (row, record) {\n        if (this.allowPaging && this.pageSettings.pageSizeMode === 'All' && this.isExpandAll && isNullOrUndefined(record) &&\n            !isRemoteData(this)) {\n            record = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        else if (isNullOrUndefined(record)) {\n            record = this.grid.getCurrentViewRecords()[row.rowIndex];\n        }\n        return record;\n    };\n    /**\n     * Collapses child rows\n     *\n     * @param {HTMLTableRowElement} row - Collapse the given row\n     * @param {Object} record - Collapse the given record\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseRow = function (row, record) {\n        var _this = this;\n        record = this.getCollapseExpandRecords(row, record);\n        var args = { data: record, row: row, cancel: false };\n        this.trigger(events.collapsing, args, function (collapsingArgs) {\n            if (!collapsingArgs.cancel) {\n                _this.expandCollapse('collapse', row, record);\n                var collapseArgs = { data: record, row: row };\n                if (!isRemoteData(_this)) {\n                    _this.setHeightForFrozenContent();\n                    _this.trigger(events.collapsed, collapseArgs);\n                    if (_this.enableInfiniteScrolling) {\n                        var scrollHeight = _this.grid.getContent().firstElementChild.scrollHeight;\n                        var scrollTop = _this.grid.getContent().firstElementChild.scrollTop;\n                        if ((scrollHeight - scrollTop) < _this.grid.getRowHeight() + +_this.height) {\n                            _this.grid.getContent().firstElementChild.scrollBy(0, _this.grid.getRowHeight());\n                        }\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Expands the records at specific hierarchical level\n     *\n     * @param {number} level - Expands the parent rows at given level\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var rec = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = true;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.expandRow(null, rec);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var row = getObject('rows', rec);\n            var record = getObject('records', rec);\n            for (var i = 0; i < record.length; i++) {\n                if (record[i].parentItem !== undefined) {\n                    var pindex = this.flatData[record[i].parentItem.index].index;\n                    if (this.flatData[pindex].expanded === false) {\n                        record.push(this.flatData[pindex]);\n                        this.flatData[pindex].expanded = true;\n                    }\n                }\n                this.expandRow(row[i], record[i]);\n            }\n        }\n    };\n    TreeGrid.prototype.getRecordDetails = function (level) {\n        var rows = this.getRows().filter(function (e) {\n            return (e.className.indexOf('level' + level) !== -1\n                && (e.querySelector('.e-treegridcollapse') || e.querySelector('.e-treegridexpand')));\n        });\n        var records = this.getCurrentViewRecords().filter(function (e) {\n            return e.level === level && e.hasChildRecords;\n        });\n        var obj = { records: records, rows: rows };\n        return obj;\n    };\n    /**\n     * Collapses the records at specific hierarchical level\n     *\n     * @param {number} level - Define the parent row level which needs to be collapsed\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var record = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = false;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.collapseRow(null, record);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var rows = getObject('rows', rec);\n            var records = getObject('records', rec);\n            for (var i = 0; i < records.length; i++) {\n                this.collapseRow(rows[i], records[i]);\n            }\n        }\n        if (!this.grid.contentModule.isDataSourceChanged && this.enableVirtualization && this.getRows()\n            && this.parentData.length === this.getRows().length) {\n            var endIndex = 'endIndex';\n            this.grid.contentModule.startIndex = -1;\n            this.grid.contentModule[endIndex] = -1;\n        }\n    };\n    /**\n     * Expands All the rows\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAll = function () {\n        this.expandCollapseAll('expand');\n    };\n    /**\n     * Collapses All the rows\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAll = function () {\n        this.expandCollapseAll('collapse');\n    };\n    TreeGrid.prototype.expandCollapseAll = function (action) {\n        var rows = this.getRows().filter(function (e) {\n            return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n        });\n        if (!rows.length && this.getRows().length) {\n            rows.push(this.getRows()[0]);\n        }\n        this.isExpandAll = true;\n        this.isCollapseAll = true;\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            this.flatData.filter(function (e) {\n                if (e.hasChildRecords) {\n                    e.expanded = action === 'collapse' ? false : true;\n                }\n            });\n            if (rows.length) {\n                if (action === 'collapse') {\n                    this.collapseRow(rows[0]);\n                }\n                else {\n                    this.expandRow(rows[0]);\n                }\n            }\n            else if (this.allowPaging) {\n                var isExpandCollapseall = this.enableCollapseAll;\n                this.setProperties({ enableCollapseAll: true }, true);\n                this.grid.pagerModule.goToPage(1);\n                this.setProperties({ enableCollapseAll: isExpandCollapseall }, true);\n            }\n        }\n        else {\n            for (var i = 0; i < rows.length; i++) {\n                if (action === 'collapse') {\n                    this.collapseRow(rows[i]);\n                }\n                else {\n                    this.expandRow(rows[i]);\n                }\n            }\n        }\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n    };\n    TreeGrid.prototype.expandCollapse = function (action, row, record, isChild) {\n        var expandingArgs = { row: row, data: record, childData: [], requestType: action };\n        var childRecords = this.getCurrentViewRecords().filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        var targetEle;\n        if (!isRemoteData(this) && action === 'expand' && this.isSelfReference && isCountRequired(this) && !childRecords.length) {\n            this.updateChildOnDemand(expandingArgs);\n        }\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows = this.getContentTable().rows;\n            gridRows = [].slice.call(rows);\n        }\n        var rowIndex;\n        if (isNullOrUndefined(row)) {\n            rowIndex = this.getCurrentViewRecords().indexOf(record);\n            row = gridRows[rowIndex];\n        }\n        else {\n            rowIndex = +row.getAttribute('aria-rowindex');\n        }\n        if (!isNullOrUndefined(row)) {\n            row.setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n        }\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)\n            && !isCountRequired(this)) {\n            this.notify(events.localPagedExpandCollapse, { action: action, row: row, record: record });\n        }\n        else {\n            var displayAction = void 0;\n            if (action === 'expand') {\n                displayAction = 'table-row';\n                if (!isChild) {\n                    record.expanded = true;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridexpand')) {\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n                removeClass([targetEle], 'e-treegridcollapse');\n            }\n            else {\n                displayAction = 'none';\n                if (!isChild || isCountRequired(this)) {\n                    record.expanded = false;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    !record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridcollapse')) {\n                    addClass([targetEle], 'e-treegridcollapse');\n                }\n                removeClass([targetEle], 'e-treegridexpand');\n            }\n            var detailrows = gridRows.filter(function (r) {\n                return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n            });\n            if (isRemoteData(this) && !isOffline(this)) {\n                this.remoteExpand(action, row, record);\n            }\n            else {\n                if ((!isCountRequired(this) || childRecords.length) || action === 'collapse') {\n                    this.localExpand(action, row, record);\n                }\n            }\n            if (this.isPixelHeight() && !row.cells[0].classList.contains('e-lastrowcell')) {\n                var totalRows = this.getRows();\n                var rows = this.getContentTable().rows;\n                totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i > 0; i--) {\n                    if (!isHidden(totalRows[i])) {\n                        var table = this.getContentTable();\n                        var sHeight = table.scrollHeight;\n                        var clientHeight = this.getContent().clientHeight;\n                        this.lastRowBorder(totalRows[i], sHeight <= clientHeight);\n                        break;\n                    }\n                }\n            }\n            this.notify('rowExpandCollapse', { detailrows: detailrows, action: displayAction, record: record, row: row });\n            this.updateAltRow(gridRows);\n        }\n    };\n    TreeGrid.prototype.updateChildOnDemand = function (expandingArgs) {\n        var _this = this;\n        var deff = new Deferred();\n        var childDataBind = 'childDataBind';\n        expandingArgs[childDataBind] = deff.resolve;\n        var record = expandingArgs.data;\n        this.trigger(events.dataStateChange, expandingArgs);\n        deff.promise.then(function () {\n            if (expandingArgs.childData.length) {\n                var currentData = (_this.flatData);\n                var index = 0;\n                for (var i = 0; i < currentData.length; i++) {\n                    if (currentData[i].taskData === record.taskData) {\n                        index = i;\n                        break;\n                    }\n                }\n                var data_1 = getValue('result', _this.dataSource);\n                var childData = extendArray(expandingArgs.childData);\n                var length_1 = record[_this.childMapping] ? record[_this.childMapping].length > childData.length ?\n                    record[_this.childMapping].length : childData.length : childData.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (record[_this.childMapping]) {\n                        data_1.filter(function (e, i) {\n                            if (e[_this.parentIdMapping] === record[_this.idMapping]) {\n                                data_1.splice(i, 1);\n                            }\n                        });\n                    }\n                    if (childData[i]) {\n                        childData[i].level = record.level + 1;\n                        childData[i].index = Math.ceil(Math.random() * 1000);\n                        childData[i].parentItem = extend({}, record);\n                        childData[i].taskData = extend({}, childData[i]);\n                        delete childData[i].parentItem.childRecords;\n                        delete childData[i].taskData.parentItem;\n                        childData[i].parentUniqueID = record.uniqueID;\n                        childData[i].uniqueID = getUid(_this.element.id + '_data_');\n                        setValue('uniqueIDCollection.' + childData[i].uniqueID, childData[i], _this);\n                        if (!isNullOrUndefined(childData[i][_this.childMapping]) ||\n                            (childData[i][_this.hasChildMapping] && isCountRequired(_this))) {\n                            childData[i].hasChildRecords = true;\n                        }\n                        currentData.splice(index + 1 + i, record[_this.childMapping] && record[_this.childMapping][i] ? 1 : 0, childData[i]);\n                    }\n                    else {\n                        currentData.splice(index + 1 + i, 1);\n                    }\n                }\n                currentData[index][_this.childMapping] = childData;\n                currentData[index].childRecords = childData;\n                currentData[index].expanded = true;\n                setValue('uniqueIDCollection.' + currentData[index].uniqueID, currentData[index], _this);\n                for (var j = 0; j < expandingArgs.childData.length; j++) {\n                    data_1.push(expandingArgs.childData[j]);\n                }\n            }\n            _this.isExpandRefresh = true;\n            _this.grid.refresh();\n            _this.setHeightForFrozenContent();\n            _this.trigger(events.expanded, expandingArgs);\n        });\n    };\n    TreeGrid.prototype.remoteExpand = function (action, row, record) {\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows_1 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_1);\n        }\n        var args = { data: record, row: row };\n        var rows = [];\n        rows = gridRows.filter(function (r) {\n            return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n        });\n        if (action === 'expand') {\n            this.notify(events.remoteExpand, { record: record, rows: rows, parentRow: row });\n            var args_1 = { row: row, data: record };\n            if (rows.length > 0) {\n                this.setHeightForFrozenContent();\n                this.trigger(events.expanded, args_1);\n            }\n        }\n        else {\n            this.collapseRemoteChild({ record: record, rows: rows });\n            this.setHeightForFrozenContent();\n            this.trigger(events.collapsed, args);\n        }\n    };\n    TreeGrid.prototype.localExpand = function (action, row, record) {\n        var rows;\n        var childRecords = this.getCurrentViewRecords().filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        if (this.isPixelHeight() && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        var movableRows;\n        var freezeRightRows;\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows_2 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_2);\n        }\n        var displayAction = (action === 'expand') ? 'table-row' : 'none';\n        var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n        if (this.enableImmutableMode && !this.allowPaging) {\n            rows = [];\n            for (var i = 0; i < childRecords.length; i++) {\n                var rowIndex = this.grid.getRowIndexByPrimaryKey(childRecords[i][primaryKeyField]);\n                rows.push(this.getRows()[rowIndex]);\n            }\n        }\n        else {\n            rows = gridRows.filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        var freeze = (this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (this.frozenRows || this.frozenColumns || this.getFrozenColumns() || freeze) {\n            movableRows = this.getMovableRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        if (freeze) {\n            freezeRightRows = this.getFrozenRightRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        for (var i = 0; i < rows.length; i++) {\n            if (!isNullOrUndefined(rows[i])) {\n                rows[i].style.display = displayAction;\n            }\n            if (!isNullOrUndefined(movableRows)) {\n                movableRows[i].style.display = displayAction;\n            }\n            if (!isNullOrUndefined(freezeRightRows)) {\n                freezeRightRows[i].style.display = displayAction;\n            }\n            this.notify('childRowExpand', { row: rows[i] });\n            if (!isNullOrUndefined(childRecords[i].childRecords) && (action !== 'expand' ||\n                isNullOrUndefined(childRecords[i].expanded) || childRecords[i].expanded)) {\n                this.expandCollapse(action, rows[i], childRecords[i], true);\n                if (this.frozenColumns <= this.treeColumnIndex && !isNullOrUndefined(movableRows)) {\n                    this.expandCollapse(action, movableRows[i], childRecords[i], true);\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.updateAltRow = function (rows) {\n        if (this.enableAltRow && !this.rowTemplate) {\n            var visibleRowCount = 0;\n            for (var i = 0; rows && i < rows.length; i++) {\n                var gridRow = rows[i];\n                if (gridRow.style.display !== 'none') {\n                    if (gridRow.classList.contains('e-altrow')) {\n                        removeClass([gridRow], 'e-altrow');\n                    }\n                    if (visibleRowCount % 2 !== 0 && !gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        addClass([gridRow], 'e-altrow');\n                    }\n                    if (!gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        visibleRowCount++;\n                    }\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.treeColumnRowTemplate = function () {\n        if (this.rowTemplate) {\n            var rows = this.getContentTable().rows;\n            rows = [].slice.call(rows);\n            for (var i = 0; i < rows.length; i++) {\n                var rcell = this.grid.getContentTable().rows[i].cells[this.treeColumnIndex];\n                var row = rows[i];\n                var rowData = this.grid.getRowsObject()[i].data;\n                var arg = { data: rowData, row: row, cell: rcell, column: this.getColumns()[this.treeColumnIndex] };\n                this.renderModule.cellRender(arg);\n            }\n        }\n    };\n    TreeGrid.prototype.collapseRemoteChild = function (rowDetails, isChild) {\n        if (!isChild) {\n            rowDetails.record.expanded = false;\n        }\n        var rows = rowDetails.rows;\n        var row;\n        var childRecord;\n        var movablerows = [];\n        var rightrows = [];\n        var freeze = (this.getFrozenLeftColumnsCount() > 0 || this.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (freeze) {\n            movablerows = this.getMovableRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n            rightrows = this.getFrozenRightRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n        }\n        for (var i = 0; i < rows.length; i++) {\n            rows[i].style.display = 'none';\n            row = rows[i];\n            var collapsingTd = rows[i].querySelector('.e-detailrowexpand');\n            if (!isNullOrUndefined(collapsingTd)) {\n                this.grid.detailRowModule.collapse(collapsingTd);\n            }\n            if (freeze) {\n                movablerows[i].style.display = 'none';\n                rightrows[i].style.display = 'none';\n                if (!rows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                    if (movablerows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = movablerows[i];\n                    }\n                    else if (rightrows[i].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = rightrows[i];\n                    }\n                }\n            }\n            if (row.querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                var expandElement = row.querySelector('.e-treecolumn-container .e-treegridexpand');\n                childRecord = this.rowTemplate ? this.grid.getCurrentViewRecords()[rows[i].rowIndex] :\n                    this.grid.getRowObjectFromUID(rows[i].getAttribute('data-Uid')).data;\n                if (!isNullOrUndefined(expandElement) && childRecord.expanded) {\n                    removeClass([expandElement], 'e-treegridexpand');\n                    addClass([expandElement], 'e-treegridcollapse');\n                }\n                var cRow = [];\n                var eRows = this.getRows();\n                for (var i_1 = 0; i_1 < eRows.length; i_1++) {\n                    if (eRows[i_1].querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1))) {\n                        cRow.push(eRows[i_1]);\n                    }\n                }\n                if (cRow.length && childRecord.expanded) {\n                    this.collapseRemoteChild({ record: childRecord, rows: cRow }, true);\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.addListener = function () {\n        this.on('updateResults', this.updateResultModel, this);\n        this.grid.on('initial-end', this.afterGridRender, this);\n    };\n    TreeGrid.prototype.updateResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.removeListener = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        this.off('updateResults', this.updateResultModel);\n        this.grid.off('initial-end', this.afterGridRender);\n    };\n    /**\n     * Filters TreeGrid row by column name with the given options.\n     *\n     * @param  {string} fieldName - Defines the field name of the column.\n     * @param  {string} filterOperator - Defines the operator to filter records.\n     * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.\n     * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.\n     * @param  {boolean} matchCase - If match case is set to true, the TreeGrid filters the records with exact match. if false, it filters\n     * case insensitive records (uppercase and lowercase letters are treated the same).\n     * @param  {boolean} ignoreAccent - If ignoreAccent is set to true,\n     * then filter ignores diacritic characters or accents while filtering.\n     * @param  {string} actualFilterValue - Defines the actual filter value for filter column.\n     * @param  {string} actualOperator - Defines the actual filter operator for filter column.\n     * @returns {void}\n     */\n    TreeGrid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n        this.grid.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n    };\n    /**\n     * Clears all the filtered rows of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearFiltering = function () {\n        this.grid.clearFiltering();\n    };\n    /**\n     * Removes filtered column by field name.\n     *\n     * @param  {string} field - Defines column field name to remove filter.\n     * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n        this.grid.removeFilteredColsByField(field, isClearFilterBar);\n    };\n    /**\n     * Selects a row by given index.\n     *\n     * @param  {number} index - Defines the row index.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRow = function (index, isToggle) {\n        this.grid.selectRow(index, isToggle);\n    };\n    /**\n     * Selects a collection of rows by indexes.\n     *\n     * @param  {number[]} rowIndexes - Specifies the row indexes.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRows = function (rowIndexes) {\n        this.grid.selectRows(rowIndexes);\n    };\n    /**\n     * Deselects the current selected rows and cells.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSelection = function () {\n        this.grid.clearSelection();\n    };\n    /**\n     * Copy the selected rows or cells data into clipboard.\n     *\n     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.\n     * @returns {void}\n     */\n    TreeGrid.prototype.copy = function (withHeader) {\n        this.clipboardModule.copy(withHeader);\n    };\n    /**\n     * Paste data from clipboard to selected cells.\n     *\n     * @param {boolean} data - Specifies the date for paste.\n     * @param {boolean} rowIndex - Specifies the row index.\n     * @param {boolean} colIndex - Specifies the column index.\n     * @returns {void}\n     */\n    TreeGrid.prototype.paste = function (data, rowIndex, colIndex) {\n        this.clipboardModule.paste(data, rowIndex, colIndex);\n    };\n    /**\n     * Selects a cell by the given index.\n     *\n     * @param  {IIndex} cellIndex - Defines the row and column indexes.\n     * @param  {boolean} isToggle - If set to true, then it toggles the selection.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCell = function (cellIndex, isToggle) {\n        this.grid.selectCell(cellIndex, isToggle);\n    };\n    /**\n     * Gets the collection of selected rows.\n     *\n     * @returns {Element[]} - Returns selected row elements collection\n     */\n    TreeGrid.prototype.getSelectedRows = function () {\n        return this.grid.getSelectedRows();\n    };\n    /**\n     * Gets a movable table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} - Returns movable cell element from the indexes passed\n     */\n    TreeGrid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getMovableCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets all the TreeGrid's movable table data rows.\n     *\n     * @returns {Element[]} - Returns element collection of movable rows\n     */\n    TreeGrid.prototype.getMovableDataRows = function () {\n        return this.grid.getMovableDataRows();\n    };\n    /**\n     * Gets a movable tables row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} - Returns movable row based on index passed\n     */\n    TreeGrid.prototype.getMovableRowByIndex = function (index) {\n        return this.grid.getMovableRowByIndex(index);\n    };\n    /**\n     * Gets the TreeGrid's movable content rows from frozen treegrid.\n     *\n     * @returns {Element[]}: Returns movable row element\n     */\n    TreeGrid.prototype.getMovableRows = function () {\n        return this.grid.getMovableRows();\n    };\n    /**\n     * Gets a frozen right tables row element by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} returns the element\n     */\n    TreeGrid.prototype.getFrozenRightRowByIndex = function (index) {\n        return this.grid.getFrozenRightRowByIndex(index);\n    };\n    /**\n     * Gets the Tree Grid's frozen right content rows from frozen Tree Grid.\n     *\n     * @returns {Element[]} returns the element\n     */\n    TreeGrid.prototype.getFrozenRightRows = function () {\n        return this.grid.getFrozenRightRows();\n    };\n    /**\n     * Gets all the Tree Grid's frozen right table data rows.\n     *\n     * @returns {Element[]} Returns the Element\n     */\n    TreeGrid.prototype.getFrozenRightDataRows = function () {\n        return this.grid.getFrozenRightDataRows();\n    };\n    /**\n     * Gets a frozen right table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} Returns the Element\n     */\n    TreeGrid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getFrozenRightCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a frozen left column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     */\n    TreeGrid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n        return this.grid.getFrozenLeftColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a frozen right column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     */\n    TreeGrid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n        return this.grid.getFrozenRightColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a movable column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     */\n    TreeGrid.prototype.getMovableColumnHeaderByIndex = function (index) {\n        return this.grid.getMovableColumnHeaderByIndex(index);\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the movable column count\n     */\n    TreeGrid.prototype.getMovableColumnsCount = function () {\n        return this.grid.getMovableColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Left column\n     */\n    TreeGrid.prototype.getFrozenLeftColumnsCount = function () {\n        return this.grid.getFrozenLeftColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Right column count\n     */\n    TreeGrid.prototype.getFrozenRightColumnsCount = function () {\n        return this.grid.getFrozenRightColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenLeftColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenLeftColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenRightColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenRightColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible movable count\n     */\n    TreeGrid.prototype.getVisibleMovableCount = function () {\n        return this.grid.getVisibleMovableCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen Right count\n     */\n    TreeGrid.prototype.getVisibleFrozenRightCount = function () {\n        return this.grid.getVisibleFrozenRightCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen left count\n     */\n    TreeGrid.prototype.getVisibleFrozenLeftCount = function () {\n        return this.grid.getVisibleFrozenLeftCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getMovableColumns = function () {\n        this.updateColumnModel(this.grid.getMovableColumns());\n        return this.columnModel;\n    };\n    /**\n     * Gets the number of frozen column in tree grid\n     *\n     * @hidden\n     * @returns {number} - Returns frozen column count\n     */\n    TreeGrid.prototype.getFrozenColumns = function () {\n        return this.getFrozenCount(this.columns, 0) + this.frozenColumns;\n    };\n    TreeGrid.prototype.getFrozenCount = function (cols, cnt) {\n        for (var j = 0, len = cols.length; j < len; j++) {\n            if (cols[j].columns) {\n                cnt = this.getFrozenCount(cols[j].columns, cnt);\n            }\n            else {\n                if (cols[j].isFrozen) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    };\n    /**\n     * Gets the collection of selected row indexes.\n     *\n     * @returns {number[]} - Returns selected rows index collection\n     */\n    TreeGrid.prototype.getSelectedRowIndexes = function () {\n        return this.grid.getSelectedRowIndexes();\n    };\n    /**\n     * Gets the collection of selected row and cell indexes.\n     *\n     * @returns {ISelectedCell[]} - Returns selected cell's index details\n     */\n    TreeGrid.prototype.getSelectedRowCellIndexes = function () {\n        return this.grid.getSelectedRowCellIndexes();\n    };\n    /**\n     * Gets the collection of selected records.\n     *\n     * @isGenericType true\n     * @returns {Object[]} - Returns selected records collection\n     */\n    TreeGrid.prototype.getSelectedRecords = function () {\n        return this.grid.getSelectedRecords();\n    };\n    /**\n     * Gets the data module.\n     *\n     * @returns {{baseModule: Data, treeModule: DataManipulation}}: Returns grid and treegrid data module\n     */\n    TreeGrid.prototype.getDataModule = function () {\n        return { baseModule: this.grid.getDataModule(), treeModule: this.dataModule };\n    };\n    /**\n     * Reorder the rows based on given indexes and position\n     *\n     * @param {number[]} fromIndexes - Source indexes of rows\n     * @param {number} toIndex - Destination index of row\n     * @param {string} position - Defines drop position as above or below or child\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex, position);\n    };\n    var TreeGrid_1;\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenRows\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], TreeGrid.prototype, \"clipMode\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"columns\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"childMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"hasChildMapping\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"treeColumnIndex\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"idMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"parentIdMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableCollapseAll\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"expandStateMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowRowDragAndDrop\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"query\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"cloneQuery\", void 0);\n    __decorate([\n        Property('AllPages')\n    ], TreeGrid.prototype, \"printMode\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPaging\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"loadChildOnDemand\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        Complex({}, TextWrapSettings)\n    ], TreeGrid.prototype, \"textWrapSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowReordering\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowResizing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"autoCheckHierarchy\", void 0);\n    __decorate([\n        Complex({}, PageSettings)\n    ], TreeGrid.prototype, \"pageSettings\", void 0);\n    __decorate([\n        Complex({}, RowDropSettings)\n    ], TreeGrid.prototype, \"rowDropSettings\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"pagerTemplate\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnMenu\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnChooser\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowSorting\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowMultiSorting\", void 0);\n    __decorate([\n        Complex({}, SortSettings)\n    ], TreeGrid.prototype, \"sortSettings\", void 0);\n    __decorate([\n        Collection([], AggregateRow)\n    ], TreeGrid.prototype, \"aggregates\", void 0);\n    __decorate([\n        Complex({}, EditSettings)\n    ], TreeGrid.prototype, \"editSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowFiltering\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"detailTemplate\", void 0);\n    __decorate([\n        Complex({}, FilterSettings)\n    ], TreeGrid.prototype, \"filterSettings\", void 0);\n    __decorate([\n        Complex({}, SearchSettings)\n    ], TreeGrid.prototype, \"searchSettings\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbar\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        Property('Default')\n    ], TreeGrid.prototype, \"gridLines\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"contextMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"columnMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"rowTemplate\", void 0);\n    __decorate([\n        Property('Parent')\n    ], TreeGrid.prototype, \"copyHierarchyMode\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"rowHeight\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"enableAltRow\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowKeyboard\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableHover\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableAutoFill\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableImmutableMode\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"height\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"width\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableColumnVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableInfiniteScrolling\", void 0);\n    __decorate([\n        Complex({}, InfiniteScrollSettings)\n    ], TreeGrid.prototype, \"infiniteScrollSettings\", void 0);\n    __decorate([\n        Property('All')\n    ], TreeGrid.prototype, \"columnQueryMode\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"load\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSaved\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionBegin\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beginEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchCancel\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataStateChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"recordDoubleClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"detailDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowSelection\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"headerCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"checkboxChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"printComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePrint\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"toolbarClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeCopy\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePaste\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStartHelper\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrop\", void 0);\n    __decorate([\n        Property(-1)\n    ], TreeGrid.prototype, \"selectedRowIndex\", void 0);\n    __decorate([\n        Complex({}, SelectionSettings)\n    ], TreeGrid.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowExcelExport\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeExcelExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelExportComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfExportComplete\", void 0);\n    TreeGrid = TreeGrid_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeGrid);\n    return TreeGrid;\n}(Component));\nexport { TreeGrid };\n"]},"metadata":{},"sourceType":"module"}