{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js\";\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv';\nimport DataFrame from \"dataframe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Papa = require('papaparse'); // const puppeteer = require('puppeteer');\n\n\nclass SchemaPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null,\n      columns: []\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadCsv(); // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n      var binded = this.loadCsvBinded.bind(this);\n      Papa.parse(csvFile, {\n        download: true,\n        complete: binded,\n        encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data;\n    let columns = csv[0];\n    let data = csv.slice(1);\n    let df = new DataFrame(data, columns); // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.state.columns = columns;\n    this.state.dataframe = df;\n    this.getGanttGraph();\n  }\n  /* dataframe getters */\n\n\n  getGanttInfoAsDataframe(criterions) {\n    let dfs = []; // for each criterion, fetch the required column infos \n\n    console.log(criterions);\n    criterions.forEach(criterion => {\n      let df = this.state.dataframe.filter(row => row.get(\"CRITERES\") === criterion).select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    console.log(totalDf);\n    return totalDf;\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\");\n    df = df.chain(this.translateCycleLifeToInteger); // sort first by priority and then by cycle life to make groups\n\n    df = df.sortBy(\"Priorité\");\n    df = df.sortBy(\"Cycle life priority\");\n    return df;\n  }\n\n  getGanttGraph(criterions) {\n    let df = this.getGanttInfoAsDataframe([\"L'entreprise est-elle ouverte à une démarche NR qui pourrait fédérer les énergies autour d'un projet novateur ?\", \"Le besoin métier est-il exprimé ?\"]);\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let baseXPosition = new Date(2014, 2, 22);\n    let widthOfCycleLife = 4;\n    let graph = [[{\n      type: 'string',\n      label: 'Task ID'\n    }, {\n      type: 'string',\n      label: 'Task Name'\n    }, {\n      type: 'string',\n      label: 'Resource'\n    }, {\n      type: 'date',\n      label: 'Start Date'\n    }, {\n      type: 'date',\n      label: 'End Date'\n    }, {\n      type: 'number',\n      label: 'Duration'\n    }, {\n      type: 'number',\n      label: 'Percent Complete'\n    }, {\n      type: 'string',\n      label: 'Dependencies'\n    }]];\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      let begXPosition = new Date().setDate(baseXPosition.getDate() + widthOfCycleLife * cycleLifeIndex);\n      let endXPosition = new Date().setDate(baseXPosition.getDate() + widthOfCycleLife * (cycleLifeIndex + 1));\n      graph.push(['2014Spring', 'Spring 2014', 'spring', begXPosition, endXPosition, null, 100, null]);\n      console.log(row);\n    });\n    return graph;\n  }\n  /* helpers */\n\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\");\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4\n    };\n    row = row.set(\"Priorité\", priorities[priority]);\n    return row;\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\");\n    let priorities = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife));\n    return row;\n  } // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  //   await browser.close();\n  // } \n  // timeout(delay) {\n  //     return new Promise( res => setTimeout(res, delay) );\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-8 col-10\",\n            children: /*#__PURE__*/_jsxDEV(Chart, {\n              width: '100%',\n              height: '400px',\n              chartType: \"Gantt\",\n              loader: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading Chart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 11\n              }, this),\n              data: this.getGanttGraph(),\n              options: {\n                height: 400,\n                gantt: {\n                  trackHeight: 30\n                }\n              },\n              rootProps: {\n                'data-testid': '2'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-2 col-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SchemaPage;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/SchemaPage.js"],"names":["React","Component","Chart","csvFile","DataFrame","Papa","require","SchemaPage","constructor","props","state","dataframe","columns","componentWillMount","loadCsv","binded","loadCsvBinded","bind","parse","download","complete","encoding","input","csv","data","slice","df","getGanttGraph","getGanttInfoAsDataframe","criterions","dfs","console","log","forEach","criterion","filter","row","get","select","push","totalDf","union","chain","translatePriorityToInteger","sortDataframe","withColumn","translateCycleLifeToInteger","sortBy","cycleLifeCategories","baseXPosition","Date","widthOfCycleLife","graph","type","label","cycleLifeIndex","indexOf","begXPosition","setDate","getDate","endXPosition","priority","priorities","set","cycleLife","render","height","gantt","trackHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nimport '../Styles/articles.scss';\nimport csvFile from '../INR.csv'\nimport DataFrame from \"dataframe-js\";\nconst Papa = require('papaparse');\n// const puppeteer = require('puppeteer');\n\n\nclass SchemaPage extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dataframe: null,\n      columns: [],\n    }\n  }\n\n  async componentWillMount() {\n      await this.loadCsv()\n      // await this.take_screen()\n  }\n\n  async loadCsv() {\n    if (this.state.dataframe == null) {\n        var binded = this.loadCsvBinded.bind(this)\n        Papa.parse(csvFile, {\n          download: true,\n          complete: binded,\n          encoding: 'UTF-8'\n      });\n    }\n  }\n\n  loadCsvBinded(input) {\n    let csv = input.data\n    let columns = csv[0]\n    let data = csv.slice(1)\n    let df = new DataFrame(data, columns)\n\n    // df = df.chain(row => row.get(\"Etape Cycle de Vie\") != \"N/A\")\n\n    this.state.columns = columns\n    this.state.dataframe = df\n\n    this.getGanttGraph()\n  }\n\n  /* dataframe getters */\n\n  getGanttInfoAsDataframe(criterions) {\n    let dfs = []\n\n    // for each criterion, fetch the required column infos \n    console.log(criterions)\n    criterions.forEach(criterion => {\n      let df = this.state.dataframe.filter(row => row\n        .get(\"CRITERES\") === criterion)\n        .select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df)\n    })\n    \n    // merge all the rows dataframes in one dataframe\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df)\n    })\n\n    // parse the priority to integers\n    totalDf = totalDf.chain(this.translatePriorityToInteger)\n    totalDf = this.sortDataframe(totalDf)\n    console.log(totalDf)\n    return totalDf\n  }\n\n  sortDataframe(df) {\n    // add a new colum with an integer representing the priority based on cycle life\n    df = df.withColumn(\"Cycle life priority\")\n    df = df.chain(this.translateCycleLifeToInteger)\n\n    // sort first by priority and then by cycle life to make groups\n    df = df.sortBy(\"Priorité\")\n    df = df.sortBy(\"Cycle life priority\")\n    return df\n  }\n\n  getGanttGraph(criterions) {\n    let df = this.getGanttInfoAsDataframe([\n      \"L'entreprise est-elle ouverte à une démarche NR qui pourrait fédérer les énergies autour d'un projet novateur ?\",\n      \"Le besoin métier est-il exprimé ?\"\n    ])\n\n    let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n     'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    let baseXPosition = new Date(2014, 2, 22)\n    let widthOfCycleLife = 4\n\n    let graph = [[\n      { type: 'string', label: 'Task ID' },\n      { type: 'string', label: 'Task Name' },\n      { type: 'string', label: 'Resource' },\n      { type: 'date', label: 'Start Date' },\n      { type: 'date', label: 'End Date' },\n      { type: 'number', label: 'Duration' },\n      { type: 'number', label: 'Percent Complete' },\n      { type: 'string', label: 'Dependencies' },\n    ]]\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n      let begXPosition = new Date().setDate(baseXPosition.getDate() + widthOfCycleLife * cycleLifeIndex)\n      let endXPosition = new Date().setDate(baseXPosition.getDate() + widthOfCycleLife * (cycleLifeIndex + 1))\n\n      graph.push([\n        '2014Spring',\n        'Spring 2014',\n        'spring',\n        begXPosition,\n        endXPosition,\n        null,\n        100,\n        null,\n      ])\n      console.log(row)\n    })\n    return graph\n  }\n\n  /* helpers */\n\n  translatePriorityToInteger(row) {\n    let priority = row.get(\"Priorité\")\n    let priorities = {\n      \"Low\": 1,\n      \"Medium\": 2,\n      \"High\": 3,\n      \"\": 4,\n    }\n    row = row.set(\"Priorité\", priorities[priority])\n    return row\n  }\n\n  translateCycleLifeToInteger(row) {\n    let cycleLife = row.get(\"Etape Cycle de Vie\")\n    let priorities = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n     'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n\n     row = row.set(\"Cycle life priority\", priorities.indexOf(cycleLife))\n     return row\n  }\n\n  // get() {\n  //   let cols = this.state.dataframe.filter(row => row\n  //     .get(\"Etape Cycle de Vie\") === \"Conception\")\n  //     .select(\"JUSTIFICATIONS\");\n  // }\n\n  // async take_screen() {\n  //   const browser = await puppeteer.launch();\n  //   const page = await browser.newPage();\n  //   await page.goto('/');\n  //   await page.screenshot({ path: 'example.png' });\n  \n  //   await browser.close();\n  // } \n\n  // timeout(delay) {\n  //     return new Promise( res => setTimeout(res, delay) );\n  // }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-2 col-1\"></div>\n            <div className=\"col-sm-8 col-10\">\n                \n            <Chart\n  width={'100%'}\n  height={'400px'}\n  chartType=\"Gantt\"\n  loader={<div>Loading Chart</div>}\n  data={ this.getGanttGraph() }\n  options={{\n    height: 400,\n    gantt: {\n      trackHeight: 30,\n    },\n  }}\n  rootProps={{ 'data-testid': '2' }}\n/>\n            </div>\n            <div className=\"col-sm-2 col-1\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SchemaPage;\n"]},"metadata":{},"sourceType":"module"}