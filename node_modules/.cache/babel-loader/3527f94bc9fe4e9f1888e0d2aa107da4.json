{"ast":null,"code":"import { formatUnit, EventHandler, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * To handle scroll event on chart and from TreeGrid\n *\n * @hidden\n */\n\nvar ChartScroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the scrolling.\n   *\n   * @param {Gantt} parent .\n   * @hidden\n   */\n  function ChartScroll(parent) {\n    this.previousScroll = {\n      top: 0,\n      left: 0\n    };\n    this.parent = parent;\n    this.element = this.parent.ganttChartModule.scrollElement;\n    this.addEventListeners();\n  }\n  /**\n   * Bind event\n   *\n   * @returns {void} .\n   */\n\n\n  ChartScroll.prototype.addEventListeners = function () {\n    this.parent.on('grid-scroll', this.gridScrollHandler, this);\n    EventHandler.add(this.element, 'scroll', this.onScroll, this);\n  };\n  /**\n   * Unbind events\n   *\n   * @returns {void} .\n   */\n\n\n  ChartScroll.prototype.removeEventListeners = function () {\n    EventHandler.remove(this.element, 'scroll', this.onScroll);\n    this.parent.off('grid-scroll', this.gridScrollHandler);\n  };\n  /**\n   *\n   * @param {object} args .\n   * @returns {void} .\n   */\n\n\n  ChartScroll.prototype.gridScrollHandler = function (args) {\n    this.element.scrollTop = getValue('top', args);\n    this.isFromTreeGrid = true;\n  };\n  /**\n   * Method to update vertical grid line, holiday, event markers and weekend container's top position on scroll action\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  ChartScroll.prototype.updateTopPosition = function () {\n    var content = this.parent.treeGrid.element.querySelector('.e-content');\n    var contentScrollTop = content.scrollTop;\n    var scrollTop;\n\n    if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n      var top_1 = this.parent.virtualScrollModule.getTopPosition();\n      scrollTop = contentScrollTop - top_1;\n    } else {\n      scrollTop = contentScrollTop;\n    }\n\n    if (!isNullOrUndefined(this.parent.dayMarkersModule)) {\n      var holidayContainer = getValue('nonworkingDayRender.holidayContainer', this.parent.dayMarkersModule);\n      var weekendContainer = getValue('nonworkingDayRender.weekendContainer', this.parent.dayMarkersModule);\n      var eventMarkersContainer = getValue('eventMarkerRender.eventMarkersContainer', this.parent.dayMarkersModule);\n\n      if (holidayContainer) {\n        holidayContainer.style.top = formatUnit(scrollTop);\n      }\n\n      if (weekendContainer) {\n        weekendContainer.style.top = formatUnit(scrollTop);\n      }\n\n      if (eventMarkersContainer) {\n        eventMarkersContainer.style.top = formatUnit(scrollTop);\n      }\n    }\n\n    if (this.parent.chartVerticalLineContainer) {\n      this.parent.chartVerticalLineContainer.style.top = formatUnit(scrollTop);\n    }\n  };\n  /**\n   * Scroll event handler\n   *\n   * @returns {void} .\n   */\n\n\n  ChartScroll.prototype.onScroll = function () {\n    var scrollArgs = {};\n\n    if (this.element.scrollTop !== this.previousScroll.top) {\n      // eslint-disable-next-line\n      !this.isFromTreeGrid ? this.parent.notify('chartScroll', {\n        top: this.element.scrollTop\n      }) : this.isFromTreeGrid = false;\n      scrollArgs.previousScrollTop = this.previousScroll.top;\n      this.previousScroll.top = this.element.scrollTop;\n      scrollArgs.scrollTop = this.element.scrollTop;\n      scrollArgs.scrollDirection = 'Vertical';\n      scrollArgs.action = 'VerticalScroll';\n      this.updateTopPosition();\n    }\n\n    if (this.element.scrollLeft !== this.previousScroll.left) {\n      this.parent.ganttChartModule.chartTimelineContainer.scrollLeft = this.element.scrollLeft;\n      scrollArgs.previousScrollLeft = this.previousScroll.left;\n      this.previousScroll.left = this.element.scrollLeft;\n      scrollArgs.scrollLeft = this.element.scrollLeft;\n      scrollArgs.scrollDirection = 'Horizontal';\n      scrollArgs.action = 'HorizontalScroll';\n    }\n\n    scrollArgs.requestType = 'scroll';\n    this.parent.trigger('actionComplete', scrollArgs);\n  };\n  /**\n   * To set height for chart scroll container\n   *\n   * @param {string | number} height - To set height for scroll container in chart side\n   * @returns {void} .\n   * @private\n   */\n\n\n  ChartScroll.prototype.setHeight = function (height) {\n    this.element.style.height = formatUnit(height);\n  };\n  /**\n   * To set width for chart scroll container\n   *\n   * @param {string | number} width - To set width to scroll container\n   * @returns {void} .\n   * @private\n   */\n\n\n  ChartScroll.prototype.setWidth = function (width) {\n    this.element.style.width = formatUnit(width);\n  };\n  /**\n   * To set scroll top for chart scroll container\n   *\n   * @param {number} scrollTop - To set scroll top for scroll container\n   * @returns {void} .\n   * @private\n   */\n\n\n  ChartScroll.prototype.setScrollTop = function (scrollTop) {\n    this.element.scrollTop = scrollTop;\n  };\n  /**\n   * To set scroll left for chart scroll container\n   *\n   * @param {number} scrollLeft  - To set scroll left for scroll container\n   * @returns {void} .\n   */\n\n\n  ChartScroll.prototype.setScrollLeft = function (scrollLeft) {\n    this.element.scrollLeft = scrollLeft;\n    this.parent.ganttChartModule.chartTimelineContainer.scrollLeft = this.element.scrollLeft;\n    this.previousScroll.left = this.element.scrollLeft;\n  };\n  /**\n   * Destroy scroll related elements and unbind the events\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  ChartScroll.prototype.destroy = function () {\n    this.removeEventListeners();\n  };\n\n  return ChartScroll;\n}();\n\nexport { ChartScroll };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/chart-scroll.js"],"names":["formatUnit","EventHandler","getValue","isNullOrUndefined","ChartScroll","parent","previousScroll","top","left","element","ganttChartModule","scrollElement","addEventListeners","prototype","on","gridScrollHandler","add","onScroll","removeEventListeners","remove","off","args","scrollTop","isFromTreeGrid","updateTopPosition","content","treeGrid","querySelector","contentScrollTop","virtualScrollModule","enableVirtualization","top_1","getTopPosition","dayMarkersModule","holidayContainer","weekendContainer","eventMarkersContainer","style","chartVerticalLineContainer","scrollArgs","notify","previousScrollTop","scrollDirection","action","scrollLeft","chartTimelineContainer","previousScrollLeft","requestType","trigger","setHeight","height","setWidth","width","setScrollTop","setScrollLeft","destroy"],"mappings":"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","sourcesContent":["import { formatUnit, EventHandler, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * To handle scroll event on chart and from TreeGrid\n *\n * @hidden\n */\nvar ChartScroll = /** @class */ (function () {\n    /**\n     * Constructor for the scrolling.\n     *\n     * @param {Gantt} parent .\n     * @hidden\n     */\n    function ChartScroll(parent) {\n        this.previousScroll = { top: 0, left: 0 };\n        this.parent = parent;\n        this.element = this.parent.ganttChartModule.scrollElement;\n        this.addEventListeners();\n    }\n    /**\n     * Bind event\n     *\n     * @returns {void} .\n     */\n    ChartScroll.prototype.addEventListeners = function () {\n        this.parent.on('grid-scroll', this.gridScrollHandler, this);\n        EventHandler.add(this.element, 'scroll', this.onScroll, this);\n    };\n    /**\n     * Unbind events\n     *\n     * @returns {void} .\n     */\n    ChartScroll.prototype.removeEventListeners = function () {\n        EventHandler.remove(this.element, 'scroll', this.onScroll);\n        this.parent.off('grid-scroll', this.gridScrollHandler);\n    };\n    /**\n     *\n     * @param {object} args .\n     * @returns {void} .\n     */\n    ChartScroll.prototype.gridScrollHandler = function (args) {\n        this.element.scrollTop = getValue('top', args);\n        this.isFromTreeGrid = true;\n    };\n    /**\n     * Method to update vertical grid line, holiday, event markers and weekend container's top position on scroll action\n     *\n     * @returns {void} .\n     * @private\n     */\n    ChartScroll.prototype.updateTopPosition = function () {\n        var content = this.parent.treeGrid.element.querySelector('.e-content');\n        var contentScrollTop = content.scrollTop;\n        var scrollTop;\n        if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n            var top_1 = this.parent.virtualScrollModule.getTopPosition();\n            scrollTop = contentScrollTop - top_1;\n        }\n        else {\n            scrollTop = contentScrollTop;\n        }\n        if (!isNullOrUndefined(this.parent.dayMarkersModule)) {\n            var holidayContainer = getValue('nonworkingDayRender.holidayContainer', this.parent.dayMarkersModule);\n            var weekendContainer = getValue('nonworkingDayRender.weekendContainer', this.parent.dayMarkersModule);\n            var eventMarkersContainer = getValue('eventMarkerRender.eventMarkersContainer', this.parent.dayMarkersModule);\n            if (holidayContainer) {\n                holidayContainer.style.top = formatUnit(scrollTop);\n            }\n            if (weekendContainer) {\n                weekendContainer.style.top = formatUnit(scrollTop);\n            }\n            if (eventMarkersContainer) {\n                eventMarkersContainer.style.top = formatUnit(scrollTop);\n            }\n        }\n        if (this.parent.chartVerticalLineContainer) {\n            this.parent.chartVerticalLineContainer.style.top = formatUnit(scrollTop);\n        }\n    };\n    /**\n     * Scroll event handler\n     *\n     * @returns {void} .\n     */\n    ChartScroll.prototype.onScroll = function () {\n        var scrollArgs = {};\n        if (this.element.scrollTop !== this.previousScroll.top) {\n            // eslint-disable-next-line\n            !this.isFromTreeGrid ? this.parent.notify('chartScroll', { top: this.element.scrollTop }) : (this.isFromTreeGrid = false);\n            scrollArgs.previousScrollTop = this.previousScroll.top;\n            this.previousScroll.top = this.element.scrollTop;\n            scrollArgs.scrollTop = this.element.scrollTop;\n            scrollArgs.scrollDirection = 'Vertical';\n            scrollArgs.action = 'VerticalScroll';\n            this.updateTopPosition();\n        }\n        if (this.element.scrollLeft !== this.previousScroll.left) {\n            this.parent.ganttChartModule.chartTimelineContainer.scrollLeft = this.element.scrollLeft;\n            scrollArgs.previousScrollLeft = this.previousScroll.left;\n            this.previousScroll.left = this.element.scrollLeft;\n            scrollArgs.scrollLeft = this.element.scrollLeft;\n            scrollArgs.scrollDirection = 'Horizontal';\n            scrollArgs.action = 'HorizontalScroll';\n        }\n        scrollArgs.requestType = 'scroll';\n        this.parent.trigger('actionComplete', scrollArgs);\n    };\n    /**\n     * To set height for chart scroll container\n     *\n     * @param {string | number} height - To set height for scroll container in chart side\n     * @returns {void} .\n     * @private\n     */\n    ChartScroll.prototype.setHeight = function (height) {\n        this.element.style.height = formatUnit(height);\n    };\n    /**\n     * To set width for chart scroll container\n     *\n     * @param {string | number} width - To set width to scroll container\n     * @returns {void} .\n     * @private\n     */\n    ChartScroll.prototype.setWidth = function (width) {\n        this.element.style.width = formatUnit(width);\n    };\n    /**\n     * To set scroll top for chart scroll container\n     *\n     * @param {number} scrollTop - To set scroll top for scroll container\n     * @returns {void} .\n     * @private\n     */\n    ChartScroll.prototype.setScrollTop = function (scrollTop) {\n        this.element.scrollTop = scrollTop;\n    };\n    /**\n     * To set scroll left for chart scroll container\n     *\n     * @param {number} scrollLeft  - To set scroll left for scroll container\n     * @returns {void} .\n     */\n    ChartScroll.prototype.setScrollLeft = function (scrollLeft) {\n        this.element.scrollLeft = scrollLeft;\n        this.parent.ganttChartModule.chartTimelineContainer.scrollLeft = this.element.scrollLeft;\n        this.previousScroll.left = this.element.scrollLeft;\n    };\n    /**\n     * Destroy scroll related elements and unbind the events\n     *\n     * @returns {void} .\n     * @private\n     */\n    ChartScroll.prototype.destroy = function () {\n        this.removeEventListeners();\n    };\n    return ChartScroll;\n}());\nexport { ChartScroll };\n"]},"metadata":{},"sourceType":"module"}