{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfTreeGridColumnCollection, PdfTreeGridHeaderCollection, PdfTreeGridRowCollection } from './pdf-base/index';\nimport { PdfTreeGridStyle, PdfBorders, PdfTreeGridLayouter } from './pdf-base/index';\nimport { PdfLayoutElement, RectangleF, PdfLayoutFormat, PointF, SizeF } from '@syncfusion/ej2-pdf-export';\n/**\n * PdfTreeGrid Class for EJ2-PDF\n */\n\nvar PdfTreeGrid =\n/** @class */\nfunction (_super) {\n  __extends(PdfTreeGrid, _super);\n\n  function PdfTreeGrid() {\n    var _this = _super.call(this) || this;\n\n    _this.treeGridSize = new SizeF(0, 0);\n    _this.treeColumnIndex = 0;\n    _this.allowRowBreakAcrossPages = true;\n    _this.enableHeader = true;\n    _this.isFitToWidth = false;\n    _this.columns = new PdfTreeGridColumnCollection(_this);\n    _this.rows = new PdfTreeGridRowCollection(_this);\n    _this.headers = new PdfTreeGridHeaderCollection(_this);\n    _this.style = new PdfTreeGridStyle();\n    _this.rowHeight = 0;\n    return _this;\n  }\n\n  Object.defineProperty(PdfTreeGrid.prototype, \"raiseBeginCellDraw\", {\n    //Properties\n\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     *\n     * @returns {boolean} .\n     * @private\n     */\n    get: function () {\n      // eslint-disable-next-line\n      return typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGrid.prototype, \"raiseEndCellDraw\", {\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     *\n     * @returns {boolean} .\n     * @private\n     */\n    get: function () {\n      // eslint-disable-next-line\n      return typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfTreeGrid.prototype, \"size\", {\n    get: function () {\n      if (this.treeGridSize.width === 0 && this.treeGridSize.height === 0) {\n        this.treeGridSize = this.calculateTreeGridSize();\n      }\n\n      return this.treeGridSize;\n    },\n    set: function (value) {\n      this.treeGridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Draws` the element on the page with the specified page, 'RectangleF' class and layout format\n   *\n   * @private\n   */\n\n  /* eslint-disable-next-line */\n\n  PdfTreeGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n\n  PdfTreeGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n\n      for (var i = 0; i < this.columns.count; i++) {\n        if (this.columns.getColumn(i).width < 0) {\n          this.columns.getColumn(i).width = widths[i];\n        }\n      }\n    } else {\n      var widths = [];\n      var cellWidth = 0;\n      var totalWidth = 0;\n      var rowLevel = 0; // if(this.headers.count > 0){\n      //     let colCount: number = this.headers.getHeader(0).cells.count;\n      //     for(let i: number = 0; i < colCount; i++){\n      //         let rowCount: number = this.headers.count;\n      //         for(let j: number = 0; j < rowCount; j++){\n      //             let tempWidth: number = this.headers.getHeader(j).cells.getCell(i).width;\n      //             let rowWidth: number = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) :\n      //                 tempWidth;\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths.push(cellWidth);\n      //     }\n      // }\n\n      var colCount = this.columns.count;\n\n      for (var i = 0; i < colCount; i++) {\n        var rowCount = this.rows.count;\n\n        for (var j = 0; j < rowCount; j++) {\n          var tempWidth = this.rows.getRow(j).cells.getCell(i).width;\n          var rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) : tempWidth;\n          cellWidth = Math.max(cellWidth, rowWidth);\n          cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n\n          if (this.columns.getColumn(i).isTreeColumn) {\n            rowLevel = Math.max(rowLevel, this.rows.getRow(j).level);\n          }\n        }\n\n        if (this.columns.getColumn(i).isTreeColumn) {\n          widths.push(cellWidth + rowLevel * 10);\n        } else {\n          widths.push(cellWidth);\n        } // eslint-disable-next-line\n\n\n        totalWidth += cellWidth;\n        cellWidth = 0;\n      }\n\n      for (var i = 0; i < this.columns.count; i++) {\n        if (this.columns.getColumn(i).width < 0) {\n          this.columns.getColumn(i).width = widths[i];\n        }\n      }\n    }\n  };\n\n  PdfTreeGrid.prototype.calculateTreeGridSize = function () {\n    var height = 0;\n    var width = this.columns.width;\n\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n\n    return new SizeF(width, height);\n  };\n\n  PdfTreeGrid.prototype.drawGrid = function (page, x, y, format) {\n    this.initialWidth = page.graphics.clientSize.width;\n    var layout = new RectangleF(0, 0, page.getClientSize().height, 0);\n    return this.draw(page, layout, format);\n  };\n\n  PdfTreeGrid.prototype.layout = function (param) {\n    if (this.rows.count !== 0) {\n      var style = this.rows.getRow(0).cells.getCell(0).style;\n\n      if (style.borders.left.width !== 1) {\n        var x = style.borders.left.width / 2;\n        var y = style.borders.top.width / 2;\n\n        if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n          var newBound = new RectangleF(new PointF(x, y), new SizeF(this.size.width, this.size.height));\n          param.bounds = newBound;\n        }\n      }\n    }\n\n    this.setSpan();\n    this.layouter = new PdfTreeGridLayouter(this);\n    var result = this.layouter.layoutInternal(param);\n    return result;\n  };\n\n  PdfTreeGrid.prototype.onBeginCellDraw = function (args) {\n    if (this.raiseBeginCellDraw) {\n      this.beginCellDraw(this, args);\n    }\n  };\n\n  PdfTreeGrid.prototype.onEndCellDraw = function (args) {\n    if (this.raiseEndCellDraw) {\n      this.endCellDraw(this, args);\n    }\n  };\n\n  PdfTreeGrid.prototype.setSpan = function () {\n    var colSpan = 1;\n    var rowSpan = 1;\n    var currentCellIndex = 0;\n    var currentRowIndex = 0;\n    var maxSpan = 0;\n    var rowCount = this.headers.count;\n\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.headers.getHeader(i);\n      maxSpan = 0;\n      var colCount = row.cells.count;\n\n      for (var j = 0; j < colCount; j++) {\n        var cell = row.cells.getCell(j);\n        maxSpan = Math.max(maxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          }\n\n          if (cell.rowSpan + i > this.headers.count) {\n            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n          }\n\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true; //Set Column merges for first row\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n              colSpan--;\n            }\n\n            currentCellIndex = j;\n            colSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              rowSpan--;\n\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                colSpan--;\n              }\n\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true; //Set Column merges.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i; //Set row Merges.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n\n      row.maximumRowSpan = maxSpan;\n    }\n\n    colSpan = rowSpan = 1;\n    currentCellIndex = currentRowIndex = 0;\n    rowCount = this.rows.count;\n\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.rows.getRow(i);\n      var colcount = row.cells.count;\n\n      for (var j = 0; j < colcount; j++) {\n        var cell = row.cells.getCell(j); //Skip setting span map for already coverted rows/columns.\n\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row {0} column {1} ' + j.toString());\n          }\n\n          if (cell.rowSpan + i > this.rows.count) {\n            throw new Error('Invalid span specified at row {0} column {1} ' + j.toString());\n          }\n\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true; //set Column merges for first row.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n\n            currentCellIndex = j;\n            colSpan = cell.columnSpan; // Set row merges and column merges for each subsequentt rows.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                colSpan--;\n              }\n\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true; //set Column merges.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i; //set row merges.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return PdfTreeGrid;\n}(PdfLayoutElement);\n\nexport { PdfTreeGrid };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/export/pdf-treegrid.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfTreeGridColumnCollection","PdfTreeGridHeaderCollection","PdfTreeGridRowCollection","PdfTreeGridStyle","PdfBorders","PdfTreeGridLayouter","PdfLayoutElement","RectangleF","PdfLayoutFormat","PointF","SizeF","PdfTreeGrid","_super","_this","call","treeGridSize","treeColumnIndex","allowRowBreakAcrossPages","enableHeader","isFitToWidth","columns","rows","headers","style","rowHeight","defineProperty","get","beginCellDraw","enumerable","configurable","endCellDraw","width","height","calculateTreeGridSize","set","value","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","measureColumnsWidth","bounds","widths","getDefaultWidths","i","count","getColumn","cellWidth","totalWidth","rowLevel","colCount","rowCount","j","tempWidth","getRow","cells","getCell","rowWidth","initialWidth","Math","min","max","isTreeColumn","level","push","row","getHeader","drawGrid","page","format","layout","getClientSize","param","borders","left","top","default","right","newBound","size","setSpan","layouter","result","layoutInternal","onBeginCellDraw","args","raiseBeginCellDraw","onEndCellDraw","raiseEndCellDraw","colSpan","rowSpan","currentCellIndex","currentRowIndex","maxSpan","cell","isCellMergeContinue","isRowMergeContinue","columnSpan","Error","toString","isCellMergeStart","isRowMergeStart","maximumRowSpan","colcount"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfTreeGridColumnCollection, PdfTreeGridHeaderCollection, PdfTreeGridRowCollection } from './pdf-base/index';\nimport { PdfTreeGridStyle, PdfBorders, PdfTreeGridLayouter } from './pdf-base/index';\nimport { PdfLayoutElement, RectangleF, PdfLayoutFormat, PointF, SizeF } from '@syncfusion/ej2-pdf-export';\n/**\n * PdfTreeGrid Class for EJ2-PDF\n */\nvar PdfTreeGrid = /** @class */ (function (_super) {\n    __extends(PdfTreeGrid, _super);\n    function PdfTreeGrid() {\n        var _this = _super.call(this) || this;\n        _this.treeGridSize = new SizeF(0, 0);\n        _this.treeColumnIndex = 0;\n        _this.allowRowBreakAcrossPages = true;\n        _this.enableHeader = true;\n        _this.isFitToWidth = false;\n        _this.columns = new PdfTreeGridColumnCollection(_this);\n        _this.rows = new PdfTreeGridRowCollection(_this);\n        _this.headers = new PdfTreeGridHeaderCollection(_this);\n        _this.style = new PdfTreeGridStyle();\n        _this.rowHeight = 0;\n        return _this;\n    }\n    Object.defineProperty(PdfTreeGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         *\n         * @returns {boolean} .\n         * @private\n         */\n        get: function () {\n            // eslint-disable-next-line\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         *\n         * @returns {boolean} .\n         * @private\n         */\n        get: function () {\n            // eslint-disable-next-line\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTreeGrid.prototype, \"size\", {\n        get: function () {\n            if ((this.treeGridSize.width === 0 && this.treeGridSize.height === 0)) {\n                this.treeGridSize = this.calculateTreeGridSize();\n            }\n            return this.treeGridSize;\n        },\n        set: function (value) {\n            this.treeGridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Draws` the element on the page with the specified page, 'RectangleF' class and layout format\n     *\n     * @private\n     */\n    /* eslint-disable-next-line */\n    PdfTreeGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    PdfTreeGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            for (var i = 0; i < this.columns.count; i++) {\n                if (this.columns.getColumn(i).width < 0) {\n                    this.columns.getColumn(i).width = widths[i];\n                }\n            }\n        }\n        else {\n            var widths = [];\n            var cellWidth = 0;\n            var totalWidth = 0;\n            var rowLevel = 0;\n            // if(this.headers.count > 0){\n            //     let colCount: number = this.headers.getHeader(0).cells.count;\n            //     for(let i: number = 0; i < colCount; i++){\n            //         let rowCount: number = this.headers.count;\n            //         for(let j: number = 0; j < rowCount; j++){\n            //             let tempWidth: number = this.headers.getHeader(j).cells.getCell(i).width;\n            //             let rowWidth: number = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) :\n            //                 tempWidth;\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths.push(cellWidth);\n            //     }\n            // }\n            var colCount = this.columns.count;\n            for (var i = 0; i < colCount; i++) {\n                var rowCount = this.rows.count;\n                for (var j = 0; j < rowCount; j++) {\n                    var tempWidth = this.rows.getRow(j).cells.getCell(i).width;\n                    var rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, tempWidth) : tempWidth;\n                    cellWidth = Math.max(cellWidth, rowWidth);\n                    cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    if (this.columns.getColumn(i).isTreeColumn) {\n                        rowLevel = Math.max(rowLevel, this.rows.getRow(j).level);\n                    }\n                }\n                if (this.columns.getColumn(i).isTreeColumn) {\n                    widths.push(cellWidth + (rowLevel * 10));\n                }\n                else {\n                    widths.push(cellWidth);\n                }\n                // eslint-disable-next-line\n                totalWidth += cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0; i < this.columns.count; i++) {\n                if (this.columns.getColumn(i).width < 0) {\n                    this.columns.getColumn(i).width = widths[i];\n                }\n            }\n        }\n    };\n    PdfTreeGrid.prototype.calculateTreeGridSize = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfTreeGrid.prototype.drawGrid = function (page, x, y, format) {\n        this.initialWidth = page.graphics.clientSize.width;\n        var layout = new RectangleF(0, 0, page.getClientSize().height, 0);\n        return this.draw(page, layout, format);\n    };\n    PdfTreeGrid.prototype.layout = function (param) {\n        if (this.rows.count !== 0) {\n            var style = this.rows.getRow(0).cells.getCell(0).style;\n            if (style.borders.left.width !== 1) {\n                var x = style.borders.left.width / 2;\n                var y = style.borders.top.width / 2;\n                if (param.bounds.x === PdfBorders.default.right.width / 2 &&\n                    param.bounds.y === PdfBorders.default.right.width / 2) {\n                    var newBound = new RectangleF(new PointF(x, y), new SizeF(this.size.width, this.size.height));\n                    param.bounds = newBound;\n                }\n            }\n        }\n        this.setSpan();\n        this.layouter = new PdfTreeGridLayouter(this);\n        var result = this.layouter.layoutInternal(param);\n        return result;\n    };\n    PdfTreeGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfTreeGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    PdfTreeGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n        colSpan = rowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        rowCount = this.rows.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.rows.getRow(i);\n            var colcount = row.cells.count;\n            for (var j = 0; j < colcount; j++) {\n                var cell = row.cells.getCell(j);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row {0} column {1} ' + j.toString());\n                    }\n                    if (cell.rowSpan + i > this.rows.count) {\n                        throw new Error('Invalid span specified at row {0} column {1} ' + j.toString());\n                    }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //set Column merges for first row.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        // Set row merges and column merges for each subsequentt rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //set row merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    return PdfTreeGrid;\n}(PdfLayoutElement));\nexport { PdfTreeGrid };\n"]},"metadata":{},"sourceType":"module"}