{"ast":null,"code":"import { extend, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport * as CONSTANT from '../base/constant';\nimport { updateUndoRedoStatus, isIDevice } from '../base/util';\nimport { KEY_DOWN, KEY_UP } from './../../common/constant';\n/**\n * Formatter\n *\n * @hidden\n\n */\n\nvar Formatter =\n/** @class */\nfunction () {\n  function Formatter() {}\n  /**\n   * To execute the command\n   *\n   * @param  {IRichTextEditor} self - specifies the self element.\n   * @param  {ActionBeginEventArgs} args - specifies the event arguments.\n   * @param  {MouseEvent|KeyboardEvent} event - specifies the keyboard event.\n   * @param  {IItemCollectionArgs} value - specifies the collection arguments\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.process = function (self, args, event, value) {\n    var _this = this;\n\n    var selection = self.contentModule.getDocument().getSelection();\n    var range = selection.rangeCount > 0 ? selection.getRangeAt(selection.rangeCount - 1) : null;\n    var saveSelection;\n\n    if (self.editorMode === 'HTML') {\n      saveSelection = this.editorManager.nodeSelection.save(range, self.contentModule.getDocument());\n    }\n\n    if (!isNullOrUndefined(args) && args.item.command && args.item.command !== 'Table' && args.item.command !== 'Actions' && args.item.command !== 'Links' && args.item.command !== 'Images' && args.item.command !== 'Files' && range && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer)) || self.contentModule.getEditPanel() === range.commonAncestorContainer || self.contentModule.getPanel() === range.commonAncestorContainer)) {\n      return;\n    }\n\n    if (isNullOrUndefined(args)) {\n      var action_1 = event.action;\n\n      if (action_1 !== 'tab' && action_1 !== 'enter' && action_1 !== 'space' && action_1 !== 'escape') {\n        args = {};\n\n        if (self.editorMode === 'Markdown' && action_1 === 'insert-table') {\n          value = {\n            'headingText': self.localeObj.getConstant('TableHeadingText'),\n            'colText': self.localeObj.getConstant('TableColText')\n          };\n        }\n\n        var items = {\n          originalEvent: event,\n          cancel: false,\n          requestType: action_1 || event.key + 'Key',\n          itemCollection: value\n        };\n        extend(args, args, items, true);\n        self.trigger(CONSTANT.actionBegin, args, function (actionBeginArgs) {\n          if (actionBeginArgs.cancel) {\n            if (action_1 === 'paste' || action_1 === 'cut' || action_1 === 'copy') {\n              event.preventDefault();\n            }\n          }\n        });\n      }\n\n      var isTableModule = isNullOrUndefined(self.tableModule) ? true : self.tableModule ? self.tableModule.ensureInsideTableList : false;\n\n      if (event.which === 9 && isTableModule || event.which !== 9) {\n        if (event.which === 13 && self.editorMode === 'HTML') {\n          value = {\n            'enterAction': self.enterKey\n          };\n        }\n\n        this.editorManager.observer.notify(event.type === 'keydown' ? KEY_DOWN : KEY_UP, {\n          event: event,\n          callBack: this.onSuccess.bind(this, self),\n          value: value,\n          enterAction: self.enterKey\n        });\n      }\n    } else if (!isNullOrUndefined(args) && args.item.command && args.item.subCommand && (args.item.command !== args.item.subCommand && args.item.command !== 'Font' || (args.item.subCommand === 'FontName' || args.item.subCommand === 'FontSize') && args.name === 'dropDownSelect' || (args.item.subCommand === 'BackgroundColor' || args.item.subCommand === 'FontColor') && args.name === 'colorPickerChanged')) {\n      extend(args, args, {\n        requestType: args.item.subCommand,\n        cancel: false,\n        itemCollection: value\n      }, true);\n      self.trigger(CONSTANT.actionBegin, args, function (actionBeginArgs) {\n        if (!actionBeginArgs.cancel) {\n          if (_this.getUndoRedoStack().length === 0 && actionBeginArgs.item.command !== 'Links' && actionBeginArgs.item.command !== 'Images') {\n            _this.saveData();\n          }\n\n          self.isBlur = false;\n          self.contentModule.getEditPanel().focus();\n\n          if (self.editorMode === 'HTML') {\n            saveSelection.restore();\n          }\n\n          var command = actionBeginArgs.item.subCommand.toLocaleLowerCase();\n\n          if (command === 'paste' || command === 'cut' || command === 'copy') {\n            self.clipboardAction(command, event);\n          } else {\n            _this.editorManager.observer.notify(CONSTANT.checkUndo, {\n              subCommand: actionBeginArgs.item.subCommand\n            });\n\n            _this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event, _this.onSuccess.bind(_this, self), actionBeginArgs.item.value, actionBeginArgs.item.subCommand === 'Pre' && args.name === 'dropDownSelect' ? {\n              name: args.name\n            } : value, '#' + self.getID() + ' iframe', self.enterKey);\n          }\n        }\n      });\n    }\n\n    if (isNullOrUndefined(event) || event && event.action !== 'copy') {\n      this.enableUndo(self);\n    }\n  };\n\n  Formatter.prototype.getAncestorNode = function (node) {\n    node = node.nodeType === 3 ? node.parentNode : node;\n    return node;\n  };\n  /**\n   * onKeyHandler method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @param {KeyboardEvent} e - specifies the keyboard event.\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.onKeyHandler = function (self, e) {\n    var _this = this;\n\n    this.editorManager.observer.notify(KEY_UP, {\n      event: e,\n      callBack: function () {\n        self.notify(CONSTANT.contentChanged, {});\n\n        _this.enableUndo(self);\n      }\n    });\n  };\n  /**\n   * onSuccess method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @param {IMarkdownFormatterCallBack} events - specifies the event call back\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.onSuccess = function (self, events) {\n    self.notify(CONSTANT.contentChanged, {});\n\n    if (events && (isNullOrUndefined(events.event) || events.event.action !== 'copy')) {\n      this.enableUndo(self);\n      self.notify(CONSTANT.execCommandCallBack, events);\n    }\n\n    self.trigger(CONSTANT.actionComplete, events, function (callbackArgs) {\n      self.setPlaceHolder();\n\n      if (callbackArgs.requestType === 'Images' || callbackArgs.requestType === 'Links' && self.editorMode === 'HTML') {\n        var args = callbackArgs;\n\n        if (callbackArgs.requestType === 'Links' && callbackArgs.event && callbackArgs.event.type === 'keydown' && callbackArgs.event.keyCode === 32) {\n          return;\n        }\n\n        self.notify(CONSTANT.insertCompleted, {\n          args: args.event,\n          type: callbackArgs.requestType,\n          isNotify: true,\n          elements: args.elements\n        });\n      }\n\n      self.autoResize();\n    });\n  };\n  /**\n   * Save the data for undo and redo action.\n   *\n   * @param {KeyboardEvent} e - specifies the keyboard event.\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.saveData = function (e) {\n    this.editorManager.undoRedoManager.saveData(e);\n  };\n  /**\n   * getUndoStatus method\n   *\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.getUndoStatus = function () {\n    return this.editorManager.undoRedoManager.getUndoStatus();\n  };\n  /* eslint-disable */\n\n  /**\n   * getUndoRedoStack method\n   *\n   * @param {IHtmlUndoRedoData}  - specifies the redo data.\n   * @returns {void}\n   * @hidden\n    */\n\n  /* eslint-enable */\n\n\n  Formatter.prototype.getUndoRedoStack = function () {\n    return this.editorManager.undoRedoManager.undoRedoStack;\n  };\n  /**\n   * enableUndo method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @returns {void}\n   * @hidden\n    */\n\n\n  Formatter.prototype.enableUndo = function (self) {\n    var status = this.getUndoStatus();\n\n    if (self.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);\n    } else {\n      if (self.toolbarModule) {\n        updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);\n      }\n    }\n  };\n\n  return Formatter;\n}();\n\nexport { Formatter };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/formatter/formatter.js"],"names":["extend","isNullOrUndefined","Browser","CONSTANT","updateUndoRedoStatus","isIDevice","KEY_DOWN","KEY_UP","Formatter","prototype","process","self","args","event","value","_this","selection","contentModule","getDocument","getSelection","range","rangeCount","getRangeAt","saveSelection","editorMode","editorManager","nodeSelection","save","item","command","getEditPanel","contains","getAncestorNode","commonAncestorContainer","getPanel","action_1","action","localeObj","getConstant","items","originalEvent","cancel","requestType","key","itemCollection","trigger","actionBegin","actionBeginArgs","preventDefault","isTableModule","tableModule","ensureInsideTableList","which","enterKey","observer","notify","type","callBack","onSuccess","bind","enterAction","subCommand","name","getUndoRedoStack","length","saveData","isBlur","focus","restore","toLocaleLowerCase","clipboardAction","checkUndo","execCommand","getID","enableUndo","node","nodeType","parentNode","onKeyHandler","e","contentChanged","events","execCommandCallBack","actionComplete","callbackArgs","setPlaceHolder","keyCode","insertCompleted","isNotify","elements","autoResize","undoRedoManager","getUndoStatus","undoRedoStack","status","inlineMode","enable","isDevice","quickToolbarModule","inlineQTBar","quickTBarObj","toolbarModule","baseToolbar"],"mappings":"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","sourcesContent":["import { extend, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport * as CONSTANT from '../base/constant';\nimport { updateUndoRedoStatus, isIDevice } from '../base/util';\nimport { KEY_DOWN, KEY_UP } from './../../common/constant';\n/**\n * Formatter\n *\n * @hidden\n\n */\nvar Formatter = /** @class */ (function () {\n    function Formatter() {\n    }\n    /**\n     * To execute the command\n     *\n     * @param  {IRichTextEditor} self - specifies the self element.\n     * @param  {ActionBeginEventArgs} args - specifies the event arguments.\n     * @param  {MouseEvent|KeyboardEvent} event - specifies the keyboard event.\n     * @param  {IItemCollectionArgs} value - specifies the collection arguments\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.process = function (self, args, event, value) {\n        var _this = this;\n        var selection = self.contentModule.getDocument().getSelection();\n        var range = (selection.rangeCount > 0) ? selection.getRangeAt(selection.rangeCount - 1) : null;\n        var saveSelection;\n        if (self.editorMode === 'HTML') {\n            saveSelection = this.editorManager.nodeSelection.save(range, self.contentModule.getDocument());\n        }\n        if (!isNullOrUndefined(args)\n            && args.item.command\n            && args.item.command !== 'Table'\n            && args.item.command !== 'Actions'\n            && args.item.command !== 'Links'\n            && args.item.command !== 'Images'\n            && args.item.command !== 'Files'\n            && range\n            && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer))\n                || self.contentModule.getEditPanel() === range.commonAncestorContainer\n                || self.contentModule.getPanel() === range.commonAncestorContainer)) {\n            return;\n        }\n        if (isNullOrUndefined(args)) {\n            var action_1 = event.action;\n            if (action_1 !== 'tab' && action_1 !== 'enter' && action_1 !== 'space' && action_1 !== 'escape') {\n                args = {};\n                if (self.editorMode === 'Markdown' && action_1 === 'insert-table') {\n                    value = {\n                        'headingText': self.localeObj.getConstant('TableHeadingText'),\n                        'colText': self.localeObj.getConstant('TableColText')\n                    };\n                }\n                var items = {\n                    originalEvent: event, cancel: false,\n                    requestType: action_1 || (event.key + 'Key'),\n                    itemCollection: value\n                };\n                extend(args, args, items, true);\n                self.trigger(CONSTANT.actionBegin, args, function (actionBeginArgs) {\n                    if (actionBeginArgs.cancel) {\n                        if (action_1 === 'paste' || action_1 === 'cut' || action_1 === 'copy') {\n                            event.preventDefault();\n                        }\n                    }\n                });\n            }\n            var isTableModule = isNullOrUndefined(self.tableModule) ? true : self.tableModule ?\n                self.tableModule.ensureInsideTableList : false;\n            if ((event.which === 9 && isTableModule) || event.which !== 9) {\n                if (event.which === 13 && self.editorMode === 'HTML') {\n                    value = {\n                        'enterAction': self.enterKey\n                    };\n                }\n                this.editorManager.observer.notify((event.type === 'keydown' ? KEY_DOWN : KEY_UP), {\n                    event: event,\n                    callBack: this.onSuccess.bind(this, self),\n                    value: value,\n                    enterAction: self.enterKey\n                });\n            }\n        }\n        else if (!isNullOrUndefined(args) && args.item.command && args.item.subCommand && ((args.item.command !== args.item.subCommand\n            && args.item.command !== 'Font')\n            || ((args.item.subCommand === 'FontName' || args.item.subCommand === 'FontSize') && args.name === 'dropDownSelect')\n            || ((args.item.subCommand === 'BackgroundColor' || args.item.subCommand === 'FontColor')\n                && args.name === 'colorPickerChanged'))) {\n            extend(args, args, { requestType: args.item.subCommand, cancel: false, itemCollection: value }, true);\n            self.trigger(CONSTANT.actionBegin, args, function (actionBeginArgs) {\n                if (!actionBeginArgs.cancel) {\n                    if (_this.getUndoRedoStack().length === 0 && actionBeginArgs.item.command !== 'Links'\n                        && actionBeginArgs.item.command !== 'Images') {\n                        _this.saveData();\n                    }\n                    self.isBlur = false;\n                    self.contentModule.getEditPanel().focus();\n                    if (self.editorMode === 'HTML') {\n                        saveSelection.restore();\n                    }\n                    var command = actionBeginArgs.item.subCommand.toLocaleLowerCase();\n                    if (command === 'paste' || command === 'cut' || command === 'copy') {\n                        self.clipboardAction(command, event);\n                    }\n                    else {\n                        _this.editorManager.observer.notify(CONSTANT.checkUndo, { subCommand: actionBeginArgs.item.subCommand });\n                        _this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event, _this.onSuccess.bind(_this, self), actionBeginArgs.item.value, actionBeginArgs.item.subCommand === 'Pre' && args.name === 'dropDownSelect' ?\n                            { name: args.name } : value, ('#' + self.getID() + ' iframe'), self.enterKey);\n                    }\n                }\n            });\n        }\n        if (isNullOrUndefined(event) || event && event.action !== 'copy') {\n            this.enableUndo(self);\n        }\n    };\n    Formatter.prototype.getAncestorNode = function (node) {\n        node = node.nodeType === 3 ? node.parentNode : node;\n        return node;\n    };\n    /**\n     * onKeyHandler method\n     *\n     * @param {IRichTextEditor} self - specifies the self element.\n     * @param {KeyboardEvent} e - specifies the keyboard event.\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.onKeyHandler = function (self, e) {\n        var _this = this;\n        this.editorManager.observer.notify(KEY_UP, {\n            event: e, callBack: function () {\n                self.notify(CONSTANT.contentChanged, {});\n                _this.enableUndo(self);\n            }\n        });\n    };\n    /**\n     * onSuccess method\n     *\n     * @param {IRichTextEditor} self - specifies the self element.\n     * @param {IMarkdownFormatterCallBack} events - specifies the event call back\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.onSuccess = function (self, events) {\n        self.notify(CONSTANT.contentChanged, {});\n        if (events && (isNullOrUndefined(events.event) || events.event.action !== 'copy')) {\n            this.enableUndo(self);\n            self.notify(CONSTANT.execCommandCallBack, events);\n        }\n        self.trigger(CONSTANT.actionComplete, events, function (callbackArgs) {\n            self.setPlaceHolder();\n            if (callbackArgs.requestType === 'Images' || callbackArgs.requestType === 'Links' && self.editorMode === 'HTML') {\n                var args = callbackArgs;\n                if (callbackArgs.requestType === 'Links' && callbackArgs.event &&\n                    callbackArgs.event.type === 'keydown' &&\n                    callbackArgs.event.keyCode === 32) {\n                    return;\n                }\n                self.notify(CONSTANT.insertCompleted, {\n                    args: args.event, type: callbackArgs.requestType, isNotify: true,\n                    elements: args.elements\n                });\n            }\n            self.autoResize();\n        });\n    };\n    /**\n     * Save the data for undo and redo action.\n     *\n     * @param {KeyboardEvent} e - specifies the keyboard event.\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.saveData = function (e) {\n        this.editorManager.undoRedoManager.saveData(e);\n    };\n    /**\n     * getUndoStatus method\n     *\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.getUndoStatus = function () {\n        return this.editorManager.undoRedoManager.getUndoStatus();\n    };\n    /* eslint-disable */\n    /**\n     * getUndoRedoStack method\n     *\n     * @param {IHtmlUndoRedoData}  - specifies the redo data.\n     * @returns {void}\n     * @hidden\n\n     */\n    /* eslint-enable */\n    Formatter.prototype.getUndoRedoStack = function () {\n        return this.editorManager.undoRedoManager.undoRedoStack;\n    };\n    /**\n     * enableUndo method\n     *\n     * @param {IRichTextEditor} self - specifies the self element.\n     * @returns {void}\n     * @hidden\n\n     */\n    Formatter.prototype.enableUndo = function (self) {\n        var status = this.getUndoStatus();\n        if (self.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n            updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);\n        }\n        else {\n            if (self.toolbarModule) {\n                updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);\n            }\n        }\n    };\n    return Formatter;\n}());\nexport { Formatter };\n"]},"metadata":{},"sourceType":"module"}