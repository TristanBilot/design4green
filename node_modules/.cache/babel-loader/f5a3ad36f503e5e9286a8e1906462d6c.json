{"ast":null,"code":"import { isNullOrUndefined, isUndefined, extend, setValue, getValue, deleteObject, createElement } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil, Query, ODataAdaptor, WebApiAdaptor } from '@syncfusion/ej2-data';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { getSwapKey, isScheduledTask, getTaskData, isRemoteData, getIndex, isCountRequired, updateDates } from '../base/utils';\nimport { CellEdit } from './cell-edit';\nimport { TaskbarEdit } from './taskbar-edit';\nimport { DialogEdit } from './dialog-edit';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MultiSelect, CheckBoxSelection, DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { ConnectorLineEdit } from './connector-line-edit';\n/**\n * The Edit Module is used to handle editing actions.\n *\n */\n\nvar Edit =\n/** @class */\nfunction () {\n  function Edit(parent) {\n    this.isFromDeleteMethod = false;\n    this.targetedRecords = [];\n    /** @hidden */\n\n    this.updateParentRecords = [];\n    /** @hidden */\n\n    this.isaddtoBottom = false;\n    this.confirmDialog = null;\n    this.taskbarMoved = false;\n    this.predecessorUpdated = false;\n    this.isBreakLoop = false;\n    /**\n     * @private\n     */\n\n    this.deletedTaskDetails = [];\n    this.parent = parent;\n    this.validatedChildItems = [];\n\n    if (this.parent.editSettings.allowEditing && this.parent.editSettings.mode === 'Auto') {\n      this.cellEditModule = new CellEdit(this.parent);\n    }\n\n    if (this.parent.taskFields.dependency) {\n      this.parent.connectorLineEditModule = new ConnectorLineEdit(this.parent);\n    }\n\n    if (this.parent.editSettings.allowAdding || this.parent.editSettings.allowEditing && (this.parent.editSettings.mode === 'Dialog' || this.parent.editSettings.mode === 'Auto')) {\n      this.dialogModule = new DialogEdit(this.parent);\n    }\n\n    if (this.parent.editSettings.allowTaskbarEditing) {\n      this.taskbarEditModule = new TaskbarEdit(this.parent);\n    }\n\n    if (this.parent.editSettings.allowDeleting) {\n      var confirmDialog = createElement('div', {\n        id: this.parent.element.id + '_deleteConfirmDialog'\n      });\n      this.parent.element.appendChild(confirmDialog);\n      this.renderDeleteConfirmDialog();\n    }\n\n    this.parent.treeGrid.recordDoubleClick = this.recordDoubleClick.bind(this);\n    this.parent.treeGrid.editSettings.allowAdding = this.parent.editSettings.allowAdding;\n    this.parent.treeGrid.editSettings.allowDeleting = this.parent.editSettings.allowDeleting;\n    this.parent.treeGrid.editSettings.showDeleteConfirmDialog = this.parent.editSettings.showDeleteConfirmDialog;\n    this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n    this.updateDefaultColumnEditors();\n  }\n\n  Edit.prototype.getModuleName = function () {\n    return 'edit';\n  };\n  /**\n   * Method to update default edit params and editors for Gantt\n   *\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateDefaultColumnEditors = function () {\n    var customEditorColumns = [this.parent.taskFields.id, this.parent.taskFields.progress, this.parent.taskFields.resourceInfo, 'taskType'];\n\n    for (var i = 0; i < customEditorColumns.length; i++) {\n      if (!isNullOrUndefined(customEditorColumns[i]) && customEditorColumns[i].length > 0) {\n        // eslint-disable-next-line\n        var column = this.parent.getColumnByField(customEditorColumns[i], this.parent.treeGridModule.treeGridColumns);\n\n        if (column) {\n          if (column.field === this.parent.taskFields.id) {\n            this.updateIDColumnEditParams(column);\n          } else if (column.field === this.parent.taskFields.progress) {\n            this.updateProgessColumnEditParams(column);\n          } else if (column.field === this.parent.taskFields.resourceInfo) {\n            this.updateResourceColumnEditor(column);\n          } else if (column.field === 'taskType') {\n            this.updateTaskTypeColumnEditor(column);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Method to update editors for id column in Gantt\n   *\n   * @param {ColumnModel} column .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateIDColumnEditParams = function (column) {\n    var editParam = {\n      min: 0,\n      decimals: 0,\n      validateDecimalOnType: true,\n      format: 'n0',\n      showSpinButton: false\n    };\n    this.updateEditParams(column, editParam);\n  };\n  /**\n   * Method to update edit params of default progress column\n   *\n   * @param {ColumnModel} column .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateProgessColumnEditParams = function (column) {\n    var editParam = {\n      min: 0,\n      decimals: 0,\n      validateDecimalOnType: true,\n      max: 100,\n      format: 'n0'\n    };\n    this.updateEditParams(column, editParam);\n  };\n  /**\n   * Assign edit params for id and progress columns\n   *\n   * @param {ColumnModel} column .\n   * @param {object} editParam .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateEditParams = function (column, editParam) {\n    if (isNullOrUndefined(column.edit)) {\n      column.edit = {};\n      column.edit.params = {};\n    } else if (isNullOrUndefined(column.edit.params)) {\n      column.edit.params = {};\n    }\n\n    extend(editParam, column.edit.params);\n    column.edit.params = editParam;\n    var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n    ganttColumn.edit = column.edit;\n  };\n  /**\n   * Method to update resource column editor for default resource column\n   *\n   * @param {ColumnModel} column .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateResourceColumnEditor = function (column) {\n    if (this.parent.editSettings.allowEditing && isNullOrUndefined(column.edit) && this.parent.editSettings.mode === 'Auto') {\n      column.editType = 'dropdownedit';\n      column.edit = this.getResourceEditor();\n      var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n      ganttColumn.editType = 'dropdownedit';\n      ganttColumn.edit = column.edit;\n    }\n  };\n  /**\n   * Method to create resource custom editor\n   *\n   * @returns {IEditCell} .\n   */\n\n\n  Edit.prototype.getResourceEditor = function () {\n    var _this = this;\n\n    var resourceSettings = this.parent.resourceFields;\n    var editObject = {};\n    var editor;\n    MultiSelect.Inject(CheckBoxSelection);\n\n    editObject.write = function (args) {\n      _this.parent.treeGridModule.currentEditRow = {};\n      editor = new MultiSelect({\n        dataSource: new DataManager(_this.parent.resources),\n        fields: {\n          text: resourceSettings.name,\n          value: resourceSettings.id\n        },\n        mode: 'CheckBox',\n        showDropDownIcon: true,\n        popupHeight: '350px',\n        delimiterChar: ',',\n        value: _this.parent.treeGridModule.getResourceIds(args.rowData)\n      });\n      editor.appendTo(args.element);\n    };\n\n    editObject.read = function (element) {\n      var value = element.ej2_instances[0].value;\n      var resourcesName = [];\n\n      if (isNullOrUndefined(value)) {\n        value = [];\n      }\n\n      for (var i = 0; i < value.length; i++) {\n        for (var j = 0; j < _this.parent.resources.length; j++) {\n          if (_this.parent.resources[j][resourceSettings.id] === value[i]) {\n            resourcesName.push(_this.parent.resources[j][resourceSettings.name]);\n            break;\n          }\n        }\n      }\n\n      _this.parent.treeGridModule.currentEditRow[_this.parent.taskFields.resourceInfo] = value;\n      return resourcesName.join(',');\n    };\n\n    editObject.destroy = function () {\n      if (editor) {\n        editor.destroy();\n      }\n    };\n\n    return editObject;\n  };\n  /**\n   * Method to update task type column editor for task type\n   *\n   * @param {ColumnModel} column .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateTaskTypeColumnEditor = function (column) {\n    if (this.parent.editSettings.allowEditing && isNullOrUndefined(column.edit) && this.parent.editSettings.mode === 'Auto') {\n      column.editType = 'dropdownedit';\n      column.edit = this.getTaskTypeEditor();\n      var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n      ganttColumn.editType = 'dropdownedit';\n      ganttColumn.edit = column.edit;\n    }\n  };\n  /**\n   * Method to create task type custom editor\n   *\n   * @returns {IEditCell} .\n   */\n\n\n  Edit.prototype.getTaskTypeEditor = function () {\n    var _this = this;\n\n    var editObject = {};\n    var editor;\n    var types = [{\n      'ID': 1,\n      'Value': 'FixedUnit'\n    }, {\n      'ID': 2,\n      'Value': 'FixedWork'\n    }, {\n      'ID': 3,\n      'Value': 'FixedDuration'\n    }];\n\n    editObject.write = function (args) {\n      _this.parent.treeGridModule.currentEditRow = {};\n      editor = new DropDownList({\n        dataSource: new DataManager(types),\n        fields: {\n          value: 'Value'\n        },\n        popupHeight: '350px',\n        value: getValue('taskType', args.rowData.ganttProperties)\n      });\n      editor.appendTo(args.element);\n    };\n\n    editObject.read = function (element) {\n      var value = element.ej2_instances[0].value;\n      var key = 'taskType';\n      _this.parent.treeGridModule.currentEditRow[key] = value;\n      return value;\n    };\n\n    editObject.destroy = function () {\n      if (editor) {\n        editor.destroy();\n      }\n    };\n\n    return editObject;\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.reUpdateEditModules = function () {\n    var editSettings = this.parent.editSettings;\n\n    if (editSettings.allowEditing) {\n      if (this.parent.editModule.cellEditModule && editSettings.mode === 'Dialog') {\n        this.cellEditModule.destroy();\n        this.parent.treeGrid.recordDoubleClick = this.recordDoubleClick.bind(this);\n      } else if (isNullOrUndefined(this.parent.editModule.cellEditModule) && editSettings.mode === 'Auto') {\n        this.cellEditModule = new CellEdit(this.parent);\n      }\n\n      if (this.parent.editModule.dialogModule && editSettings.mode === 'Auto') {\n        this.parent.treeGrid.recordDoubleClick = undefined;\n      } else if (isNullOrUndefined(this.parent.editModule.dialogModule)) {\n        this.dialogModule = new DialogEdit(this.parent);\n      }\n    } else {\n      if (this.cellEditModule) {\n        this.cellEditModule.destroy();\n      }\n\n      if (this.dialogModule) {\n        this.dialogModule.destroy();\n      }\n    }\n\n    if (editSettings.allowDeleting && editSettings.showDeleteConfirmDialog) {\n      if (isNullOrUndefined(this.confirmDialog)) {\n        var confirmDialog = createElement('div', {\n          id: this.parent.element.id + '_deleteConfirmDialog'\n        });\n        this.parent.element.appendChild(confirmDialog);\n        this.renderDeleteConfirmDialog();\n      }\n    } else if (!editSettings.allowDeleting || !editSettings.showDeleteConfirmDialog) {\n      if (this.confirmDialog && !this.confirmDialog.isDestroyed) {\n        this.confirmDialog.destroy();\n      }\n    }\n\n    if (editSettings.allowTaskbarEditing) {\n      if (isNullOrUndefined(this.parent.editModule.taskbarEditModule)) {\n        this.taskbarEditModule = new TaskbarEdit(this.parent);\n      }\n    } else {\n      if (this.taskbarEditModule) {\n        this.taskbarEditModule.destroy();\n      }\n    }\n  };\n\n  Edit.prototype.recordDoubleClick = function (args) {\n    if (this.parent.editSettings.allowEditing && this.parent.editSettings.mode === 'Dialog') {\n      var ganttData = void 0;\n\n      if (args.row) {\n        var rowIndex = getValue('rowIndex', args.row);\n        ganttData = this.parent.currentViewData[rowIndex];\n      }\n\n      if (!isNullOrUndefined(ganttData)) {\n        this.dialogModule.openEditDialog(ganttData);\n      }\n    }\n\n    this.parent.ganttChartModule.recordDoubleClick(args);\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.destroy = function () {\n    if (this.cellEditModule) {\n      this.cellEditModule.destroy();\n    }\n\n    if (this.taskbarEditModule) {\n      this.taskbarEditModule.destroy();\n    }\n\n    if (this.dialogModule) {\n      this.dialogModule.destroy();\n    }\n\n    if (this.confirmDialog && !this.confirmDialog.isDestroyed) {\n      this.confirmDialog.destroy();\n    }\n  };\n  /**\n   * Method to update record with new values.\n   *\n   * @param {Object} data - Defines new data to update.\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateRecordByID = function (data) {\n    if (!this.parent.readOnly) {\n      var tasks = this.parent.taskFields;\n\n      if (isNullOrUndefined(data) || isNullOrUndefined(data[tasks.id])) {\n        return;\n      }\n\n      var ganttData = this.parent.viewType === 'ResourceView' ? this.parent.flatData[this.parent.getTaskIds().indexOf('T' + data[tasks.id])] : this.parent.getRecordByID(data[tasks.id]);\n\n      if (!isNullOrUndefined(this.parent.editModule) && ganttData) {\n        this.parent.isOnEdit = true;\n        this.validateUpdateValues(data, ganttData, true);\n        var keys = Object.keys(data);\n\n        if (keys.indexOf(tasks.startDate) !== -1 || keys.indexOf(tasks.endDate) !== -1 || keys.indexOf(tasks.duration) !== -1) {\n          this.parent.dataOperation.calculateScheduledValues(ganttData, ganttData.taskData, false);\n        }\n\n        this.parent.dataOperation.updateWidthLeft(ganttData);\n\n        if (!isUndefined(data[this.parent.taskFields.dependency]) && data[this.parent.taskFields.dependency] !== ganttData.ganttProperties.predecessorsName) {\n          this.parent.connectorLineEditModule.updatePredecessor(ganttData, data[this.parent.taskFields.dependency]);\n        } else {\n          var args = {};\n          args.data = ganttData;\n\n          if (this.parent.viewType === 'ResourceView') {\n            args.action = 'methodUpdate';\n          }\n\n          this.parent.editModule.initiateUpdateAction(args);\n        }\n      }\n    }\n  };\n  /**\n   *\n   * @param {object} data .\n   * @param {IGanttData} ganttData .\n   * @param {boolean} isFromDialog .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.validateUpdateValues = function (data, ganttData, isFromDialog) {\n    var ganttObj = this.parent;\n    var tasks = ganttObj.taskFields;\n    var ganttPropByMapping = getSwapKey(ganttObj.columnMapping);\n    var scheduleFieldNames = [];\n    var isScheduleValueUpdated = false;\n\n    for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if ([tasks.startDate, tasks.endDate, tasks.duration].indexOf(key) !== -1) {\n        if (isNullOrUndefined(data[key]) && !ganttObj.allowUnscheduledTasks) {\n          continue;\n        }\n\n        if (isFromDialog) {\n          if (tasks.duration === key) {\n            ganttObj.dataOperation.updateDurationValue(data[key], ganttData.ganttProperties);\n\n            if (ganttData.ganttProperties.duration > 0 && ganttData.ganttProperties.isMilestone) {\n              this.parent.setRecordValue('isMilestone', false, ganttData.ganttProperties, true);\n            }\n\n            ganttObj.dataOperation.updateMappingData(ganttData, ganttPropByMapping[key]);\n          } else {\n            var tempDate = typeof data[key] === 'string' ? new Date(data[key]) : data[key];\n            ganttObj.setRecordValue(ganttPropByMapping[key], tempDate, ganttData.ganttProperties, true);\n            ganttObj.dataOperation.updateMappingData(ganttData, ganttPropByMapping[key]);\n          }\n        } else {\n          scheduleFieldNames.push(key);\n          isScheduleValueUpdated = true;\n        }\n      } else if (tasks.resourceInfo === key) {\n        var resourceData = ganttObj.dataOperation.setResourceInfo(data);\n\n        if (this.parent.viewType === 'ResourceView') {\n          if (JSON.stringify(resourceData) !== JSON.stringify(ganttData.ganttProperties.resourceInfo)) {\n            this.parent.editModule.dialogModule.isResourceUpdate = true;\n            this.parent.editModule.dialogModule.previousResource = !isNullOrUndefined(ganttData.ganttProperties.resourceInfo) ? ganttData.ganttProperties.resourceInfo.slice() : [];\n          } else {\n            this.parent.editModule.dialogModule.isResourceUpdate = false;\n          }\n        }\n\n        ganttData.ganttProperties.resourceInfo = resourceData;\n        ganttObj.dataOperation.updateMappingData(ganttData, 'resourceInfo');\n      } else if (tasks.dependency === key) {//..\n      } else if ([tasks.progress, tasks.notes, tasks.durationUnit, tasks.expandState, tasks.milestone, tasks.name, tasks.baselineStartDate, tasks.baselineEndDate, tasks.id, tasks.segments].indexOf(key) !== -1) {\n        var column = ganttObj.columnByField[key];\n        /* eslint-disable-next-line */\n\n        var value = data[key];\n\n        if (!isNullOrUndefined(column) && (column.editType === 'datepickeredit' || column.editType === 'datetimepickeredit')) {\n          value = ganttObj.dataOperation.getDateFromFormat(value);\n        }\n\n        var ganttPropKey = ganttPropByMapping[key];\n\n        if (key === tasks.id) {\n          ganttPropKey = 'taskId';\n        } else if (key === tasks.name) {\n          ganttPropKey = 'taskName';\n        } else if (key === tasks.segments) {\n          ganttPropKey = 'segments';\n          /* eslint-disable-next-line */\n\n          if (data && !isNullOrUndefined(data[this.parent.taskFields.segments]) && data[this.parent.taskFields.segments].length > 0) {\n            var totDuration = 0;\n\n            for (var i = 0; i < ganttData.ganttProperties.segments.length; i++) {\n              totDuration = totDuration + ganttData.ganttProperties.segments[i].duration;\n            }\n\n            var sdate = ganttData.ganttProperties.startDate;\n            /* eslint-disable-next-line */\n\n            var edate = this.parent.dataOperation.getEndDate(sdate, totDuration, ganttData.ganttProperties.durationUnit, ganttData.ganttProperties, false);\n            ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(edate), ganttData.ganttProperties, true);\n          }\n        }\n\n        if (!isNullOrUndefined(ganttPropKey)) {\n          ganttObj.setRecordValue(ganttPropKey, value, ganttData.ganttProperties, true);\n        }\n\n        if ((key === tasks.baselineStartDate || key === tasks.baselineEndDate) && ganttData.ganttProperties.baselineStartDate && ganttData.ganttProperties.baselineEndDate) {\n          ganttObj.setRecordValue('baselineLeft', ganttObj.dataOperation.calculateBaselineLeft(ganttData.ganttProperties), ganttData.ganttProperties, true);\n          ganttObj.setRecordValue('baselineWidth', ganttObj.dataOperation.calculateBaselineWidth(ganttData.ganttProperties), ganttData.ganttProperties, true);\n        }\n\n        ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n        /* eslint-disable-next-line */\n\n        if (key === tasks.segments && data && !isNullOrUndefined(data[this.parent.taskFields.segments]) && data[this.parent.taskFields.segments].length > 0) {\n          ganttObj.dataOperation.setSegmentsInfo(ganttData, true);\n        }\n\n        ganttObj.setRecordValue(key, value, ganttData);\n      } else if (tasks.indicators === key) {\n        var value = data[key];\n        ganttObj.setRecordValue('indicators', value, ganttData.ganttProperties, true);\n        ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n        ganttObj.setRecordValue(key, value, ganttData);\n      } else if (tasks.work === key) {\n        ganttObj.setRecordValue('work', data[key], ganttData.ganttProperties, true);\n        this.parent.dataOperation.updateMappingData(ganttData, 'work');\n        this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n        this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n      } else if (key === 'taskType') {\n        ganttObj.setRecordValue('taskType', data[key], ganttData.ganttProperties, true); //this.parent.dataOperation.updateMappingData(ganttData, 'taskType');\n      } else if (ganttObj.customColumns.indexOf(key) !== -1) {\n        var column = ganttObj.columnByField[key];\n        /* eslint-disable-next-line */\n\n        var value = data[key];\n\n        if (isNullOrUndefined(column.edit)) {\n          if (column.editType === 'datepickeredit' || column.editType === 'datetimepickeredit') {\n            value = ganttObj.dataOperation.getDateFromFormat(value);\n          }\n        }\n\n        ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n        ganttObj.setRecordValue(key, value, ganttData);\n      } else if (tasks.manual === key) {\n        ganttObj.setRecordValue('isAutoSchedule', !data[key], ganttData.ganttProperties, true);\n        this.parent.setRecordValue(key, data[key], ganttData);\n        this.updateTaskScheduleModes(ganttData);\n      }\n    }\n\n    if (isScheduleValueUpdated) {\n      this.validateScheduleValues(scheduleFieldNames, ganttData, data);\n    }\n  };\n  /**\n   * To update duration, work, resource unit\n   *\n   * @param {IGanttData} currentData .\n   * @param {string} column .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateResourceRelatedFields = function (currentData, column) {\n    var ganttProp = currentData.ganttProperties;\n    var taskType = ganttProp.taskType;\n    var isEffectDriven;\n    var isAutoSchedule = ganttProp.isAutoSchedule;\n\n    if (!isNullOrUndefined(ganttProp.resourceInfo)) {\n      if (ganttProp.work > 0 || column === 'work') {\n        switch (taskType) {\n          case 'FixedUnit':\n            if (ganttProp.resourceInfo.length === 0) {\n              return;\n            } else if (isAutoSchedule && ganttProp.resourceInfo.length && (column === 'work' || column === 'resource')) {\n              this.parent.dataOperation.updateDurationWithWork(currentData);\n            } else if (!isAutoSchedule && column === 'work') {\n              this.parent.dataOperation.updateUnitWithWork(currentData);\n            } else {\n              this.parent.dataOperation.updateWorkWithDuration(currentData);\n            }\n\n            break;\n\n          case 'FixedWork':\n            if (ganttProp.resourceInfo.length === 0) {\n              return;\n            } else if (isAutoSchedule) {\n              if (column === 'duration' || column === 'endDate') {\n                this.parent.dataOperation.updateUnitWithWork(currentData);\n\n                if (ganttProp.duration === 0) {\n                  this.parent.setRecordValue('work', 0, ganttProp, true);\n\n                  if (!isNullOrUndefined(this.parent.taskFields.work)) {\n                    this.parent.dataOperation.updateMappingData(currentData, 'work');\n                  }\n                }\n              } else {\n                this.parent.dataOperation.updateDurationWithWork(currentData);\n              }\n            } else {\n              if (column === 'work') {\n                this.parent.dataOperation.updateUnitWithWork(currentData);\n              } else {\n                this.parent.dataOperation.updateWorkWithDuration(currentData);\n              }\n            }\n\n            break;\n\n          case 'FixedDuration':\n            if (ganttProp.resourceInfo.length && (column === 'work' || isAutoSchedule && isEffectDriven && column === 'resource')) {\n              this.parent.dataOperation.updateUnitWithWork(currentData);\n            } else {\n              this.parent.dataOperation.updateWorkWithDuration(currentData);\n            }\n\n            break;\n        }\n      } else {\n        this.parent.dataOperation.updateWorkWithDuration(currentData);\n      }\n    }\n  };\n\n  Edit.prototype.validateScheduleValues = function (fieldNames, ganttData, data) {\n    var ganttObj = this.parent;\n\n    if (fieldNames.length > 2) {\n      ganttObj.dataOperation.calculateScheduledValues(ganttData, data, false);\n    } else if (fieldNames.length > 1) {\n      this.validateScheduleByTwoValues(data, fieldNames, ganttData);\n    } else {\n      this.dialogModule.validateScheduleValuesByCurrentField(fieldNames[0], data[fieldNames[0]], ganttData);\n    }\n  };\n\n  Edit.prototype.validateScheduleByTwoValues = function (data, fieldNames, ganttData) {\n    var ganttObj = this.parent;\n    var startDate;\n    var endDate;\n    var duration;\n    var tasks = ganttObj.taskFields;\n    var ganttProp = ganttData.ganttProperties;\n    var isUnscheduledTask = ganttObj.allowUnscheduledTasks;\n\n    if (fieldNames.indexOf(tasks.startDate) !== -1) {\n      startDate = data[tasks.startDate];\n    }\n\n    if (fieldNames.indexOf(tasks.endDate) !== -1) {\n      endDate = data[tasks.endDate];\n    }\n\n    if (fieldNames.indexOf(tasks.duration) !== -1) {\n      duration = data[tasks.duration];\n    }\n\n    if (startDate && endDate || isUnscheduledTask && fieldNames.indexOf(tasks.startDate) !== -1 && fieldNames.indexOf(tasks.endDate) !== -1) {\n      ganttObj.setRecordValue('startDate', ganttObj.dataOperation.getDateFromFormat(startDate), ganttProp, true);\n      ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(endDate), ganttProp, true);\n      ganttObj.dataOperation.calculateDuration(ganttData);\n    } else if (endDate && duration || isUnscheduledTask && fieldNames.indexOf(tasks.endDate) !== -1 && fieldNames.indexOf(tasks.duration) !== -1) {\n      ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(endDate), ganttProp, true);\n      ganttObj.dataOperation.updateDurationValue(duration, ganttProp);\n    } else if (startDate && duration || isUnscheduledTask && fieldNames.indexOf(tasks.startDate) !== -1 && fieldNames.indexOf(tasks.duration) !== -1) {\n      ganttObj.setRecordValue('startDate', ganttObj.dataOperation.getDateFromFormat(startDate), ganttProp, true);\n      ganttObj.dataOperation.updateDurationValue(duration, ganttProp);\n    }\n  };\n\n  Edit.prototype.isTaskbarMoved = function (data) {\n    var isMoved = false;\n    var taskData = data.ganttProperties;\n    var prevData = this.parent.previousRecords && this.parent.previousRecords[data.uniqueID];\n\n    if (prevData && prevData.ganttProperties) {\n      var prevStart = getValue('ganttProperties.startDate', prevData);\n      var prevEnd = getValue('ganttProperties.endDate', prevData);\n      var prevDuration = getValue('ganttProperties.duration', prevData);\n      var prevDurationUnit = getValue('ganttProperties.durationUnit', prevData);\n      var keys = Object.keys(prevData.ganttProperties);\n\n      if (keys.indexOf('startDate') !== -1 || keys.indexOf('endDate') !== -1 || keys.indexOf('duration') !== -1 || keys.indexOf('durationUnit') !== -1) {\n        if (isNullOrUndefined(prevStart) && !isNullOrUndefined(taskData.startDate) || isNullOrUndefined(prevEnd) && !isNullOrUndefined(taskData.endDate) || isNullOrUndefined(taskData.startDate) && !isNullOrUndefined(prevStart) || isNullOrUndefined(taskData.endDate) && !isNullOrUndefined(prevEnd) || prevStart && prevStart.getTime() !== taskData.startDate.getTime() || prevEnd && prevEnd.getTime() !== taskData.endDate.getTime() || !isNullOrUndefined(prevDuration) && prevDuration !== taskData.duration || !isNullOrUndefined(prevDuration) && prevDuration === taskData.duration && prevDurationUnit !== taskData.durationUnit) {\n          isMoved = true;\n        }\n      }\n    }\n\n    return isMoved;\n  };\n\n  Edit.prototype.isPredecessorUpdated = function (data) {\n    var isPredecessorUpdated = false;\n    var prevData = this.parent.previousRecords[data.uniqueID]; // eslint-disable-next-line\n\n    if (prevData && prevData.ganttProperties && prevData.ganttProperties.hasOwnProperty('predecessor')) {\n      if (data.ganttProperties.predecessorsName !== prevData.ganttProperties.predecessorsName) {\n        isPredecessorUpdated = true;\n      } else {\n        this.parent.setRecordValue('predecessor', prevData.ganttProperties.predecessor, data.ganttProperties, true);\n      }\n    }\n\n    return isPredecessorUpdated;\n  };\n  /**\n   * Method to check need to open predecessor validate dialog\n   *\n   * @param {IGanttData} data .\n   * @returns {boolean} .\n   */\n\n\n  Edit.prototype.isCheckPredecessor = function (data) {\n    var isValidatePredecessor = false;\n    var prevData = this.parent.previousRecords[data.uniqueID];\n\n    if (prevData && this.parent.taskFields.dependency && this.parent.isInPredecessorValidation && this.parent.predecessorModule.getValidPredecessor(data).length > 0) {\n      if (this.isTaskbarMoved(data)) {\n        isValidatePredecessor = true;\n      }\n    }\n\n    return isValidatePredecessor;\n  };\n  /**\n   * Method to copy the ganttProperties values\n   *\n   * @param {IGanttData} data .\n   * @param {IGanttData} updateData .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateGanttProperties = function (data, updateData) {\n    var skipProperty = ['taskId', 'uniqueID', 'rowUniqueID', 'parentId'];\n    Object.keys(data.ganttProperties).forEach(function (property) {\n      if (skipProperty.indexOf(property) === -1) {\n        updateData.ganttProperties[property] = data.ganttProperties[property];\n      }\n    });\n  };\n  /**\n   * Method to update all dependent record on edit action\n   *\n   * @param {ITaskAddedEventArgs} args .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.initiateUpdateAction = function (args) {\n    var isValidatePredecessor = this.isCheckPredecessor(args.data);\n    this.taskbarMoved = this.isTaskbarMoved(args.data);\n    this.predecessorUpdated = this.isPredecessorUpdated(args.data);\n\n    if (this.predecessorUpdated) {\n      this.parent.isConnectorLineUpdate = true;\n      this.parent.connectorLineEditModule.addRemovePredecessor(args.data);\n    }\n\n    var validateObject = {};\n\n    if (isValidatePredecessor) {\n      validateObject = this.parent.connectorLineEditModule.validateTypes(args.data);\n      this.parent.isConnectorLineUpdate = true;\n\n      if (!isNullOrUndefined(getValue('violationType', validateObject))) {\n        var newArgs = this.validateTaskEvent(args);\n\n        if (newArgs.validateMode.preserveLinkWithEditing === false && newArgs.validateMode.removeLink === false && newArgs.validateMode.respectLink === false) {\n          this.parent.connectorLineEditModule.openValidationDialog(validateObject);\n        } else {\n          this.parent.connectorLineEditModule.applyPredecessorOption();\n        }\n      } else {\n        this.updateEditedTask(args);\n      }\n    } else {\n      if (this.taskbarMoved) {\n        this.parent.isConnectorLineUpdate = true;\n      }\n\n      this.updateEditedTask(args);\n    }\n  };\n  /**\n   *\n   * @param {ITaskbarEditedEventArgs} editedEventArgs method to trigger validate predecessor link by dialog\n   * @returns {IValidateArgs} .\n   */\n\n\n  Edit.prototype.validateTaskEvent = function (editedEventArgs) {\n    var newArgs = {};\n    this.resetValidateArgs();\n    this.parent.currentEditedArgs = newArgs;\n    newArgs.cancel = false;\n    newArgs.data = editedEventArgs.data;\n    newArgs.requestType = 'validateLinkedTask';\n    newArgs.validateMode = this.parent.dialogValidateMode;\n    newArgs.editEventArgs = editedEventArgs;\n    this.parent.actionBeginTask(newArgs);\n    return newArgs;\n  };\n\n  Edit.prototype.resetValidateArgs = function () {\n    this.parent.dialogValidateMode.preserveLinkWithEditing = true;\n    this.parent.dialogValidateMode.removeLink = false;\n    this.parent.dialogValidateMode.respectLink = false;\n  };\n  /**\n   *\n   * @param {ITaskAddedEventArgs} args - Edited event args like taskbar editing, dialog editing, cell editing\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateEditedTask = function (args) {\n    var ganttRecord = args.data;\n    this.updateParentChildRecord(ganttRecord);\n\n    if (this.parent.isConnectorLineUpdate) {\n      /* validating predecessor for updated child items */\n      for (var i = 0; i < this.validatedChildItems.length; i++) {\n        var child = this.validatedChildItems[i];\n\n        if (child.ganttProperties.predecessor && child.ganttProperties.predecessor.length > 0) {\n          this.parent.editedTaskBarItem = child;\n          this.parent.predecessorModule.validatePredecessor(child, [], '');\n        }\n      }\n      /** validating predecessor for current edited records */\n\n\n      if (ganttRecord.ganttProperties.predecessor) {\n        this.parent.isMileStoneEdited = ganttRecord.ganttProperties.isMilestone;\n\n        if (this.taskbarMoved) {\n          this.parent.editedTaskBarItem = ganttRecord;\n        }\n\n        this.parent.predecessorModule.validatePredecessor(ganttRecord, [], '');\n      }\n\n      this.updateParentItemOnEditing();\n    }\n    /** Update parent up-to zeroth level */\n\n\n    if (ganttRecord.parentItem || this.parent.taskMode !== 'Auto') {\n      this.parent.dataOperation.updateParentItems(ganttRecord, true);\n    }\n\n    this.initiateSaveAction(args);\n  };\n\n  Edit.prototype.updateParentItemOnEditing = function () {\n    var childRecord = getValue('parentRecord', this.parent.predecessorModule);\n\n    for (var i = 0; i < childRecord.length; i++) {\n      this.parent.dataOperation.updateParentItems(childRecord[i]);\n    }\n\n    setValue('parentRecord', [], this.parent.predecessorModule);\n    setValue('parentIds', [], this.parent.predecessorModule);\n  };\n  /**\n   * To update parent records while perform drag action.\n   *\n   * @param {IGanttData} data .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateParentChildRecord = function (data) {\n    var ganttRecord = data;\n\n    if (ganttRecord.hasChildRecords && this.taskbarMoved && this.parent.taskMode === 'Auto') {\n      this.updateChildItems(ganttRecord);\n    }\n  };\n  /**\n   * To update records while changing schedule mode.\n   *\n   * @param {IGanttData} data .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateTaskScheduleModes = function (data) {\n    var currentValue = data[this.parent.taskFields.startDate];\n    var ganttProp = data.ganttProperties;\n\n    if (data.hasChildRecords && ganttProp.isAutoSchedule) {\n      this.parent.setRecordValue('startDate', ganttProp.autoStartDate, ganttProp, true);\n      this.parent.setRecordValue('endDate', ganttProp.autoEndDate, ganttProp, true);\n      this.parent.setRecordValue('width', this.parent.dataOperation.calculateWidth(data, true), ganttProp, true);\n      this.parent.setRecordValue('left', this.parent.dataOperation.calculateLeft(ganttProp, true), ganttProp, true);\n      this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(ganttProp.width, ganttProp.progress), ganttProp, true);\n      this.parent.dataOperation.calculateDuration(data);\n    } else if (data.hasChildRecords && !ganttProp.isAutoSchedule) {\n      this.parent.dataOperation.updateWidthLeft(data);\n      this.parent.dataOperation.calculateDuration(data);\n      this.parent.setRecordValue('autoStartDate', ganttProp.startDate, ganttProp, true);\n      this.parent.setRecordValue('autoEndDate', ganttProp.endDate, ganttProp, true);\n      this.parent.setRecordValue('autoDuration', this.parent.dataOperation.calculateAutoDuration(data), ganttProp, true);\n      this.parent.dataOperation.updateAutoWidthLeft(data);\n    } else {\n      var startDate = this.parent.dateValidationModule.checkStartDate(currentValue, data.ganttProperties);\n      this.parent.setRecordValue('startDate', startDate, data.ganttProperties, true);\n      this.parent.dataOperation.updateMappingData(data, 'startDate');\n      this.parent.dateValidationModule.calculateEndDate(data);\n      this.parent.setRecordValue('taskData.' + this.parent.taskFields.manual, data[this.parent.taskFields.manual], data);\n      this.parent.dataOperation.updateWidthLeft(data);\n    }\n  };\n  /**\n   *\n   * @param {IGanttData} data .\n   * @param {Date} newStartDate .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.calculateDateByRoundOffDuration = function (data, newStartDate) {\n    var ganttRecord = data;\n    var taskData = ganttRecord.ganttProperties;\n    var projectStartDate = new Date(newStartDate.getTime());\n\n    if (!isNullOrUndefined(taskData.endDate) && isNullOrUndefined(taskData.startDate)) {\n      var endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, taskData, null);\n      this.parent.setRecordValue('endDate', this.parent.dateValidationModule.checkEndDate(endDate, ganttRecord.ganttProperties), taskData, true);\n    } else {\n      this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, taskData, false), taskData, true);\n\n      if (!isNullOrUndefined(taskData.duration)) {\n        this.parent.dateValidationModule.calculateEndDate(ganttRecord);\n      }\n    }\n\n    this.parent.dataOperation.updateWidthLeft(data);\n    this.parent.dataOperation.updateTaskData(ganttRecord);\n  };\n  /**\n   * To update progress value of parent tasks\n   *\n   * @param {IParent} cloneParent .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateParentProgress = function (cloneParent) {\n    var parentProgress = 0;\n    var parent = this.parent.getParentTask(cloneParent);\n    var childRecords = parent.childRecords;\n    var childCount = childRecords ? childRecords.length : 0;\n    var totalProgress = 0;\n    var milesStoneCount = 0;\n    var taskCount = 0;\n    var totalDuration = 0;\n    var progressValues = {};\n\n    if (childRecords) {\n      for (var i = 0; i < childCount; i++) {\n        if ((!childRecords[i].ganttProperties.isMilestone || childRecords[i].hasChildRecords) && isScheduledTask(childRecords[i].ganttProperties)) {\n          progressValues = this.parent.dataOperation.getParentProgress(childRecords[i]);\n          totalProgress += getValue('totalProgress', progressValues);\n          totalDuration += getValue('totalDuration', progressValues);\n        } else {\n          milesStoneCount += 1;\n        }\n      }\n\n      taskCount = childCount - milesStoneCount;\n      parentProgress = taskCount > 0 ? Math.round(totalProgress / totalDuration) : 0;\n\n      if (isNaN(parentProgress)) {\n        parentProgress = 0;\n      }\n\n      this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(parent.ganttProperties.isAutoSchedule ? parent.ganttProperties.width : parent.ganttProperties.autoWidth, parentProgress), parent.ganttProperties, true);\n      this.parent.setRecordValue('progress', Math.floor(parentProgress), parent.ganttProperties, true);\n      this.parent.setRecordValue('totalProgress', totalProgress, parent.ganttProperties, true);\n      this.parent.setRecordValue('totalDuration', totalDuration, parent.ganttProperties, true);\n    }\n\n    this.parent.dataOperation.updateTaskData(parent);\n\n    if (parent.parentItem) {\n      this.updateParentProgress(parent.parentItem);\n    }\n  };\n  /**\n   * Method to revert cell edit action\n   *\n   * @param {object} args .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Edit.prototype.revertCellEdit = function (args) {\n    this.parent.editModule.reUpdatePreviousRecords(false, true);\n    this.resetEditProperties();\n  };\n  /**\n   * @param {boolean} isRefreshChart .\n   * @param {boolean} isRefreshGrid .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.reUpdatePreviousRecords = function (isRefreshChart, isRefreshGrid) {\n    var collection = this.parent.previousRecords;\n    var keys = Object.keys(collection);\n\n    for (var i = 0; i < keys.length; i++) {\n      var uniqueId = keys[i];\n      var prevTask = collection[uniqueId];\n      var originalData = this.parent.getTaskByUniqueID(uniqueId);\n      this.copyTaskData(originalData.taskData, prevTask.taskData);\n      delete prevTask.taskData;\n      this.copyTaskData(originalData.ganttProperties, prevTask.ganttProperties);\n      delete prevTask.ganttProperties;\n      this.copyTaskData(originalData, prevTask);\n      var rowIndex = this.parent.currentViewData.indexOf(originalData);\n\n      if (isRefreshChart) {\n        this.parent.chartRowsModule.refreshRow(rowIndex);\n      }\n\n      if (isRefreshGrid) {\n        var dataId = this.parent.viewType === 'ProjectView' ? originalData.ganttProperties.taskId : originalData.ganttProperties.rowUniqueID;\n        this.parent.treeGrid.grid.setRowData(dataId, originalData);\n        var row = this.parent.treeGrid.grid.getRowObjectFromUID(this.parent.treeGrid.grid.getDataRows()[rowIndex].getAttribute('data-uid'));\n        row.data = originalData;\n      }\n    }\n  };\n  /**\n   * Copy previous task data value to edited task data\n   *\n   * @param {object} existing .\n   * @param {object} newValue .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.copyTaskData = function (existing, newValue) {\n    if (!isNullOrUndefined(newValue)) {\n      extend(existing, newValue);\n    }\n  };\n  /**\n   * To update schedule date on editing.\n   *\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Edit.prototype.updateScheduleDatesOnEditing = function (args) {//..\n  };\n  /**\n   *\n   * @param {IGanttData} ganttRecord .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateChildItems = function (ganttRecord) {\n    var previousData = this.parent.previousRecords[ganttRecord.uniqueID];\n    var previousStartDate;\n\n    if (isNullOrUndefined(previousData) || isNullOrUndefined(previousData) && !isNullOrUndefined(previousData.ganttProperties)) {\n      previousStartDate = new Date(ganttRecord.ganttProperties.startDate.getTime());\n    } else {\n      previousStartDate = new Date(previousData.ganttProperties.startDate.getTime());\n    }\n\n    var currentStartDate = ganttRecord.ganttProperties.startDate;\n    var childRecords = [];\n    var validStartDate;\n    var validEndDate;\n    var calcEndDate;\n    var isRightMove;\n    var durationDiff;\n    this.getUpdatableChildRecords(ganttRecord, childRecords);\n\n    if (childRecords.length === 0) {\n      return;\n    }\n\n    if (previousStartDate.getTime() > currentStartDate.getTime()) {\n      validStartDate = this.parent.dateValidationModule.checkStartDate(currentStartDate);\n      validEndDate = this.parent.dateValidationModule.checkEndDate(previousStartDate, ganttRecord.ganttProperties);\n      isRightMove = false;\n    } else {\n      validStartDate = this.parent.dateValidationModule.checkStartDate(previousStartDate);\n      validEndDate = this.parent.dateValidationModule.checkEndDate(currentStartDate, ganttRecord.ganttProperties);\n      isRightMove = true;\n    } //Get Duration\n\n\n    if (validStartDate.getTime() >= validEndDate.getTime()) {\n      durationDiff = 0;\n    } else {\n      durationDiff = this.parent.dateValidationModule.getDuration(validStartDate, validEndDate, 'minute', true, false);\n    }\n\n    for (var i = 0; i < childRecords.length; i++) {\n      if (childRecords[i].ganttProperties.isAutoSchedule) {\n        if (durationDiff > 0) {\n          var startDate = isScheduledTask(childRecords[i].ganttProperties) ? childRecords[i].ganttProperties.startDate : childRecords[i].ganttProperties.startDate ? childRecords[i].ganttProperties.startDate : childRecords[i].ganttProperties.endDate ? childRecords[i].ganttProperties.endDate : new Date(previousStartDate.toString());\n\n          if (isRightMove) {\n            calcEndDate = this.parent.dateValidationModule.getEndDate(this.parent.dateValidationModule.checkStartDate(startDate, childRecords[i].ganttProperties, childRecords[i].ganttProperties.isMilestone), durationDiff, 'minute', childRecords[i].ganttProperties, false);\n          } else {\n            calcEndDate = this.parent.dateValidationModule.getStartDate(this.parent.dateValidationModule.checkEndDate(startDate, childRecords[i].ganttProperties), durationDiff, 'minute', childRecords[i].ganttProperties);\n          }\n\n          this.calculateDateByRoundOffDuration(childRecords[i], calcEndDate);\n\n          if (this.parent.isOnEdit && this.validatedChildItems.indexOf(childRecords[i]) === -1) {\n            this.validatedChildItems.push(childRecords[i]);\n          }\n        } else if (isNullOrUndefined(previousData)) {\n          calcEndDate = previousStartDate;\n          this.calculateDateByRoundOffDuration(childRecords[i], calcEndDate);\n\n          if (this.parent.isOnEdit && this.validatedChildItems.indexOf(childRecords[i]) === -1) {\n            this.validatedChildItems.push(childRecords[i]);\n          }\n        }\n      }\n    }\n\n    if (childRecords.length) {\n      this.parent.dataOperation.updateParentItems(ganttRecord, true);\n    }\n  };\n  /**\n   * To get updated child records.\n   *\n   * @param {IGanttData} parentRecord .\n   * @param {IGanttData} childLists .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.getUpdatableChildRecords = function (parentRecord, childLists) {\n    var childRecords = parentRecord.childRecords;\n\n    for (var i = 0; i < childRecords.length; i++) {\n      if (childRecords[i].ganttProperties.isAutoSchedule) {\n        childLists.push(childRecords[i]);\n\n        if (childRecords[i].hasChildRecords) {\n          this.getUpdatableChildRecords(childRecords[i], childLists);\n        }\n      }\n    }\n  };\n  /**\n   * @param {ITaskbarEditedEventArgs} args .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.initiateSaveAction = function (args) {\n    var _this = this;\n\n    this.parent.showSpinner();\n    var eventArgs = {};\n    eventArgs.requestType = 'beforeSave';\n    eventArgs.data = args.data;\n    eventArgs.cancel = false;\n    eventArgs.modifiedRecords = this.parent.editedRecords;\n\n    if (!isNullOrUndefined(args.target)) {\n      eventArgs.target = args.target;\n    }\n\n    eventArgs.modifiedTaskData = getTaskData(this.parent.editedRecords, true);\n\n    if (args.action && args.action === 'DrawConnectorLine') {\n      eventArgs.action = 'DrawConnectorLine';\n    }\n\n    this.parent.trigger('actionBegin', eventArgs, function (eventArg) {\n      if (eventArg.cancel) {\n        _this.reUpdatePreviousRecords();\n\n        _this.parent.chartRowsModule.refreshRecords([args.data]);\n\n        _this.resetEditProperties(eventArgs); // Trigger action complete event with save canceled request type\n\n      } else {\n        eventArg.modifiedTaskData = getTaskData(eventArg.modifiedRecords, null, null, _this.parent);\n\n        if (isRemoteData(_this.parent.dataSource)) {\n          var data = _this.parent.dataSource;\n          var updatedData = {\n            changedRecords: eventArg.modifiedTaskData\n          };\n          var query = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n          var crud = null;\n          var dataAdaptor = data.adaptor;\n\n          if (!(dataAdaptor instanceof WebApiAdaptor && dataAdaptor instanceof ODataAdaptor) || data.dataSource.batchUrl) {\n            crud = data.saveChanges(updatedData, _this.parent.taskFields.id, null, query);\n          } else {\n            var changedRecords = 'changedRecords';\n            crud = data.update(_this.parent.taskFields.id, updatedData[changedRecords], null, query);\n          }\n\n          crud.then(function (e) {\n            return _this.dmSuccess(e, args);\n          }).catch(function (e) {\n            return _this.dmFailure(e, args);\n          });\n        } else {\n          _this.saveSuccess(args);\n        }\n      }\n    });\n  };\n\n  Edit.prototype.dmSuccess = function (e, args) {\n    this.saveSuccess(args);\n  };\n\n  Edit.prototype.dmFailure = function (e, args) {\n    if (this.deletedTaskDetails.length) {\n      var deleteRecords = this.deletedTaskDetails;\n\n      for (var d = 0; d < deleteRecords.length; d++) {\n        deleteRecords[d].isDelete = false;\n      }\n\n      this.deletedTaskDetails = [];\n    }\n\n    this.reUpdatePreviousRecords(true, true);\n    this.resetEditProperties();\n    this.parent.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  Edit.prototype.updateSharedTask = function (data) {\n    var ids = data.ganttProperties.sharedTaskUniqueIds;\n\n    for (var i = 0; i < ids.length; i++) {\n      var editRecord = this.parent.flatData[this.parent.ids.indexOf(ids[i].toString())];\n\n      if (editRecord.uniqueID !== data.uniqueID) {\n        this.updateGanttProperties(data, editRecord);\n        this.parent.setRecordValue('taskData', data.taskData, editRecord, true);\n        this.parent.dataOperation.updateTaskData(editRecord);\n        this.parent.dataOperation.updateResourceName(editRecord);\n\n        if (!isNullOrUndefined(editRecord.parentItem)) {\n          this.parent.dataOperation.updateParentItems(editRecord.parentItem);\n        }\n      }\n    }\n  };\n  /**\n   * Method for save action success for local and remote data\n   *\n   * @param {ITaskAddedEventArgs} args .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.saveSuccess = function (args) {\n    var eventArgs = {};\n\n    if (this.parent.timelineSettings.updateTimescaleView) {\n      var tempArray = this.parent.editedRecords;\n      this.parent.timelineModule.updateTimeLineOnEditing([tempArray], args.action);\n    }\n\n    if (this.parent.viewType === 'ResourceView') {\n      if (args.action === 'TaskbarEditing') {\n        this.updateSharedTask(args.data);\n      } else if (args.action === 'DialogEditing' || args.action === 'CellEditing' || args.action === 'methodUpdate') {\n        if (this.parent.editModule.dialogModule.isResourceUpdate) {\n          /* eslint-disable-next-line */\n          this.updateResoures(this.parent.editModule.dialogModule.previousResource, args.data.ganttProperties.resourceInfo, args.data);\n          this.updateSharedTask(args.data);\n          this.isTreeGridRefresh = true;\n        } else {\n          this.updateSharedTask(args.data);\n        }\n      } // method to update the edited parent records\n\n\n      for (var k = 0; k < this.updateParentRecords.length; k++) {\n        this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n      }\n\n      this.updateParentRecords = [];\n      this.parent.editModule.dialogModule.isResourceUpdate = false;\n      this.parent.editModule.dialogModule.previousResource = [];\n    }\n\n    if (!this.isTreeGridRefresh) {\n      this.parent.chartRowsModule.refreshRecords(this.parent.editedRecords);\n\n      if (this.parent.isConnectorLineUpdate && !isNullOrUndefined(this.parent.connectorLineEditModule)) {\n        this.parent.updatedConnectorLineCollection = [];\n        this.parent.connectorLineIds = [];\n        this.parent.connectorLineEditModule.refreshEditedRecordConnectorLine(this.parent.editedRecords);\n        this.updateScheduleDatesOnEditing(args);\n      }\n    }\n\n    if (!this.parent.editSettings.allowTaskbarEditing || this.parent.editSettings.allowTaskbarEditing && !this.taskbarEditModule.dependencyCancel) {\n      eventArgs.requestType = 'save';\n      eventArgs.data = args.data;\n      eventArgs.modifiedRecords = this.parent.editedRecords;\n      eventArgs.modifiedTaskData = getTaskData(this.parent.editedRecords, null, null, this.parent);\n\n      if (!isNullOrUndefined(args.action)) {\n        setValue('action', args.action, eventArgs);\n      }\n\n      if (args.action === 'TaskbarEditing') {\n        eventArgs.taskBarEditAction = args.taskBarEditAction;\n      }\n\n      this.endEditAction(args);\n      this.parent.trigger('actionComplete', eventArgs);\n    } else {\n      this.taskbarEditModule.dependencyCancel = false;\n      this.resetEditProperties();\n    }\n\n    if (this.parent.viewType === 'ResourceView' && this.isTreeGridRefresh) {\n      this.parent.treeGrid.parentData = [];\n      this.parent.treeGrid.refresh();\n      this.isTreeGridRefresh = false;\n    }\n  };\n\n  Edit.prototype.updateResoures = function (prevResource, currentResource, updateRecord) {\n    var flatRecords = this.parent.flatData;\n    var currentLength = currentResource ? currentResource.length : 0;\n    var previousLength = prevResource ? prevResource.length : 0;\n\n    if (currentLength === 0 && previousLength === 0) {\n      return;\n    }\n\n    for (var index = 0; index < currentLength; index++) {\n      var recordIndex = [];\n      var resourceID = parseInt(currentResource[index][this.parent.resourceFields.id], 10);\n\n      for (var i = 0; i < prevResource.length; i++) {\n        if (parseInt(prevResource[i][this.parent.resourceFields.id], 10) === resourceID) {\n          recordIndex.push(i);\n          break;\n        }\n      }\n\n      if (recordIndex.length === 0) {\n        var parentRecord = flatRecords[this.parent.getTaskIds().indexOf('R' + resourceID)];\n\n        if (parentRecord) {\n          this.addNewRecord(updateRecord, parentRecord);\n        }\n      } else {\n        prevResource.splice(parseInt(recordIndex[0].toString(), 10), 1);\n      }\n    }\n\n    var prevLength = prevResource ? prevResource.length : 0;\n\n    for (var index = 0; index < prevLength; index++) {\n      var taskID = updateRecord.ganttProperties.taskId;\n      var resourceID = prevResource[index][this.parent.resourceFields.id];\n      var record = flatRecords[this.parent.getTaskIds().indexOf('R' + resourceID)];\n\n      for (var j = 0; j < record.childRecords.length; j++) {\n        if (record.childRecords[j].ganttProperties.taskId === taskID) {\n          this.removeChildRecord(record.childRecords[j]);\n        }\n      }\n    }\n\n    if (currentLength > 0) {\n      var parentTask = this.parent.getParentTask(updateRecord.parentItem);\n\n      if (parentTask) {\n        if (parentTask.ganttProperties.taskName === this.parent.localeObj.getConstant('unassignedTask')) {\n          this.removeChildRecord(updateRecord);\n        }\n      }\n    } //Assign resource to unassigned task\n\n\n    if (currentLength === 0) {\n      this.checkWithUnassignedTask(updateRecord);\n    }\n  };\n  /**\n   * @param {IGanttData} updateRecord .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.checkWithUnassignedTask = function (updateRecord) {\n    var unassignedTasks = null; // Block for check the unassigned task.\n\n    for (var i = 0; i < this.parent.flatData.length; i++) {\n      if (this.parent.flatData[i].ganttProperties.taskName === this.parent.localeObj.getConstant('unassignedTask')) {\n        unassignedTasks = this.parent.flatData[i];\n      }\n    }\n\n    if (!isNullOrUndefined(unassignedTasks)) {\n      this.addNewRecord(updateRecord, unassignedTasks);\n    } else {\n      // Block for create the unassigned task.\n      var unassignTaskObj = {};\n      unassignTaskObj[this.parent.taskFields.id] = 0;\n      unassignTaskObj[this.parent.taskFields.name] = this.parent.localeObj.getConstant('unassignedTask');\n      var beforeEditStatus = this.parent.isOnEdit;\n      this.parent.isOnEdit = false;\n      var cAddedRecord = this.parent.dataOperation.createRecord(unassignTaskObj, 0);\n      this.parent.isOnEdit = beforeEditStatus;\n      this.addRecordAsBottom(cAddedRecord);\n      var parentRecord = this.parent.flatData[this.parent.flatData.length - 1];\n      this.addNewRecord(updateRecord, parentRecord);\n    }\n  };\n\n  Edit.prototype.addRecordAsBottom = function (cAddedRecord) {\n    var recordIndex1 = this.parent.flatData.length;\n    this.parent.currentViewData.splice(recordIndex1 + 1, 0, cAddedRecord);\n    this.parent.flatData.splice(recordIndex1 + 1, 0, cAddedRecord);\n    this.parent.ids.splice(recordIndex1 + 1, 0, cAddedRecord.ganttProperties.rowUniqueID.toString());\n    var taskId = cAddedRecord.level === 0 ? 'R' + cAddedRecord.ganttProperties.taskId : 'T' + cAddedRecord.ganttProperties.taskId;\n    this.parent.getTaskIds().splice(recordIndex1 + 1, 0, taskId);\n    this.updateTreeGridUniqueID(cAddedRecord, 'add');\n  };\n\n  Edit.prototype.addNewRecord = function (updateRecord, parentRecord) {\n    var cAddedRecord = null;\n    cAddedRecord = extend({}, {}, updateRecord, true);\n    this.parent.setRecordValue('uniqueID', getUid(this.parent.element.id + '_data_'), cAddedRecord);\n    this.parent.setRecordValue('uniqueID', cAddedRecord.uniqueID, cAddedRecord.ganttProperties, true);\n    var uniqueId = cAddedRecord.uniqueID.replace(this.parent.element.id + '_data_', '');\n    this.parent.setRecordValue('rowUniqueID', uniqueId, cAddedRecord);\n    this.parent.setRecordValue('rowUniqueID', uniqueId, cAddedRecord.ganttProperties, true);\n    this.parent.setRecordValue('level', 1, cAddedRecord);\n\n    if (this.parent.taskFields.parentID) {\n      this.parent.setRecordValue('parentId', parentRecord.ganttProperties.taskId, cAddedRecord.ganttProperties, true);\n    }\n\n    this.parent.setRecordValue('parentItem', this.parent.dataOperation.getCloneParent(parentRecord), cAddedRecord);\n    var parentUniqId = cAddedRecord.parentItem ? cAddedRecord.parentItem.uniqueID : null;\n    this.parent.setRecordValue('parentUniqueID', parentUniqId, cAddedRecord);\n    updateRecord.ganttProperties.sharedTaskUniqueIds.push(uniqueId);\n    cAddedRecord.ganttProperties.sharedTaskUniqueIds = updateRecord.ganttProperties.sharedTaskUniqueIds;\n    this.addRecordAsChild(parentRecord, cAddedRecord);\n  };\n\n  Edit.prototype.removeChildRecord = function (record) {\n    var gObj = this.parent;\n    var data = [];\n\n    if (this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.json.length > 0) {\n      data = this.parent.dataSource.dataSource.json;\n    } else {\n      data = this.parent.currentViewData;\n    }\n\n    var dataSource = this.parent.dataSource;\n    var deletedRow = record;\n    var flatParentData = this.parent.getParentTask(deletedRow.parentItem);\n\n    if (deletedRow) {\n      if (deletedRow.parentItem) {\n        var deleteChildRecords = flatParentData ? flatParentData.childRecords : [];\n        var childIndex = 0;\n\n        if (deleteChildRecords && deleteChildRecords.length > 0) {\n          if (deleteChildRecords.length === 1) {\n            //For updating the parent record which has no child reords.\n            this.parent.isOnDelete = true;\n            deleteChildRecords[0].isDelete = true;\n            this.parent.dataOperation.updateParentItems(flatParentData);\n            this.parent.isOnDelete = false;\n            deleteChildRecords[0].isDelete = false;\n          }\n\n          childIndex = deleteChildRecords.indexOf(deletedRow);\n          flatParentData.childRecords.splice(childIndex, 1); // collection for updating parent record\n\n          this.updateParentRecords.push(flatParentData);\n        }\n      }\n\n      if (deletedRow.ganttProperties.sharedTaskUniqueIds.length) {\n        var uniqueIDIndex = deletedRow.ganttProperties.sharedTaskUniqueIds.indexOf(deletedRow.ganttProperties.rowUniqueID);\n        deletedRow.ganttProperties.sharedTaskUniqueIds.splice(uniqueIDIndex, 1);\n      }\n\n      this.updateTreeGridUniqueID(deletedRow, 'delete'); //method to delete the record from datasource collection\n\n      if (!this.parent.taskFields.parentID) {\n        var deleteRecordIDs = [];\n        deleteRecordIDs.push(deletedRow.ganttProperties.rowUniqueID.toString());\n        this.parent.editModule.removeFromDataSource(deleteRecordIDs);\n      }\n\n      var flatRecordIndex = this.parent.flatData.indexOf(deletedRow);\n\n      if (gObj.taskFields.parentID) {\n        var idx = void 0;\n        var ganttData = this.parent.currentViewData;\n\n        for (var i = 0; i < ganttData.length; i++) {\n          if (ganttData[i].ganttProperties.rowUniqueID === deletedRow.ganttProperties.rowUniqueID) {\n            idx = i;\n          }\n        }\n\n        if (idx !== -1) {\n          if (dataSource.length > 0) {\n            dataSource.splice(idx, 1);\n          }\n\n          data.splice(idx, 1);\n          this.parent.flatData.splice(flatRecordIndex, 1);\n          this.parent.ids.splice(flatRecordIndex, 1);\n          this.parent.getTaskIds().splice(flatRecordIndex, 1);\n        }\n      }\n\n      var recordIndex = data.indexOf(deletedRow);\n\n      if (!gObj.taskFields.parentID) {\n        var deletedRecordCount = this.parent.editModule.getChildCount(deletedRow, 0);\n        data.splice(recordIndex, deletedRecordCount + 1);\n        this.parent.flatData.splice(flatRecordIndex, deletedRecordCount + 1);\n        this.parent.ids.splice(flatRecordIndex, deletedRecordCount + 1);\n        this.parent.getTaskIds().splice(flatRecordIndex, deletedRecordCount + 1);\n      }\n\n      if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n        this.parent.setRecordValue('expanded', false, flatParentData);\n        this.parent.setRecordValue('hasChildRecords', false, flatParentData);\n      }\n    }\n  }; // Method to add new record after resource edit\n\n\n  Edit.prototype.addRecordAsChild = function (droppedRecord, draggedRecord) {\n    var gObj = this.parent;\n    var recordIndex1 = this.parent.flatData.indexOf(droppedRecord);\n    var childRecords = this.parent.editModule.getChildCount(droppedRecord, 0);\n    var childRecordsLength;\n\n    if (!isNullOrUndefined(this.addRowIndex) && this.addRowPosition && droppedRecord.childRecords && this.addRowPosition !== 'Child') {\n      var dropChildRecord = droppedRecord.childRecords[this.addRowIndex];\n      var position = this.addRowPosition === 'Above' || this.addRowPosition === 'Below' ? this.addRowPosition : 'Child';\n      childRecordsLength = dropChildRecord ? this.addRowIndex + recordIndex1 + 1 : childRecords + recordIndex1 + 1;\n      childRecordsLength = position === 'Above' ? childRecordsLength : childRecordsLength + 1;\n    } else {\n      childRecordsLength = isNullOrUndefined(childRecords) || childRecords === 0 ? recordIndex1 + 1 : childRecords + recordIndex1 + 1;\n    } //this.ganttData.splice(childRecordsLength, 0, this.draggedRecord);\n\n\n    this.parent.currentViewData.splice(childRecordsLength, 0, draggedRecord);\n    this.parent.flatData.splice(childRecordsLength, 0, draggedRecord);\n    this.parent.ids.splice(childRecordsLength, 0, draggedRecord.ganttProperties.rowUniqueID.toString());\n    this.updateTreeGridUniqueID(draggedRecord, 'add');\n    var recordId = draggedRecord.level === 0 ? 'R' + draggedRecord.ganttProperties.taskId : 'T' + draggedRecord.ganttProperties.taskId;\n    this.parent.getTaskIds().splice(childRecordsLength, 0, recordId);\n\n    if (!droppedRecord.hasChildRecords) {\n      this.parent.setRecordValue('hasChildRecords', true, droppedRecord);\n      this.parent.setRecordValue('expanded', true, droppedRecord);\n\n      if (!droppedRecord.childRecords.length) {\n        droppedRecord.childRecords = [];\n\n        if (!gObj.taskFields.parentID && isNullOrUndefined(droppedRecord.taskData[this.parent.taskFields.child])) {\n          droppedRecord.taskData[this.parent.taskFields.child] = [];\n        }\n      }\n    }\n\n    droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n\n    if (!isNullOrUndefined(draggedRecord) && !this.parent.taskFields.parentID && !isNullOrUndefined(droppedRecord.taskData[this.parent.taskFields.child])) {\n      droppedRecord.taskData[this.parent.taskFields.child].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n    }\n\n    if (!isNullOrUndefined(draggedRecord.parentItem)) {\n      //collection to update the parent records\n      this.updateParentRecords.push(droppedRecord);\n    }\n  };\n\n  Edit.prototype.resetEditProperties = function (args) {\n    this.parent.currentEditedArgs = {};\n    this.resetValidateArgs();\n    this.parent.editedTaskBarItem = null;\n    this.parent.isOnEdit = false;\n    this.validatedChildItems = [];\n    this.parent.isConnectorLineUpdate = false;\n    this.parent.editedTaskBarItem = null;\n    this.taskbarMoved = false;\n    this.predecessorUpdated = false;\n\n    if (!isNullOrUndefined(this.dialogModule) && (isNullOrUndefined(args) || !isNullOrUndefined(args) && args['requestType'] === 'beforeSave' && !args['cancel'])) {\n      if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n        this.dialogModule.dialogObj.hide();\n      }\n\n      this.dialogModule.dialogClose();\n    }\n\n    this.parent.hideSpinner();\n    this.parent.initiateEditAction(false);\n  };\n  /**\n   * @param {ITaskAddedEventArgs} args .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.endEditAction = function (args) {\n    this.resetEditProperties();\n\n    if (args.action === 'TaskbarEditing') {\n      this.parent.trigger('taskbarEdited', args);\n    } else if (args.action === 'CellEditing') {\n      this.parent.trigger('endEdit', args);\n    } else if (args.action === 'DialogEditing') {\n      if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n        this.dialogModule.dialogObj.hide();\n      }\n\n      this.dialogModule.dialogClose();\n    }\n  }; // eslint-disable-next-line\n\n\n  Edit.prototype.saveFailed = function (args) {\n    this.reUpdatePreviousRecords();\n    this.parent.hideSpinner(); //action failure event trigger\n  };\n  /**\n   * To render delete confirmation dialog\n   *\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.renderDeleteConfirmDialog = function () {\n    var dialogObj = new Dialog({\n      width: '320px',\n      isModal: true,\n      visible: false,\n      content: this.parent.localeObj.getConstant('confirmDelete'),\n      buttons: [{\n        click: this.confirmDeleteOkButton.bind(this),\n        buttonModel: {\n          content: this.parent.localeObj.getConstant('okText'),\n          isPrimary: true\n        }\n      }, {\n        click: this.closeConfirmDialog.bind(this),\n        buttonModel: {\n          content: this.parent.localeObj.getConstant('cancel')\n        }\n      }],\n      target: this.parent.element,\n      animationSettings: {\n        effect: 'None'\n      }\n    });\n    dialogObj.appendTo('#' + this.parent.element.id + '_deleteConfirmDialog');\n    this.confirmDialog = dialogObj;\n  };\n\n  Edit.prototype.closeConfirmDialog = function () {\n    this.confirmDialog.hide();\n  };\n\n  Edit.prototype.confirmDeleteOkButton = function () {\n    this.deleteSelectedItems();\n    this.confirmDialog.hide();\n    var focussedElement = this.parent.element.querySelector('.e-treegrid');\n    focussedElement.focus();\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.startDeleteAction = function () {\n    if (this.parent.editSettings.allowDeleting && !this.parent.readOnly) {\n      if (this.parent.editSettings.showDeleteConfirmDialog) {\n        this.confirmDialog.show();\n      } else {\n        this.deleteSelectedItems();\n      }\n    }\n  };\n  /**\n   *\n   * @param {IGanttData[]} selectedRecords - Defines the deleted records\n   * @returns {void} .\n   * Method to delete the records from resource view Gantt.\n   */\n\n\n  Edit.prototype.deleteResourceRecords = function (selectedRecords) {\n    var deleteRecords = [];\n\n    for (var i = 0; i < selectedRecords.length; i++) {\n      if (selectedRecords[i].parentItem) {\n        var data = selectedRecords[i];\n        var ids = data.ganttProperties.sharedTaskUniqueIds;\n\n        for (var j = 0; j < ids.length; j++) {\n          deleteRecords.push(this.parent.flatData[this.parent.ids.indexOf(ids[j].toString())]);\n        }\n      }\n    }\n\n    this.deleteRow(deleteRecords);\n  };\n\n  Edit.prototype.deleteSelectedItems = function () {\n    if (!this.isFromDeleteMethod) {\n      var selectedRecords = [];\n\n      if (this.parent.selectionSettings.mode !== 'Cell') {\n        selectedRecords = this.parent.selectionModule.getSelectedRecords();\n      } else if (this.parent.selectionSettings.mode === 'Cell') {\n        selectedRecords = this.parent.selectionModule.getCellSelectedRecords();\n      }\n\n      if (this.parent.viewType === 'ResourceView') {\n        this.deleteResourceRecords(selectedRecords);\n      } else {\n        this.deleteRow(selectedRecords);\n      }\n    } else {\n      if (this.targetedRecords.length) {\n        if (this.parent.viewType === 'ResourceView') {\n          this.deleteResourceRecords(this.targetedRecords);\n        } else {\n          this.deleteRow(this.targetedRecords);\n        }\n      }\n\n      this.isFromDeleteMethod = false;\n    }\n  };\n  /**\n   * Method to delete record.\n   *\n   * @param {number | string | number[] | string[] | IGanttData | IGanttData[]} taskDetail - Defines the details of data to delete.\n   * @returns {void} .\n   * @public\n   */\n\n\n  Edit.prototype.deleteRecord = function (taskDetail) {\n    this.isFromDeleteMethod = true;\n    var variableType = typeof taskDetail;\n    this.targetedRecords = [];\n\n    switch (variableType) {\n      case 'number':\n      case 'string':\n        {\n          var taskId = taskDetail.toString();\n\n          if (this.parent.viewType === 'ResourceView') {\n            if (!isNullOrUndefined(taskId) && this.parent.getTaskIds().indexOf('T' + taskId) !== -1) {\n              this.targetedRecords.push(this.parent.flatData[this.parent.getTaskIds().indexOf('T' + taskId)]);\n            }\n          } else {\n            if (!isNullOrUndefined(taskId) && this.parent.ids.indexOf(taskId) !== -1) {\n              this.targetedRecords.push(this.parent.getRecordByID(taskId));\n            }\n          }\n\n          break;\n        }\n\n      case 'object':\n        if (!Array.isArray(taskDetail)) {\n          this.targetedRecords.push(taskDetail.valueOf());\n        } else {\n          this.updateTargetedRecords(taskDetail);\n        }\n\n        break;\n\n      default:\n    }\n\n    this.startDeleteAction();\n  };\n  /**\n   * To update 'targetedRecords collection' from given array collection\n   *\n   * @param {object[]} taskDetailArray .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateTargetedRecords = function (taskDetailArray) {\n    if (taskDetailArray.length) {\n      var variableType = typeof taskDetailArray[0];\n\n      if (variableType === 'object') {\n        this.targetedRecords = taskDetailArray;\n      } else {\n        // Get record from array of task ids\n        for (var i = 0; i < taskDetailArray.length; i++) {\n          var id = taskDetailArray[i].toString();\n\n          if (this.parent.viewType === 'ResourceView') {\n            if (!isNullOrUndefined(id) && this.parent.getTaskIds().indexOf('T' + id) !== -1) {\n              this.targetedRecords.push(this.parent.flatData[this.parent.getTaskIds().indexOf('T' + id)]);\n            }\n          } else if (!isNullOrUndefined(id) && this.parent.ids.indexOf(id) !== -1) {\n            this.targetedRecords.push(this.parent.getRecordByID(id));\n          }\n        }\n      }\n    }\n  };\n\n  Edit.prototype.deleteRow = function (tasks) {\n    var rowItems = tasks && tasks.length ? tasks : this.parent.selectionModule.getSelectedRecords();\n    this.parent.addDeleteRecord = true;\n\n    if (rowItems.length) {\n      this.parent.isOnDelete = true;\n      rowItems.forEach(function (item) {\n        item.isDelete = true;\n      });\n\n      if (this.parent.viewType === 'ResourceView' && !tasks.length) {\n        rowItems = [];\n      }\n\n      for (var i = 0; i < rowItems.length; i++) {\n        var deleteRecord = rowItems[i];\n\n        if (this.deletedTaskDetails.indexOf(deleteRecord) !== -1) {\n          continue;\n        }\n\n        if (deleteRecord.parentItem) {\n          var childRecord = this.parent.getParentTask(deleteRecord.parentItem).childRecords;\n          var filteredRecord = childRecord.length === 1 ? childRecord : childRecord.filter(function (data) {\n            return !data.isDelete;\n          });\n\n          if (filteredRecord.length > 0) {\n            this.parent.dataOperation.updateParentItems(deleteRecord.parentItem);\n          }\n        }\n\n        var predecessor = deleteRecord.ganttProperties.predecessor;\n\n        if (predecessor && predecessor.length) {\n          this.removePredecessorOnDelete(deleteRecord);\n        }\n\n        this.deletedTaskDetails.push(deleteRecord);\n\n        if (deleteRecord.hasChildRecords) {\n          this.deleteChildRecords(deleteRecord);\n        }\n      }\n\n      if (this.parent.selectionModule && this.parent.allowSelection) {\n        // clear selection\n        this.parent.selectionModule.clearSelection();\n      }\n\n      var delereArgs = {};\n      delereArgs.deletedRecordCollection = this.deletedTaskDetails;\n      delereArgs.updatedRecordCollection = this.parent.editedRecords;\n      delereArgs.cancel = false;\n      delereArgs.action = 'delete';\n      this.initiateDeleteAction(delereArgs);\n      this.parent.isOnDelete = false;\n    }\n\n    if (!isNullOrUndefined(this.parent.toolbarModule)) {\n      this.parent.toolbarModule.refreshToolbarItems();\n    }\n  };\n\n  Edit.prototype.removePredecessorOnDelete = function (record) {\n    var predecessors = record.ganttProperties.predecessor;\n\n    for (var i = 0; i < predecessors.length; i++) {\n      var predecessor = predecessors[i];\n      var recordId = this.parent.viewType === 'ResourceView' ? record.ganttProperties.taskId : record.ganttProperties.rowUniqueID;\n\n      if (predecessor.from.toString() === recordId.toString()) {\n        var toRecord = this.parent.connectorLineModule.getRecordByID(predecessor.to.toString());\n\n        if (!isNullOrUndefined(toRecord)) {\n          var toRecordPredcessor = extend([], [], toRecord.ganttProperties.predecessor, true);\n          var index = void 0;\n\n          for (var t = 0; t < toRecordPredcessor.length; t++) {\n            var toId = this.parent.viewType === 'ResourceView' ? toRecord.ganttProperties.taskId : toRecord.ganttProperties.rowUniqueID;\n\n            if (toRecordPredcessor[t].to.toString() === toId.toString() && toRecordPredcessor[t].from.toString() === recordId.toString()) {\n              index = t;\n              break;\n            }\n          }\n\n          toRecordPredcessor.splice(index, 1);\n          this.updatePredecessorValues(toRecord, toRecordPredcessor);\n        }\n      } else if (predecessor.to.toString() === recordId.toString()) {\n        var fromRecord = this.parent.connectorLineModule.getRecordByID(predecessor.from.toString());\n\n        if (!isNullOrUndefined(fromRecord)) {\n          var fromRecordPredcessor = extend([], [], fromRecord.ganttProperties.predecessor, true);\n          var index = void 0;\n\n          for (var t = 0; t < fromRecordPredcessor.length; t++) {\n            var fromId = this.parent.viewType === 'ResourceView' ? fromRecord.ganttProperties.taskId : fromRecord.ganttProperties.rowUniqueID;\n\n            if (fromRecordPredcessor[t].from.toString() === fromId.toString() && fromRecordPredcessor[t].to.toString() === recordId.toString()) {\n              index = t;\n              break;\n            }\n          }\n\n          fromRecordPredcessor.splice(index, 1);\n          this.updatePredecessorValues(fromRecord, fromRecordPredcessor);\n        }\n      }\n    }\n  };\n\n  Edit.prototype.updatePredecessorValues = function (record, predcessorArray) {\n    this.parent.setRecordValue('predecessor', predcessorArray, record.ganttProperties, true);\n    var predecessorString = this.parent.predecessorModule.getPredecessorStringValue(record);\n    this.parent.setRecordValue('predecessorsName', predecessorString, record.ganttProperties, true);\n    this.parent.setRecordValue('taskData.' + this.parent.taskFields.dependency, predecessorString, record);\n    this.parent.setRecordValue(this.parent.taskFields.dependency, predecessorString, record);\n  };\n  /**\n   * Method to update TaskID of a gantt record\n   *\n   * @param {string | number} currentId .\n   * @param {number | string} newId .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateTaskId = function (currentId, newId) {\n    if (!this.parent.readOnly) {\n      var cId = typeof currentId === 'number' ? currentId.toString() : currentId;\n      var nId = typeof newId === 'number' ? newId.toString() : newId;\n      var ids = this.parent.ids;\n\n      if (!isNullOrUndefined(cId) && !isNullOrUndefined(nId)) {\n        var cIndex = ids.indexOf(cId);\n        var nIndex = ids.indexOf(nId); // return false for invalid taskID\n\n        if (cIndex === -1 || nIndex > -1) {\n          return;\n        }\n\n        var thisRecord = this.parent.flatData[cIndex];\n        thisRecord.ganttProperties.taskId = thisRecord.ganttProperties.rowUniqueID = nId;\n        thisRecord.taskData[this.parent.taskFields.id] = nId;\n        thisRecord[this.parent.taskFields.id] = nId;\n        ids[cIndex] = nId;\n\n        if (thisRecord.hasChildRecords && this.parent.taskFields.parentID) {\n          var childRecords = thisRecord.childRecords;\n\n          for (var count = 0; count < childRecords.length; count++) {\n            var childRecord = childRecords[count];\n            childRecord[this.parent.taskFields.parentID] = newId;\n            this.parent.chartRowsModule.refreshRecords([childRecord]);\n          }\n        }\n\n        if (this.parent.taskFields.dependency && !isNullOrUndefined(thisRecord.ganttProperties.predecessor)) {\n          var predecessors = thisRecord.ganttProperties.predecessor;\n          var currentGanttRecord = void 0;\n\n          for (var i = 0; i < predecessors.length; i++) {\n            var predecessor = predecessors[i];\n\n            if (predecessor.to === cId) {\n              currentGanttRecord = this.parent.flatData[ids.indexOf(predecessor.from)];\n            } else if (predecessor.from === cId) {\n              currentGanttRecord = this.parent.flatData[ids.indexOf(predecessor.to)];\n            }\n\n            this.updatePredecessorOnUpdateId(currentGanttRecord, cId, nId);\n          }\n        }\n\n        this.parent.treeGrid.parentData = [];\n        this.parent.treeGrid.refresh();\n      }\n    }\n  };\n\n  Edit.prototype.updatePredecessorOnUpdateId = function (currentGanttRecord, cId, nId) {\n    if (this.parent.flatData.indexOf(currentGanttRecord) > -1) {\n      var pred = currentGanttRecord.ganttProperties.predecessor;\n\n      for (var j = 0; j < pred.length; j++) {\n        var pre = pred[j];\n\n        if (pre.to === cId) {\n          pre.to = nId;\n        } else if (pre.from === cId) {\n          pre.from = nId;\n        }\n      }\n    }\n\n    this.updatePredecessorValues(currentGanttRecord, currentGanttRecord.ganttProperties.predecessor);\n  };\n\n  Edit.prototype.deleteChildRecords = function (record) {\n    var childRecords = record.childRecords;\n\n    for (var c = 0; c < childRecords.length; c++) {\n      var childRecord = childRecords[c];\n\n      if (this.deletedTaskDetails.indexOf(childRecord) !== -1) {\n        continue;\n      }\n\n      var predecessor = childRecord.ganttProperties.predecessor;\n\n      if (predecessor && predecessor.length) {\n        this.removePredecessorOnDelete(childRecord);\n      }\n\n      this.deletedTaskDetails.push(childRecord);\n\n      if (childRecord.hasChildRecords) {\n        this.deleteChildRecords(childRecord);\n      }\n    }\n  };\n\n  Edit.prototype.removeFromDataSource = function (deleteRecordIDs) {\n    var dataSource;\n\n    if (this.parent.dataSource instanceof DataManager) {\n      dataSource = this.parent.dataSource.dataSource.json;\n    } else {\n      dataSource = this.parent.dataSource;\n    }\n\n    this.removeData(dataSource, deleteRecordIDs);\n    this.isBreakLoop = false;\n  };\n\n  Edit.prototype.removeData = function (dataCollection, record) {\n    for (var i = 0; i < dataCollection.length; i++) {\n      if (this.isBreakLoop) {\n        break;\n      }\n\n      if (record.indexOf(getValue(this.parent.taskFields.id, dataCollection[i]).toString()) !== -1) {\n        if (dataCollection[i][this.parent.taskFields.child]) {\n          var childRecords = dataCollection[i][this.parent.taskFields.child];\n          this.removeData(childRecords, record);\n        }\n\n        record.splice(record.indexOf(getValue(this.parent.taskFields.id, dataCollection[i]).toString()), 1);\n        dataCollection.splice(i, 1);\n\n        if (record.length === 0) {\n          this.isBreakLoop = true;\n          break;\n        }\n      } else if (dataCollection[i][this.parent.taskFields.child]) {\n        var childRecords = dataCollection[i][this.parent.taskFields.child];\n        this.removeData(childRecords, record);\n      }\n    }\n  };\n\n  Edit.prototype.initiateDeleteAction = function (args) {\n    var _this = this;\n\n    this.parent.showSpinner();\n    var eventArgs = {};\n    eventArgs.requestType = 'beforeDelete';\n    eventArgs.data = args.deletedRecordCollection;\n    eventArgs.modifiedRecords = args.updatedRecordCollection;\n    eventArgs.modifiedTaskData = getTaskData(args.updatedRecordCollection, null, null, this.parent);\n    this.parent.trigger('actionBegin', eventArgs, function (eventArg) {\n      if (eventArg.cancel) {\n        var deleteRecords = _this.deletedTaskDetails;\n\n        for (var d = 0; d < deleteRecords.length; d++) {\n          deleteRecords[d].isDelete = false;\n        }\n\n        _this.deletedTaskDetails = [];\n\n        _this.reUpdatePreviousRecords();\n\n        _this.parent.initiateEditAction(false);\n\n        _this.parent.hideSpinner();\n      } else {\n        if (isRemoteData(_this.parent.dataSource)) {\n          var data_1 = _this.parent.dataSource;\n\n          if (_this.parent.timezone) {\n            updateDates(eventArg.modifiedTaskData, _this.parent);\n          }\n\n          var updatedData_1 = {\n            deletedRecords: getTaskData(eventArg.data, null, null, _this.parent),\n            changedRecords: eventArg.modifiedTaskData\n          };\n          var adaptor = data_1.adaptor;\n          var query_1 = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n\n          if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data_1.dataSource.batchUrl) {\n            var crud = data_1.saveChanges(updatedData_1, _this.parent.taskFields.id, null, query_1);\n            crud.then(function () {\n              return _this.deleteSuccess(args);\n            }).catch(function (e) {\n              return _this.dmFailure(e, args);\n            });\n          } else {\n            var deletedRecords = 'deletedRecords';\n            var deleteCrud = null;\n\n            for (var i = 0; i < updatedData_1[deletedRecords].length; i++) {\n              deleteCrud = data_1.remove(_this.parent.taskFields.id, updatedData_1[deletedRecords][i], null, query_1);\n            }\n\n            deleteCrud.then(function () {\n              var changedRecords = 'changedRecords';\n              var updateCrud = data_1.update(_this.parent.taskFields.id, updatedData_1[changedRecords], null, query_1);\n              updateCrud.then(function () {\n                return _this.deleteSuccess(args);\n              }).catch(function (e) {\n                return _this.dmFailure(e, args);\n              });\n            }).catch(function (e) {\n              return _this.dmFailure(e, args);\n            });\n          }\n        } else {\n          _this.deleteSuccess(args);\n        }\n      }\n    });\n  };\n\n  Edit.prototype.deleteSuccess = function (args) {\n    var flatData = this.parent.flatData;\n    var currentData = this.parent.currentViewData;\n    var deletedRecords = this.parent.getRecordFromFlatdata(args.deletedRecordCollection);\n    var deleteRecordIDs = [];\n\n    if (deletedRecords.length > 0) {\n      this.parent.selectedRowIndex = deletedRecords[deletedRecords.length - 1].index;\n    }\n\n    for (var i = 0; i < deletedRecords.length; i++) {\n      var deleteRecord = deletedRecords[i];\n      var currentIndex = currentData.indexOf(deleteRecord);\n      var flatIndex = flatData.indexOf(deleteRecord);\n      var treeGridParentIndex = this.parent.treeGrid.parentData.indexOf(deleteRecord);\n      var tempData = getValue('dataOperation.dataArray', this.parent);\n      var dataIndex = tempData.indexOf(deleteRecord.taskData);\n      var childIndex = void 0;\n\n      if (currentIndex !== -1) {\n        currentData.splice(currentIndex, 1);\n      }\n\n      if (flatIndex !== -1) {\n        flatData.splice(flatIndex, 1);\n      }\n\n      if (dataIndex !== -1) {\n        tempData.splice(dataIndex, 1);\n      }\n\n      if (!isNullOrUndefined(deleteRecord)) {\n        deleteRecordIDs.push(deleteRecord.ganttProperties.taskId.toString());\n\n        if (flatIndex !== -1) {\n          this.parent.ids.splice(flatIndex, 1);\n\n          if (this.parent.viewType === 'ResourceView') {\n            this.parent.getTaskIds().splice(flatIndex, 1);\n          }\n        }\n\n        if (deleteRecord.level === 0 && treeGridParentIndex !== -1) {\n          this.parent.treeGrid.parentData.splice(treeGridParentIndex, 1);\n        }\n\n        if (deleteRecord.parentItem) {\n          var parentItem = this.parent.getParentTask(deleteRecord.parentItem);\n\n          if (parentItem) {\n            var childRecords = parentItem.childRecords;\n            childIndex = childRecords.indexOf(deleteRecord);\n\n            if (childIndex !== -1) {\n              childRecords.splice(childIndex, 1);\n            }\n\n            if (!childRecords.length) {\n              this.parent.setRecordValue('hasChildRecords', false, parentItem);\n            }\n          }\n        }\n\n        this.updateTreeGridUniqueID(deleteRecord, 'delete');\n      }\n    }\n\n    if (deleteRecordIDs.length > 0) {\n      this.removeFromDataSource(deleteRecordIDs);\n    }\n\n    var eventArgs = {};\n    this.parent.updatedConnectorLineCollection = [];\n    this.parent.connectorLineIds = [];\n    this.parent.predecessorModule.createConnectorLinesCollection(this.parent.flatData);\n    this.parent.treeGrid.parentData = [];\n    this.parent.treeGrid.refresh();\n\n    if (this.parent.enableImmutableMode) {\n      this.refreshRecordInImmutableMode();\n    } // Trigger actioncomplete event for delete action\n\n\n    eventArgs.requestType = 'delete';\n    eventArgs.data = args.deletedRecordCollection;\n    eventArgs.modifiedRecords = args.updatedRecordCollection;\n    eventArgs.modifiedTaskData = getTaskData(args.updatedRecordCollection, null, null, this.parent);\n    setValue('action', args.action, eventArgs);\n    this.parent.trigger('actionComplete', eventArgs);\n    this.deletedTaskDetails = [];\n    this.parent.initiateEditAction(false);\n    this.parent.hideSpinner();\n  };\n  /**\n   *\n   * @returns {number | string} .\n   * @private\n   */\n\n\n  Edit.prototype.getNewTaskId = function () {\n    var maxId = DataUtil.aggregates.max(this.parent.flatData, this.parent.taskFields.id);\n\n    if (!isNullOrUndefined(maxId)) {\n      return parseInt(maxId.toString(), 10) + 1;\n    } else {\n      return 1;\n    }\n  };\n  /**\n   * @param {object} obj .\n   * @param {RowPosition} rowPosition .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Edit.prototype.prepareNewlyAddedData = function (obj, rowPosition) {\n    var taskModel = this.parent.taskFields;\n    var id;\n    var ids = this.parent.ids;\n    /*Validate Task Id of data*/\n\n    if (obj[taskModel.id]) {\n      if (ids.indexOf(obj[taskModel.id].toString()) !== -1) {\n        obj[taskModel.id] = null;\n      } else {\n        obj[taskModel.id] = isNullOrUndefined(obj[taskModel.id]) ? null : parseInt(obj[taskModel.id], 10);\n      }\n    }\n\n    if (!obj[taskModel.id]) {\n      id = this.getNewTaskId();\n      obj[taskModel.id] = id;\n    }\n\n    if (!this.parent.allowUnscheduledTasks && !obj[taskModel.startDate]) {\n      obj[taskModel.startDate] = this.parent.projectStartDate;\n    }\n\n    if (!this.parent.allowUnscheduledTasks && taskModel.duration && isNullOrUndefined(obj[taskModel.duration])) {\n      if (!obj[taskModel.endDate]) {\n        obj[taskModel.duration] = '5';\n      }\n    }\n\n    if (taskModel.progress) {\n      obj[taskModel.progress] = obj[taskModel.progress] ? obj[taskModel.progress] > 100 ? 100 : obj[taskModel.progress] : 0;\n    }\n\n    if (!this.parent.allowUnscheduledTasks && !obj[taskModel.endDate] && taskModel.endDate) {\n      if (!obj[taskModel.duration]) {\n        var startDate = this.parent.dataOperation.getDateFromFormat(this.parent.projectStartDate);\n        startDate.setDate(startDate.getDate() + 4);\n        obj[taskModel.endDate] = this.parent.getFormatedDate(startDate, this.parent.getDateFormat());\n      }\n    }\n  };\n  /**\n   * @param {object} obj .\n   * @param {number} level .\n   * @param {RowPosition} rowPosition .\n   * @param {IGanttData} parentItem .\n   * @returns {IGanttData} .\n   * @private\n   */\n\n\n  Edit.prototype.updateNewlyAddedDataBeforeAjax = function (obj, level, rowPosition, parentItem) {\n    var cAddedRecord = this.parent.dataOperation.createRecord(obj, level);\n    cAddedRecord.index = parseInt(cAddedRecord.ganttProperties.rowUniqueID.toString(), 10) - 1;\n\n    if (!isNullOrUndefined(parentItem)) {\n      this.parent.setRecordValue('parentItem', this.parent.dataOperation.getCloneParent(parentItem), cAddedRecord);\n      var pIndex = cAddedRecord.parentItem ? cAddedRecord.parentItem.index : null;\n      this.parent.setRecordValue('parentIndex', pIndex, cAddedRecord);\n      var parentUniqId = cAddedRecord.parentItem ? cAddedRecord.parentItem.uniqueID : null;\n      this.parent.setRecordValue('parentUniqueID', parentUniqId, cAddedRecord);\n\n      if (!isNullOrUndefined(this.parent.taskFields.id) && !isNullOrUndefined(this.parent.taskFields.parentID) && cAddedRecord.parentItem) {\n        if (this.parent.viewType === 'ProjectView') {\n          this.parent.setRecordValue(this.parent.taskFields.parentID, cAddedRecord.parentItem.taskId, cAddedRecord.taskData, true);\n        }\n\n        this.parent.setRecordValue('parentId', cAddedRecord.parentItem.taskId, cAddedRecord.ganttProperties, true);\n        this.parent.setRecordValue(this.parent.taskFields.parentID, cAddedRecord.parentItem.taskId, cAddedRecord, true);\n      }\n    }\n\n    this.parent.isOnEdit = true;\n    this.backUpAndPushNewlyAddedRecord(cAddedRecord, rowPosition, parentItem); // need to push in dataSource also.\n\n    if (this.parent.taskFields.dependency && cAddedRecord.ganttProperties.predecessorsName) {\n      this.parent.predecessorModule.ensurePredecessorCollectionHelper(cAddedRecord, cAddedRecord.ganttProperties);\n      this.parent.predecessorModule.updatePredecessorHelper(cAddedRecord);\n      this.parent.predecessorModule.validatePredecessorDates(cAddedRecord);\n    }\n\n    if (cAddedRecord.parentItem && this.parent.getParentTask(cAddedRecord.parentItem).ganttProperties.isAutoSchedule) {\n      this.parent.dataOperation.updateParentItems(cAddedRecord.parentItem);\n    }\n\n    this.parent.isOnEdit = false;\n    return cAddedRecord;\n  };\n  /**\n   * @param {IGanttData} record .\n   * @param {number} count .\n   * @returns {number} .\n   * @private\n   */\n\n\n  Edit.prototype.getChildCount = function (record, count) {\n    var currentRecord;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    for (var i = 0; i < record.childRecords.length; i++) {\n      currentRecord = record.childRecords[i];\n      count++;\n\n      if (currentRecord.hasChildRecords) {\n        count = this.getChildCount(currentRecord, count);\n      }\n    }\n\n    return count;\n  };\n  /**\n   * @param {IGanttData} data .\n   * @param {number} count .\n   * @param {IGanttData[]} collection .\n   * @returns {number} .\n   * @private\n   */\n\n\n  Edit.prototype.getVisibleChildRecordCount = function (data, count, collection) {\n    var childRecords;\n    var length;\n\n    if (data.hasChildRecords) {\n      childRecords = data.childRecords;\n      length = childRecords.length;\n\n      for (var i = 0; i < length; i++) {\n        if (collection.indexOf(childRecords[i]) !== -1) {\n          count++;\n        }\n\n        if (childRecords[i].hasChildRecords) {\n          count = this.getVisibleChildRecordCount(childRecords[i], count, collection);\n        }\n      }\n    } else {\n      if (collection.indexOf(data) !== -1) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n  /**\n   * @param {IGanttData} parentRecord .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updatePredecessorOnIndentOutdent = function (parentRecord) {\n    var len = parentRecord.ganttProperties.predecessor.length;\n    var parentRecordTaskData = parentRecord.ganttProperties;\n    var predecessorCollection = parentRecordTaskData.predecessor;\n    var childRecord;\n    var predecessorIndex;\n    var updatedPredecessor = [];\n\n    for (var count = 0; count < len; count++) {\n      if (predecessorCollection[count].to === parentRecordTaskData.rowUniqueID.toString()) {\n        childRecord = this.parent.getRecordByID(predecessorCollection[count].from);\n        predecessorIndex = getIndex(predecessorCollection[count], 'from', childRecord.ganttProperties.predecessor, 'to'); // eslint-disable-next-line\n\n        var predecessorCollections = extend([], childRecord.ganttProperties.predecessor, [], true);\n        predecessorCollections.splice(predecessorIndex, 1);\n        this.parent.setRecordValue('predecessor', predecessorCollections, childRecord.ganttProperties, true);\n      } else if (predecessorCollection[count].from === parentRecordTaskData.rowUniqueID.toString()) {\n        childRecord = this.parent.getRecordByID(predecessorCollection[count].to);\n        var prdcList = childRecord.ganttProperties.predecessorsName.toString().split(',');\n        var str = predecessorCollection[count].from + predecessorCollection[count].type;\n        var ind = prdcList.indexOf(str);\n        prdcList.splice(ind, 1);\n        this.parent.setRecordValue('predecessorsName', prdcList.join(','), childRecord.ganttProperties, true);\n        this.parent.setRecordValue(this.parent.taskFields.dependency, prdcList.join(','), childRecord);\n        predecessorIndex = getIndex(predecessorCollection[count], 'from', childRecord.ganttProperties.predecessor, 'to'); // eslint-disable-next-line\n\n        var temppredecessorCollection = extend([], childRecord.ganttProperties.predecessor, [], true);\n        temppredecessorCollection.splice(predecessorIndex, 1);\n        this.parent.setRecordValue('predecessor', temppredecessorCollection, childRecord.ganttProperties, true);\n        this.parent.predecessorModule.validatePredecessorDates(childRecord);\n      }\n    }\n\n    this.parent.setRecordValue('predecessor', updatedPredecessor, parentRecord.ganttProperties, true);\n    this.parent.setRecordValue('predecessorsName', '', parentRecord.ganttProperties, true);\n  };\n  /**\n   * @param {IPredecessor[]} predecessorCollection .\n   * @param {IGanttData} record .\n   * @returns {string} .\n   * @private\n   */\n\n\n  Edit.prototype.predecessorToString = function (predecessorCollection, record) {\n    var predecessorString = [];\n    var count = 0;\n    var length = predecessorCollection.length;\n\n    for (count; count < length; count++) {\n      if (record.ganttProperties.rowUniqueID.toString() !== predecessorCollection[count].from) {\n        var tem = predecessorCollection[count].from + predecessorCollection[count].type;\n        predecessorCollection[count].offset = isNaN(predecessorCollection[count].offset) ? 0 : predecessorCollection[count].offset;\n\n        if (predecessorCollection[count].offset !== 0) {\n          if (predecessorCollection[count].offset < 0) {\n            tem += predecessorCollection[count].offset.toString() + 'd';\n          } else if (predecessorCollection[count].offset > 0) {\n            tem += '+' + predecessorCollection[count].offset.toString() + 'd';\n          }\n        }\n\n        predecessorString.push(tem);\n      }\n    }\n\n    return predecessorString.join(',');\n  };\n  /**\n   * @param {IGanttData} record .\n   * @param {RowPosition} rowPosition .\n   * @param {IGanttData} parentItem .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.backUpAndPushNewlyAddedRecord = function (record, rowPosition, parentItem) {\n    var flatRecords = this.parent.flatData;\n    var currentViewData = this.parent.currentViewData;\n    var ids = this.parent.ids;\n    var currentItemIndex;\n    var recordIndex;\n    var updatedCollectionIndex;\n    var childIndex;\n\n    switch (rowPosition) {\n      case 'Top':\n        flatRecords.splice(0, 0, record);\n        currentViewData.splice(0, 0, record);\n        ids.splice(0, 0, record.ganttProperties.rowUniqueID.toString()); // need to check NAN\n\n        break;\n\n      case 'Bottom':\n        flatRecords.push(record);\n        currentViewData.push(record);\n        ids.push(record.ganttProperties.rowUniqueID.toString()); // need to check NAN\n\n        if (this.parent.viewType === 'ResourceView') {\n          var taskId = record.level === 0 ? 'R' + record.ganttProperties.taskId : 'T' + record.ganttProperties.taskId;\n          this.parent.getTaskIds().push(taskId);\n        }\n\n        break;\n\n      case 'Above':\n        /*Record Updates*/\n        recordIndex = flatRecords.indexOf(this.addRowSelectedItem);\n        updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem);\n        this.recordCollectionUpdate(childIndex, recordIndex, updatedCollectionIndex, record, parentItem);\n        break;\n\n      case 'Below':\n        currentItemIndex = flatRecords.indexOf(this.addRowSelectedItem);\n\n        if (this.addRowSelectedItem.hasChildRecords) {\n          var dataChildCount = this.getChildCount(this.addRowSelectedItem, 0);\n          recordIndex = currentItemIndex + dataChildCount + 1;\n          updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + this.getVisibleChildRecordCount(this.addRowSelectedItem, 0, currentViewData) + 1;\n        } else {\n          recordIndex = currentItemIndex + 1;\n          updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + 1;\n        }\n\n        this.recordCollectionUpdate(childIndex + 1, recordIndex, updatedCollectionIndex, record, parentItem);\n        break;\n\n      case 'Child':\n        currentItemIndex = flatRecords.indexOf(this.addRowSelectedItem);\n\n        if (this.addRowSelectedItem.hasChildRecords) {\n          var dataChildCount = this.getChildCount(this.addRowSelectedItem, 0);\n          recordIndex = currentItemIndex + dataChildCount + 1; //Expand Add record's parent item for project view\n\n          if (!this.addRowSelectedItem.expanded && !this.parent.enableMultiTaskbar) {\n            this.parent.expandByID(Number(this.addRowSelectedItem.ganttProperties.rowUniqueID));\n          }\n\n          updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + this.getVisibleChildRecordCount(this.addRowSelectedItem, 0, currentViewData) + 1;\n        } else {\n          this.parent.setRecordValue('hasChildRecords', true, this.addRowSelectedItem);\n          this.parent.setRecordValue('isMilestone', false, this.addRowSelectedItem.ganttProperties, true);\n          this.parent.setRecordValue('expanded', true, this.addRowSelectedItem);\n          this.parent.setRecordValue('childRecords', [], this.addRowSelectedItem);\n          recordIndex = currentItemIndex + 1;\n          updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + 1;\n\n          if (this.addRowSelectedItem.ganttProperties.predecessor) {\n            this.updatePredecessorOnIndentOutdent(this.addRowSelectedItem);\n          }\n\n          if (!isNullOrUndefined(this.addRowSelectedItem.ganttProperties.segments)) {\n            this.addRowSelectedItem.ganttProperties.segments = null;\n          }\n        }\n\n        this.recordCollectionUpdate(childIndex + 1, recordIndex, updatedCollectionIndex, record, parentItem);\n        break;\n    }\n\n    this.newlyAddedRecordBackup = record;\n  };\n  /**\n   * @param {number} childIndex .\n   * @param {number} recordIndex .\n   * @param {number} updatedCollectionIndex .\n   * @param {IGanttData} record .\n   * @param {IGanttData} parentItem .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.recordCollectionUpdate = function (childIndex, recordIndex, updatedCollectionIndex, record, parentItem) {\n    var flatRecords = this.parent.flatData;\n    var currentViewData = this.parent.currentViewData;\n    var ids = this.parent.ids;\n    /* Record collection update */\n\n    flatRecords.splice(recordIndex, 0, record);\n    currentViewData.splice(updatedCollectionIndex, 0, record);\n    ids.splice(recordIndex, 0, record.ganttProperties.rowUniqueID.toString());\n\n    if (this.parent.viewType === 'ResourceView') {\n      var taskId = record.level === 0 ? 'R' + record.ganttProperties.taskId : 'T' + record.ganttProperties.taskId;\n      this.parent.getTaskIds().splice(recordIndex, 0, taskId);\n    }\n    /* data Source update */\n\n\n    if (!isNullOrUndefined(parentItem)) {\n      childIndex = parentItem.childRecords.indexOf(this.addRowSelectedItem);\n      /*Child collection update*/\n\n      parentItem.childRecords.splice(childIndex, 0, record);\n\n      if (this.parent.dataSource instanceof DataManager && isNullOrUndefined(parentItem.taskData[this.parent.taskFields.parentID]) || !isNullOrUndefined(this.parent.dataSource)) {\n        var child = this.parent.taskFields.child;\n\n        if (parentItem.taskData[child] && parentItem.taskData[child].length > 0) {\n          parentItem.taskData[child].push(record.taskData);\n        } else {\n          parentItem.taskData[child] = [];\n          parentItem.taskData[child].push(record.taskData);\n        }\n      }\n    }\n  };\n  /**\n   * @param {IGanttData} cAddedRecord .\n   * @param {IGanttData} modifiedRecords .\n   * @param {string} event .\n   * @returns {ITaskAddedEventArgs} .\n   * @private\n   */\n\n\n  Edit.prototype.constructTaskAddedEventArgs = function (cAddedRecord, modifiedRecords, event) {\n    var eventArgs = {};\n    eventArgs.action = eventArgs.requestType = event;\n\n    if (cAddedRecord.length > 1) {\n      eventArgs.data = [];\n      eventArgs.newTaskData = [];\n      eventArgs.recordIndex = [];\n\n      for (var i = 0; i < cAddedRecord.length; i++) {\n        eventArgs.data[i] = cAddedRecord[i];\n        eventArgs.newTaskData[i] = getTaskData([cAddedRecord[i]], eventArgs.data[i], eventArgs, this.parent);\n        eventArgs.recordIndex[i] = cAddedRecord[i].index;\n      }\n    } else if (cAddedRecord.length === 1) {\n      for (var i = 0; i < cAddedRecord.length; i++) {\n        eventArgs.data = cAddedRecord[i];\n        eventArgs.newTaskData = getTaskData([cAddedRecord[i]], eventArgs.data, eventArgs, this.parent);\n        eventArgs.recordIndex = cAddedRecord[i].index;\n      }\n    }\n\n    eventArgs.modifiedRecords = modifiedRecords;\n    eventArgs.modifiedTaskData = getTaskData(modifiedRecords, null, null, this.parent);\n    return eventArgs;\n  };\n  /**\n   * @param {ITaskAddedEventArgs} args .\n   * @returns {void} .\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  Edit.prototype.addSuccess = function (args) {\n    // let addedRecords: IGanttData = args.addedRecord;\n    // let eventArgs: IActionBeginEventArgs = {};\n    // this.parent.updatedConnectorLineCollection = [];\n    // this.parent.connectorLineIds = [];\n    // this.parent.predecessorModule.createConnectorLinesCollection(this.parent.flatData);\n    this.parent.treeGrid.parentData = [];\n    this.parent.addDeleteRecord = true;\n    this.parent.selectedRowIndex = 0;\n    this.parent.treeGrid.refresh();\n\n    if (this.parent.enableImmutableMode) {\n      this.parent.modifiedRecords = args.modifiedRecords;\n      this.parent.modifiedRecords.push(args.data);\n      this.refreshRecordInImmutableMode();\n    }\n  };\n\n  Edit.prototype.refreshRecordInImmutableMode = function () {\n    for (var i = 0; i < this.parent.modifiedRecords.length; i++) {\n      var originalData = this.parent.modifiedRecords[i];\n      var dataId = this.parent.viewType === 'ProjectView' ? originalData.ganttProperties.taskId : originalData.ganttProperties.rowUniqueID;\n      this.parent.treeGrid.grid.setRowData(dataId, originalData);\n    }\n  };\n  /**\n   * @param {IGanttData} addedRecord .\n   * @param {RowPosition} rowPosition .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.updateRealDataSource = function (addedRecord, rowPosition) {\n    var taskFields = this.parent.taskFields;\n    var dataSource = isCountRequired(this.parent) ? getValue('result', this.parent.dataSource) : this.parent.dataSource;\n\n    for (var i = 0; i < addedRecord.length; i++) {\n      if (isNullOrUndefined(rowPosition) || isNullOrUndefined(this.addRowSelectedItem)) {\n        rowPosition = 'Top';\n      }\n\n      if (rowPosition === 'Top') {\n        dataSource.splice(0, 0, addedRecord[i].taskData);\n      } else if (rowPosition === 'Bottom') {\n        dataSource.push(addedRecord[i]);\n      } else {\n        if (!isNullOrUndefined(taskFields.id) && !isNullOrUndefined(taskFields.parentID)) {\n          dataSource.push(addedRecord[i].taskData);\n        } else {\n          this.addDataInRealDataSource(dataSource, addedRecord[i].taskData, rowPosition);\n        }\n      }\n\n      this.isBreakLoop = false;\n    }\n  };\n  /**\n   * @param {object[]} dataCollection .\n   * @param {IGanttData} record .\n   * @param {RowPosition} rowPosition .\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.addDataInRealDataSource = function (dataCollection, record, rowPosition) {\n    for (var i = 0; i < dataCollection.length; i++) {\n      var child = this.parent.taskFields.child;\n\n      if (this.isBreakLoop) {\n        break;\n      }\n\n      if (getValue(this.parent.taskFields.id, dataCollection[i]).toString() === this.addRowSelectedItem.ganttProperties.rowUniqueID.toString()) {\n        if (rowPosition === 'Above') {\n          dataCollection.splice(i, 0, record);\n        } else if (rowPosition === 'Below') {\n          dataCollection.splice(i + 1, 0, record);\n        } else if (rowPosition === 'Child') {\n          if (dataCollection[i][child] && dataCollection[i][child].length > 0) {\n            dataCollection[i][child].push(record);\n          } else {\n            dataCollection[i][child] = [];\n            dataCollection[i][child].push(record);\n          }\n        }\n\n        this.isBreakLoop = true;\n        break;\n      } else if (dataCollection[i][child]) {\n        var childRecords = dataCollection[i][child];\n        this.addDataInRealDataSource(childRecords, record, rowPosition);\n      }\n    }\n  };\n  /**\n   * Method to add new record.\n   *\n   * @param {Object[] | Object} data - Defines the new data to add.\n   * @param {RowPosition} rowPosition - Defines the position of row.\n   * @param {number} rowIndex - Defines the row index.\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.addRecord = function (data, rowPosition, rowIndex) {\n    var _this = this;\n\n    if (this.parent.editModule && this.parent.editSettings.allowAdding) {\n      var cAddedRecord_1 = [];\n\n      if (isNullOrUndefined(data)) {\n        this.validateTaskPosition(data, rowPosition, rowIndex, cAddedRecord_1);\n      } else if (data instanceof Array) {\n        for (var i = 0; i < data.length; i++) {\n          this.validateTaskPosition(data[i], rowPosition, rowIndex, cAddedRecord_1);\n        }\n      } else if (typeof data == 'object') {\n        this.validateTaskPosition(data, rowPosition, rowIndex, cAddedRecord_1);\n      } else {\n        return;\n      }\n\n      var args = {};\n      args = this.constructTaskAddedEventArgs(cAddedRecord_1, this.parent.editedRecords, 'beforeAdd');\n      this.parent.showSpinner();\n      this.parent.trigger('actionBegin', args, function (args) {\n        if (!args.cancel) {\n          if (isRemoteData(_this.parent.dataSource)) {\n            var data_2 = _this.parent.dataSource;\n            var updatedData_2 = {\n              addedRecords: [args.newTaskData],\n              changedRecords: args.modifiedTaskData\n            };\n            var prevID_1 = args.data.ganttProperties.taskId.toString();\n            /* tslint:disable-next-line */\n\n            var query_2 = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n            var adaptor = data_2.adaptor;\n\n            if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data_2.dataSource.batchUrl) {\n              /* tslint:disable-next-line */\n              var crud = data_2.saveChanges(updatedData_2, _this.parent.taskFields.id, null, query_2);\n              crud.then(function (e) {\n                if (_this.parent.taskFields.id && !isNullOrUndefined(e.addedRecords[0][_this.parent.taskFields.id]) && e.addedRecords[0][_this.parent.taskFields.id].toString() !== prevID_1) {\n                  _this.parent.setRecordValue('taskId', e.addedRecords[0][_this.parent.taskFields.id], args.data.ganttProperties, true);\n\n                  _this.parent.setRecordValue('taskData.' + _this.parent.taskFields.id, e.addedRecords[0][_this.parent.taskFields.id], args.data);\n\n                  _this.parent.setRecordValue(_this.parent.taskFields.id, e.addedRecords[0][_this.parent.taskFields.id], args.data);\n\n                  _this.parent.setRecordValue('rowUniqueID', e.addedRecords[0][_this.parent.taskFields.id].toString(), args.data.ganttProperties, true);\n\n                  var idsIndex = _this.parent.ids.indexOf(prevID_1);\n\n                  if (idsIndex !== -1) {\n                    _this.parent.ids[idsIndex] = e.addedRecords[0][_this.parent.taskFields.id].toString();\n                  }\n                }\n\n                _this.updateNewRecord(cAddedRecord_1, args);\n              }).catch(function (e) {\n                _this.removeAddedRecord();\n\n                _this.dmFailure(e, args);\n\n                _this._resetProperties();\n              });\n            } else {\n              var addedRecords = 'addedRecords';\n              var insertCrud = data_2.insert(updatedData_2[addedRecords], null, query_2);\n              insertCrud.then(function (e) {\n                var changedRecords = 'changedRecords';\n                var addedRecords = e[0];\n                /* tslint:disable-next-line */\n\n                var updateCrud = data_2.update(_this.parent.taskFields.id, updatedData_2[changedRecords], null, query_2);\n                updateCrud.then(function () {\n                  if (_this.parent.taskFields.id && !isNullOrUndefined(addedRecords[_this.parent.taskFields.id]) && addedRecords[_this.parent.taskFields.id].toString() !== prevID_1) {\n                    _this.parent.setRecordValue('taskId', addedRecords[_this.parent.taskFields.id], args.data.ganttProperties, true);\n\n                    _this.parent.setRecordValue('taskData.' + _this.parent.taskFields.id, addedRecords[_this.parent.taskFields.id], args.data);\n\n                    _this.parent.setRecordValue(_this.parent.taskFields.id, addedRecords[_this.parent.taskFields.id], args.data);\n\n                    _this.parent.setRecordValue('rowUniqueID', addedRecords[_this.parent.taskFields.id].toString(), args.data.ganttProperties, true);\n\n                    var idIndex = _this.parent.ids.indexOf(prevID_1);\n\n                    if (idIndex !== -1) {\n                      _this.parent.ids[idIndex] = addedRecords[_this.parent.taskFields.id].toString();\n                    }\n                  }\n\n                  _this.updateNewRecord(cAddedRecord_1, args);\n                }).catch(function (e) {\n                  _this.removeAddedRecord();\n\n                  _this.dmFailure(e, args);\n\n                  _this._resetProperties();\n                });\n              }).catch(function (e) {\n                _this.removeAddedRecord();\n\n                _this.dmFailure(e, args);\n\n                _this._resetProperties();\n              });\n            }\n          } else {\n            if (_this.parent.viewType === 'ProjectView') {\n              if (rowPosition === 'Top' || rowPosition === 'Bottom' || (rowPosition === 'Above' || rowPosition === 'Below') && !args.data.parentItem) {\n                if (args.data instanceof Array) {\n                  _this.updateRealDataSource(args.data, rowPosition);\n                } else {\n                  var data_3 = [];\n                  data_3.push(args.data);\n\n                  _this.updateRealDataSource(data_3, rowPosition);\n                }\n              }\n            } else {\n              var dataSource = isCountRequired(_this.parent) ? getValue('result', _this.parent.dataSource) : _this.parent.dataSource; // eslint-disable-line\n\n              dataSource.push(args.data.taskData);\n            }\n\n            if (cAddedRecord_1.level === 0) {\n              _this.parent.treeGrid.parentData.splice(0, 0, cAddedRecord_1);\n            }\n\n            _this.updateTreeGridUniqueID(cAddedRecord_1, 'add');\n\n            _this.refreshNewlyAddedRecord(args, cAddedRecord_1);\n\n            _this._resetProperties();\n          }\n        } else {\n          args = args;\n\n          _this.removeAddedRecord();\n\n          _this.reUpdatePreviousRecords();\n\n          _this._resetProperties();\n        }\n      });\n    }\n  };\n  /**\n   * Method to validateTaskPosition.\n   *\n   * @param {Object | object[] } data - Defines the new data to add.\n   * @param {RowPosition} rowPosition - Defines the position of row.\n   * @param {number} rowIndex - Defines the row index.\n   * @param {IGanttData} cAddedRecord - Defines the single data to validate.\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.validateTaskPosition = function (data, rowPosition, rowIndex, cAddedRecord) {\n    var selectedRowIndex = isNullOrUndefined(rowIndex) || isNaN(parseInt(rowIndex.toString(), 10)) ? this.parent.selectionModule ? (this.parent.selectionSettings.mode === 'Row' || this.parent.selectionSettings.mode === 'Both') && this.parent.selectionModule.selectedRowIndexes.length === 1 ? this.parent.selectionModule.selectedRowIndexes[0] : this.parent.selectionSettings.mode === 'Cell' && this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ? this.parent.selectionModule.getSelectedRowCellIndexes()[0].rowIndex : null : null : rowIndex;\n    this.addRowSelectedItem = isNullOrUndefined(selectedRowIndex) ? null : this.parent.updatedRecords[selectedRowIndex];\n    rowPosition = isNullOrUndefined(rowPosition) ? this.parent.editSettings.newRowPosition : rowPosition;\n    data = isNullOrUndefined(data) ? this.parent.editModule.dialogModule.composeAddRecord() : data;\n\n    if ((isNullOrUndefined(selectedRowIndex) || selectedRowIndex < 0 || isNullOrUndefined(this.addRowSelectedItem)) && (rowPosition === 'Above' || rowPosition === 'Below' || rowPosition === 'Child') || !rowPosition || rowPosition !== 'Above' && rowPosition !== 'Below' && rowPosition !== 'Child' && rowPosition !== 'Top' && rowPosition !== 'Bottom') {\n      rowPosition = 'Top';\n    }\n\n    var level = 0;\n    var parentItem;\n\n    switch (rowPosition) {\n      case 'Top':\n      case 'Bottom':\n        if (this.parent.viewType === \"ResourceView\") {\n          level = 1;\n        } else {\n          level = 0;\n        }\n\n        break;\n\n      case 'Above':\n      case 'Below':\n        level = this.addRowSelectedItem.level;\n        parentItem = this.parent.getParentTask(this.addRowSelectedItem.parentItem);\n        break;\n\n      case 'Child':\n        level = this.addRowSelectedItem.level + 1;\n        parentItem = this.addRowSelectedItem;\n        break;\n    }\n\n    this.prepareNewlyAddedData(data, rowPosition);\n    var AddRecord = this.updateNewlyAddedDataBeforeAjax(data, level, rowPosition, parentItem);\n    cAddedRecord.push(AddRecord);\n  };\n\n  Edit.prototype.updateNewRecord = function (cAddedRecord, args) {\n    if (cAddedRecord.level === 0) {\n      this.parent.treeGrid.parentData.splice(0, 0, cAddedRecord);\n      var tempData = getValue('dataOperation.dataArray', this.parent);\n      tempData.splice(0, 0, cAddedRecord.taskData);\n    }\n\n    this.updateTreeGridUniqueID(cAddedRecord, 'add');\n    this.refreshNewlyAddedRecord(args, cAddedRecord);\n\n    this._resetProperties();\n  };\n  /**\n   * Method to reset the flag after adding new record\n   *\n   * @returns {void} .\n   */\n\n\n  Edit.prototype._resetProperties = function () {\n    this.parent.isOnEdit = false;\n    this.parent.hideSpinner();\n    this.addRowSelectedItem = null;\n    this.newlyAddedRecordBackup = null;\n    this.isBreakLoop = false;\n    this.parent.element.tabIndex = 0;\n    this.parent.initiateEditAction(false);\n  };\n  /**\n   * Method to update unique id collection in TreeGrid\n   *\n   * @param {IGanttData} data .\n   * @param {string} action .\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.updateTreeGridUniqueID = function (data, action) {\n    if (action === 'add') {\n      setValue('uniqueIDCollection.' + data.uniqueID, data, this.parent.treeGrid);\n    } else if (action === 'delete') {\n      deleteObject(getValue('uniqueIDCollection', this.parent.treeGrid), data.uniqueID);\n    }\n  };\n\n  Edit.prototype.refreshNewlyAddedRecord = function (args, cAddedRecord) {\n    if (this.parent.selectionModule && this.parent.allowSelection && (this.parent.selectionSettings.mode === 'Row' || this.parent.selectionSettings.mode === 'Both')) {\n      this.parent.staticSelectedRowIndex = this.parent.currentViewData.indexOf(args.data);\n    }\n\n    if (this.parent.timelineSettings.updateTimescaleView) {\n      var tempArray = [];\n\n      if (args.modifiedRecords.length > 0) {\n        tempArray = args.data.length > 0 ? args.data : [args.data]; // eslint-disable-next-line\n\n        tempArray.push.apply(tempArray, args.modifiedRecords);\n      } else {\n        tempArray = args.data.length > 0 ? args.data : [args.data];\n      }\n\n      this.parent.timelineModule.updateTimeLineOnEditing([tempArray], args.action);\n    }\n\n    this.addSuccess(args);\n    args = this.constructTaskAddedEventArgs(cAddedRecord, args.modifiedRecords, 'add');\n    this.parent.trigger('actionComplete', args);\n\n    if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n      this.dialogModule.dialogObj.hide();\n    }\n\n    this.dialogModule.dialogClose();\n\n    if (this.parent.viewType === 'ResourceView') {\n      if (cAddedRecord.length > 1) {\n        for (var i = 0; i < cAddedRecord.length; i++) {\n          args.data[i].ganttProperties.sharedTaskUniqueIds.push(args.data[i].ganttProperties.rowUniqueID);\n\n          if (args.data[i].ganttProperties.resourceInfo) {\n            // if ((args.data[i] as IGanttData).ganttProperties.resourceInfo.length > 1) {\n            var resources = extend([], [], args.data[i].ganttProperties.resourceInfo, true);\n            resources.splice(0, 1);\n            this.updateResoures([], resources, args.data[i]); // }\n          } else {\n            this.removeChildRecord(args.data[i]);\n            this.parent.editModule.checkWithUnassignedTask(args.data[i]);\n          }\n\n          for (var k = 0; k < this.updateParentRecords.length; k++) {\n            this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n          }\n\n          this.updateParentRecords = [];\n        }\n      } else {\n        args.data.ganttProperties.sharedTaskUniqueIds.push(args.data.ganttProperties.rowUniqueID); // eslint-disable-next-line\n\n        if (args.data.ganttProperties.resourceInfo && args.data.ganttProperties.resourceInfo.length) {\n          if (args.data.ganttProperties.resourceInfo.length > 1) {\n            // eslint-disable-next-line\n            var resources = extend([], [], args.data.ganttProperties.resourceInfo, true);\n            resources.splice(0, 1);\n            this.updateResoures([], resources, args.data);\n          }\n        } else {\n          this.removeChildRecord(args.data);\n          this.parent.editModule.checkWithUnassignedTask(args.data);\n        }\n\n        for (var k = 0; k < this.updateParentRecords.length; k++) {\n          this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n        }\n\n        this.updateParentRecords = [];\n      }\n    }\n  };\n  /**\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.removeAddedRecord = function () {\n    var flatRecords = this.parent.flatData;\n    var currentViewData = this.parent.currentViewData;\n    var ids = this.parent.ids;\n    var flatRecordsIndex = flatRecords.indexOf(this.newlyAddedRecordBackup);\n    var currentViewDataIndex = currentViewData.indexOf(this.newlyAddedRecordBackup);\n    var idsIndex = ids.indexOf(this.newlyAddedRecordBackup.ganttProperties.rowUniqueID.toString());\n    deleteObject(this.parent.previousRecords, flatRecords[flatRecordsIndex].uniqueID);\n\n    if (this.newlyAddedRecordBackup.parentItem) {\n      var parentItem = this.parent.getParentTask(this.newlyAddedRecordBackup.parentItem);\n      var parentIndex = parentItem.childRecords.indexOf(this.newlyAddedRecordBackup);\n      parentItem.childRecords.splice(parentIndex, 1);\n    }\n\n    flatRecords.splice(flatRecordsIndex, 1);\n    currentViewData.splice(currentViewDataIndex, 1);\n    ids.splice(idsIndex, 1);\n  };\n\n  Edit.prototype.getPrevRecordIndex = function () {\n    var prevRecord = this.parent.updatedRecords[this.parent.selectionModule.getSelectedRowIndexes()[0] - 1];\n    var selectedRecord = this.parent.selectionModule.getSelectedRecords()[0];\n    var parent = this.parent.getRootParent(prevRecord, selectedRecord.level);\n    var prevIndex = this.parent.updatedRecords.indexOf(parent);\n    return prevIndex;\n  };\n  /**\n   * indent a selected record\n   *\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.indent = function () {\n    var index = this.parent.selectedRowIndex;\n    var isSelected = this.parent.selectionModule ? this.parent.selectionModule.selectedRowIndexes.length === 1 || this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ? true : false : false;\n    var dropIndex;\n    var prevRecord = this.parent.updatedRecords[this.parent.selectionModule.getSelectedRowIndexes()[0] - 1];\n    var selectedRecord = this.parent.selectionModule.getSelectedRecords()[0];\n\n    if (!this.parent.editSettings.allowEditing || index === 0 || index === -1 || !isSelected || this.parent.viewType === 'ResourceView' || this.parent.updatedRecords[index].level - prevRecord.level === 1) {\n      return;\n    } else {\n      if (prevRecord.level - selectedRecord.level === 0) {\n        dropIndex = this.parent.selectionModule.getSelectedRowIndexes()[0] - 1;\n      } else {\n        dropIndex = this.getPrevRecordIndex();\n      }\n\n      this.indentOutdentRow([this.parent.selectionModule.getSelectedRowIndexes()[0]], dropIndex, 'child');\n    }\n  };\n  /**\n   * To perform outdent operation for selected row\n   *\n   * @returns {void} .\n   */\n\n\n  Edit.prototype.outdent = function () {\n    var index = this.parent.selectionModule.getSelectedRowIndexes()[0];\n    var dropIndex;\n    var isSelected = this.parent.selectionModule ? this.parent.selectionModule.selectedRowIndexes.length === 1 || this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ? true : false : false;\n\n    if (!this.parent.editSettings.allowEditing || index === -1 || index === 0 || !isSelected || this.parent.viewType === 'ResourceView' || this.parent.updatedRecords[index].level === 0) {\n      return;\n    } else {\n      var thisParent = this.parent.getTaskByUniqueID(this.parent.selectionModule.getSelectedRecords()[0].parentItem.uniqueID);\n      dropIndex = this.parent.updatedRecords.indexOf(thisParent);\n      this.indentOutdentRow([index], dropIndex, 'below');\n    }\n  };\n\n  Edit.prototype.indentOutdentRow = function (fromIndexes, toIndex, pos) {\n    var _this = this; // eslint-disable-next-line\n\n\n    if (fromIndexes[0] !== toIndex && pos === 'above' || 'below' || 'child') {\n      if (pos === 'above') {\n        this.dropPosition = 'topSegment';\n      }\n\n      if (pos === 'below') {\n        this.dropPosition = 'bottomSegment';\n      }\n\n      if (pos === 'child') {\n        this.dropPosition = 'middleSegment';\n      }\n\n      var action = void 0;\n      var record = [];\n\n      for (var i = 0; i < fromIndexes.length; i++) {\n        record[i] = this.parent.updatedRecords[fromIndexes[i]];\n      }\n\n      var isByMethod_1 = true;\n      var args_1 = {\n        data: record,\n        dropIndex: toIndex,\n        dropPosition: this.dropPosition\n      };\n\n      if (this.dropPosition === 'middleSegment') {\n        action = 'indenting';\n      } else if (this.dropPosition === 'bottomSegment') {\n        action = 'outdenting';\n      }\n\n      var actionArgs = {\n        action: action,\n        data: record[0],\n        cancel: false\n      };\n      this.parent.trigger('actionBegin', actionArgs, function (actionArg) {\n        if (!actionArg.cancel) {\n          _this.reArrangeRows(args_1, isByMethod_1);\n        } else {\n          return;\n        }\n      });\n    } else {\n      return;\n    }\n  };\n\n  Edit.prototype.reArrangeRows = function (args, isByMethod) {\n    this.dropPosition = args.dropPosition;\n\n    if (args.dropPosition !== 'Invalid' && this.parent.editModule) {\n      var obj = this.parent;\n      var draggedRec = void 0;\n      this.droppedRecord = obj.updatedRecords[args.dropIndex];\n      var dragRecords = [];\n      var droppedRec = this.droppedRecord;\n\n      if (!args.data[0]) {\n        dragRecords.push(args.data);\n      } else {\n        dragRecords = args.data;\n      }\n\n      var c = 0;\n      var dLength = dragRecords.length;\n\n      for (var i = 0; i < dLength; i++) {\n        this.parent.isOnEdit = true;\n        draggedRec = dragRecords[i];\n        this.draggedRecord = draggedRec;\n\n        if (this.dropPosition !== 'Invalid') {\n          if (isByMethod) {\n            this.deleteDragRow();\n          }\n\n          var recordIndex1 = this.treeGridData.indexOf(droppedRec);\n\n          if (this.dropPosition === 'bottomSegment') {\n            if (!droppedRec.hasChildRecords) {\n              if (this.parent.taskFields.parentID && this.ganttData.length > 0) {\n                this.ganttData.splice(recordIndex1 + 1, 0, this.draggedRecord.taskData);\n              }\n\n              this.treeGridData.splice(recordIndex1 + 1, 0, this.draggedRecord);\n              this.parent.ids.splice(recordIndex1 + 1, 0, this.draggedRecord.ganttProperties.rowUniqueID.toString());\n            } else {\n              c = this.parent.editModule.getChildCount(droppedRec, 0);\n\n              if (this.parent.taskFields.parentID && this.ganttData.length > 0) {\n                this.ganttData.splice(recordIndex1 + c + 1, 0, this.draggedRecord.taskData);\n              }\n\n              this.treeGridData.splice(recordIndex1 + c + 1, 0, this.draggedRecord);\n              this.parent.ids.splice(recordIndex1 + c + 1, 0, this.draggedRecord.ganttProperties.rowUniqueID.toString());\n              var idIndex = this.parent.ids.indexOf(this.draggedRecord[this.parent.taskFields.id].toString());\n\n              if (idIndex !== recordIndex1 + c + 1) {\n                this.parent.ids.splice(idIndex, 1);\n                this.parent.ids.splice(recordIndex1 + c + 1, 0, this.draggedRecord[this.parent.taskFields.id].toString());\n              }\n            }\n\n            this.parent.setRecordValue('parentItem', this.treeGridData[recordIndex1].parentItem, draggedRec);\n            this.parent.setRecordValue('parentUniqueID', this.treeGridData[recordIndex1].parentUniqueID, draggedRec);\n            this.parent.setRecordValue('level', this.treeGridData[recordIndex1].level, draggedRec);\n\n            if (draggedRec.hasChildRecords) {\n              var level = 1;\n              this.updateChildRecordLevel(draggedRec, level);\n              this.updateChildRecord(draggedRec, recordIndex1 + c + 1);\n            }\n\n            if (droppedRec.parentItem) {\n              var record = this.parent.getParentTask(droppedRec.parentItem).childRecords;\n              var childRecords = record;\n              var droppedRecordIndex = childRecords.indexOf(droppedRec) + 1;\n              childRecords.splice(droppedRecordIndex, 0, draggedRec);\n            }\n          }\n\n          if (this.dropPosition === 'middleSegment') {\n            this.dropMiddle(recordIndex1);\n          }\n\n          if (!isNullOrUndefined(draggedRec.parentItem && this.updateParentRecords.indexOf(draggedRec.parentItem) !== -1)) {\n            this.updateParentRecords.push(draggedRec.parentItem);\n          }\n        }\n\n        if (isNullOrUndefined(draggedRec.parentItem)) {\n          var parentRecords = this.parent.treeGrid.parentData;\n          var newParentIndex = parentRecords.indexOf(this.droppedRecord);\n\n          if (this.dropPosition === 'bottomSegment') {\n            parentRecords.splice(newParentIndex + 1, 0, draggedRec);\n          }\n        }\n\n        this.refreshDataSource();\n      }\n\n      if (this.dropPosition === 'middleSegment') {\n        if (droppedRec.ganttProperties.predecessor) {\n          this.parent.editModule.removePredecessorOnDelete(droppedRec);\n          droppedRec.ganttProperties.predecessor = null;\n          droppedRec.ganttProperties.predecessorsName = null;\n          droppedRec[this.parent.taskFields.dependency] = null;\n          droppedRec.taskData[this.parent.taskFields.dependency] = null;\n        }\n\n        if (droppedRec.ganttProperties.isMilestone) {\n          this.parent.setRecordValue('isMilestone', false, droppedRec.ganttProperties, true);\n\n          if (!isNullOrUndefined(droppedRec.taskData[this.parent.taskFields.milestone])) {\n            if (droppedRec.taskData[this.parent.taskFields.milestone] === true) {\n              droppedRec.taskData[this.parent.taskFields.milestone] = false;\n            }\n          }\n        }\n      }\n\n      for (var k = 0; k < this.updateParentRecords.length; k++) {\n        this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n      }\n\n      this.updateParentRecords = [];\n      this.parent.isOnEdit = false;\n    }\n\n    this.refreshRecord(args);\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Edit.prototype.refreshRecord = function (args, isDrag) {\n    var _this = this;\n\n    if (isRemoteData(this.parent.dataSource)) {\n      var data = this.parent.dataSource;\n      var updatedData = {\n        changedRecords: getTaskData(this.parent.editedRecords, null, null, this.parent)\n      };\n      var queryValue = this.parent.query instanceof Query ? this.parent.query : new Query();\n      var crud = null;\n      var adaptor = data.adaptor;\n\n      if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data.dataSource.batchUrl) {\n        crud = data.saveChanges(updatedData, this.parent.taskFields.id, null, queryValue);\n      } else {\n        var changedRecords = 'changedRecords';\n        crud = data.update(this.parent.taskFields.id, updatedData[changedRecords], null, queryValue);\n      }\n\n      crud.then(function (e) {\n        return _this.indentSuccess(e, args, isDrag);\n      }).catch(function (e) {\n        return _this.indentFailure(e);\n      });\n    } else {\n      this.indentOutdentSuccess(args, isDrag);\n    }\n  };\n\n  Edit.prototype.indentSuccess = function (e, args, isDrag) {\n    this.indentOutdentSuccess(args, isDrag);\n  };\n\n  Edit.prototype.indentFailure = function (e) {\n    this.parent.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  Edit.prototype.indentOutdentSuccess = function (args, isDrag) {\n    this.parent.treeGrid.parentData = [];\n    this.parent.treeGrid.refresh();\n\n    if (this.parent.enableImmutableMode) {\n      this.refreshRecordInImmutableMode();\n    }\n\n    if (isDrag) {\n      args.requestType = 'rowDropped';\n    } else {\n      if (this.dropPosition === 'middleSegment') {\n        args.requestType = 'indented';\n      } else if (this.dropPosition === 'bottomSegment') {\n        args.requestType = 'outdented';\n      }\n    }\n\n    args.modifiedRecords = this.parent.editedRecords;\n\n    if (this.parent.timezone) {\n      for (var i = 0; i < args.modifiedRecords.length; i++) {\n        updateDates(args.modifiedRecords[i], this.parent);\n      }\n    }\n\n    this.parent.trigger('actionComplete', args);\n    this.parent.editedRecords = [];\n  };\n\n  Edit.prototype.refreshDataSource = function () {\n    var draggedRec = this.draggedRecord;\n    var droppedRec = this.droppedRecord;\n    var proxy = this.parent;\n    var tempData;\n    var indx;\n\n    if (this.parent.dataSource instanceof DataManager) {\n      tempData = getValue('dataOperation.dataArray', this.parent);\n    } else {\n      tempData = proxy.dataSource;\n    }\n\n    if (tempData.length > 0 && !isNullOrUndefined(droppedRec) && !droppedRec.parentItem) {\n      for (var i = 0; i < Object.keys(tempData).length; i++) {\n        if (tempData[i][this.parent.taskFields.child] === droppedRec.taskData[this.parent.taskFields.child]) {\n          indx = i;\n        }\n      }\n\n      if (this.dropPosition === 'topSegment') {\n        if (!this.parent.taskFields.parentID) {\n          tempData.splice(indx, 0, draggedRec.taskData);\n        }\n      } else if (this.dropPosition === 'bottomSegment') {\n        if (!this.parent.taskFields.parentID) {\n          tempData.splice(indx + 1, 0, draggedRec.taskData);\n        }\n      }\n    } else if (!this.parent.taskFields.parentID && !isNullOrUndefined(droppedRec) && droppedRec.parentItem) {\n      if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n        var rowPos = this.dropPosition === 'topSegment' ? 'Above' : 'Below';\n        this.parent.editModule.addRowSelectedItem = droppedRec;\n        this.parent.editModule.updateRealDataSource(draggedRec, rowPos);\n        delete this.parent.editModule.addRowSelectedItem;\n      }\n    }\n\n    if (this.parent.taskFields.parentID) {\n      if (draggedRec.parentItem) {\n        if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n          draggedRec[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.parentID];\n          draggedRec.taskData[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.parentID];\n        } else {\n          draggedRec[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.id];\n          draggedRec.taskData[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.id];\n        }\n      } else {\n        draggedRec[this.parent.taskFields.parentID] = null;\n        draggedRec.taskData[this.parent.taskFields.parentID] = null;\n      }\n    }\n  };\n\n  Edit.prototype.deleteDragRow = function () {\n    if (this.parent.dataSource instanceof DataManager) {\n      this.ganttData = getValue('dataOperation.dataArray', this.parent);\n    } else {\n      this.ganttData = isCountRequired(this.parent) ? getValue('result', this.parent.dataSource) : this.parent.dataSource;\n    }\n\n    this.treeGridData = isCountRequired(this.parent) ? getValue('result', this.parent.treeGrid.dataSource) : this.parent.treeGrid.dataSource;\n    var delRow = this.parent.getTaskByUniqueID(this.draggedRecord.uniqueID);\n    this.removeRecords(delRow);\n  };\n\n  Edit.prototype.dropMiddle = function (recordIndex1) {\n    var obj = this.parent;\n    var childRec = this.parent.editModule.getChildCount(this.droppedRecord, 0);\n    var childRecordsLength = isNullOrUndefined(childRec) || childRec === 0 ? recordIndex1 + 1 : childRec + recordIndex1 + 1;\n\n    if (this.dropPosition === 'middleSegment') {\n      if (obj.taskFields.parentID && this.ganttData.length > 0) {\n        this.ganttData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n      }\n\n      this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n      this.parent.ids.splice(childRecordsLength, 0, this.draggedRecord[this.parent.taskFields.id].toString());\n      this.recordLevel();\n\n      if (this.draggedRecord.hasChildRecords) {\n        this.updateChildRecord(this.draggedRecord, childRecordsLength, this.droppedRecord.expanded);\n      }\n\n      if (isNullOrUndefined(this.draggedRecord.parentItem && this.updateParentRecords.indexOf(this.draggedRecord.parentItem) !== -1)) {\n        this.updateParentRecords.push(this.draggedRecord.parentItem);\n      }\n    }\n  };\n\n  Edit.prototype.updateChildRecordLevel = function (record, levl) {\n    var length = 0;\n    var currentRec;\n    levl++;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    length = record.childRecords.length;\n\n    for (var j = 0; j < length; j++) {\n      currentRec = record.childRecords[j];\n      var parentData = void 0;\n\n      if (record.parentItem) {\n        var id = 'uniqueIDCollection';\n        parentData = this.parent.treeGrid[id][record.parentItem.uniqueID];\n      }\n\n      currentRec.level = record.parentItem ? parentData.level + levl : record.level + 1;\n\n      if (currentRec.hasChildRecords) {\n        levl--;\n        levl = this.updateChildRecordLevel(currentRec, levl);\n      }\n    }\n\n    return levl;\n  };\n  /* eslint-disable-next-line */\n\n\n  Edit.prototype.updateChildRecord = function (record, count, expanded) {\n    var currentRec;\n    var obj = this.parent;\n    var length = 0;\n\n    if (!record.hasChildRecords) {\n      return 0;\n    }\n\n    length = record.childRecords.length;\n\n    for (var i = 0; i < length; i++) {\n      currentRec = record.childRecords[i];\n      count++;\n      obj.flatData.splice(count, 0, currentRec);\n      this.parent.ids.splice(count, 0, currentRec.ganttProperties.rowUniqueID.toString());\n\n      if (obj.taskFields.parentID && this.ganttData.length > 0) {\n        this.ganttData.splice(count, 0, currentRec.taskData);\n      }\n\n      if (currentRec.hasChildRecords) {\n        count = this.updateChildRecord(currentRec, count);\n      }\n    }\n\n    return count;\n  };\n\n  Edit.prototype.removeRecords = function (record) {\n    var obj = this.parent;\n    var dataSource;\n\n    if (this.parent.dataSource instanceof DataManager) {\n      dataSource = getValue('dataOperation.dataArray', this.parent);\n    } else {\n      dataSource = this.parent.dataSource;\n    }\n\n    var delRow = record;\n    var flatParent = this.parent.getParentTask(delRow.parentItem);\n\n    if (delRow) {\n      if (delRow.parentItem) {\n        var childRecords = flatParent ? flatParent.childRecords : [];\n        var childIndex = 0;\n\n        if (childRecords && childRecords.length > 0) {\n          childIndex = childRecords.indexOf(delRow);\n          flatParent.childRecords.splice(childIndex, 1);\n\n          if (!this.parent.taskFields.parentID) {\n            flatParent.taskData[this.parent.taskFields.child].splice(childIndex, 1);\n          } // collection for updating parent record\n\n\n          this.updateParentRecords.push(flatParent);\n        }\n      }\n\n      if (obj.taskFields.parentID) {\n        if (delRow.hasChildRecords && delRow.childRecords.length > 0) {\n          this.removeChildItem(delRow);\n        }\n\n        var indx = void 0;\n        var ganttData = dataSource.length > 0 ? dataSource : this.parent.currentViewData;\n\n        for (var i = 0; i < ganttData.length; i++) {\n          if (ganttData[i][this.parent.taskFields.id] === delRow.taskData[this.parent.taskFields.id]) {\n            indx = i;\n          }\n        }\n\n        if (indx !== -1) {\n          if (dataSource.length > 0) {\n            dataSource.splice(indx, 1);\n          }\n\n          var gridIndx = void 0;\n\n          for (var i = 0; i < this.treeGridData.length; i++) {\n            if (this.treeGridData[i][this.parent.taskFields.id] === delRow.taskData[this.parent.taskFields.id]) {\n              gridIndx = i;\n            }\n          }\n\n          this.treeGridData.splice(gridIndx, 1);\n          this.parent.ids.splice(gridIndx, 1);\n\n          if (this.parent.treeGrid.parentData.indexOf(delRow) !== -1) {\n            this.parent.treeGrid.parentData.splice(this.parent.treeGrid.parentData.indexOf(delRow), 1);\n          }\n        }\n      }\n\n      var recordIdx = this.treeGridData.indexOf(delRow);\n\n      if (!obj.taskFields.parentID) {\n        var deletedRecordCount = this.getChildCount(delRow, 0);\n        this.treeGridData.splice(recordIdx, deletedRecordCount + 1);\n        this.parent.ids.splice(recordIdx, deletedRecordCount + 1);\n        var parentIndex = this.ganttData.indexOf(delRow.taskData);\n\n        if (parentIndex !== -1) {\n          this.ganttData.splice(parentIndex, 1);\n          this.parent.treeGrid.parentData.splice(parentIndex, 1);\n        }\n      }\n\n      if (delRow.parentItem && flatParent && flatParent.childRecords && !flatParent.childRecords.length) {\n        this.parent.setRecordValue('expanded', false, flatParent);\n        this.parent.setRecordValue('hasChildRecords', false, flatParent);\n      }\n    }\n  };\n\n  Edit.prototype.removeChildItem = function (record) {\n    var currentRec;\n    var indx;\n\n    for (var i = 0; i < record.childRecords.length; i++) {\n      currentRec = record.childRecords[i];\n      var data = void 0;\n\n      if (this.parent.dataSource instanceof DataManager) {\n        data = getValue('dataOperation.dataArray', this.parent);\n      } else {\n        data = this.parent.dataSource;\n      }\n\n      for (var j = 0; j < data.length; j++) {\n        if (data[j][this.parent.taskFields.id] === currentRec.taskData[this.parent.taskFields.id]) {\n          indx = j;\n        }\n      }\n\n      if (indx !== -1) {\n        if (data.length > 0) {\n          data.splice(indx, 1);\n        }\n\n        var gridIndx = void 0;\n\n        for (var i_1 = 0; i_1 < this.treeGridData.length; i_1++) {\n          if (this.treeGridData[i_1][this.parent.taskFields.id] === currentRec.taskData[this.parent.taskFields.id]) {\n            gridIndx = i_1;\n          }\n        }\n\n        this.treeGridData.splice(gridIndx, 1);\n        this.parent.ids.splice(gridIndx, 1);\n      }\n\n      if (currentRec.hasChildRecords) {\n        this.removeChildItem(currentRec);\n      }\n    }\n  };\n\n  Edit.prototype.recordLevel = function () {\n    var obj = this.parent;\n    var draggedRec = this.draggedRecord;\n    var droppedRec = this.droppedRecord;\n    var childItem = obj.taskFields.child;\n\n    if (!droppedRec.hasChildRecords) {\n      droppedRec.hasChildRecords = true;\n\n      if (!droppedRec.childRecords.length) {\n        droppedRec.childRecords = [];\n\n        if (!obj.taskFields.parentID && isNullOrUndefined(droppedRec.taskData[childItem])) {\n          droppedRec.taskData[childItem] = [];\n        }\n      }\n    }\n\n    if (this.dropPosition === 'middleSegment') {\n      var parentItem = extend({}, droppedRec);\n      delete parentItem.childRecords;\n      var createParentItem = {\n        uniqueID: parentItem.uniqueID,\n        expanded: parentItem.expanded,\n        level: parentItem.level,\n        index: parentItem.index,\n        taskId: parentItem.ganttProperties.rowUniqueID\n      };\n      this.parent.setRecordValue('parentItem', createParentItem, draggedRec);\n      this.parent.setRecordValue('parentUniqueID', droppedRec.uniqueID, draggedRec);\n      droppedRec.childRecords.splice(droppedRec.childRecords.length, 0, draggedRec);\n\n      if (!isNullOrUndefined(draggedRec) && !obj.taskFields.parentID && !isNullOrUndefined(droppedRec.taskData[childItem])) {\n        droppedRec.taskData[obj.taskFields.child].splice(droppedRec.childRecords.length, 0, draggedRec.taskData);\n      }\n\n      if (!isNullOrUndefined(droppedRec.ganttProperties.segments) && droppedRec.ganttProperties.segments.length > 0) {\n        droppedRec.ganttProperties.segments = null;\n        droppedRec.taskData[obj.taskFields.segments] = null;\n      }\n\n      if (!draggedRec.hasChildRecords) {\n        draggedRec.level = droppedRec.level + 1;\n      } else {\n        var level = 1;\n        draggedRec.level = droppedRec.level + 1;\n        this.updateChildRecordLevel(draggedRec, level);\n      }\n\n      droppedRec.expanded = true;\n    }\n  };\n\n  return Edit;\n}();\n\nexport { Edit };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/edit.js"],"names":["isNullOrUndefined","isUndefined","extend","setValue","getValue","deleteObject","createElement","DataManager","DataUtil","Query","ODataAdaptor","WebApiAdaptor","getUid","getSwapKey","isScheduledTask","getTaskData","isRemoteData","getIndex","isCountRequired","updateDates","CellEdit","TaskbarEdit","DialogEdit","Dialog","MultiSelect","CheckBoxSelection","DropDownList","ConnectorLineEdit","Edit","parent","isFromDeleteMethod","targetedRecords","updateParentRecords","isaddtoBottom","confirmDialog","taskbarMoved","predecessorUpdated","isBreakLoop","deletedTaskDetails","validatedChildItems","editSettings","allowEditing","mode","cellEditModule","taskFields","dependency","connectorLineEditModule","allowAdding","dialogModule","allowTaskbarEditing","taskbarEditModule","allowDeleting","id","element","appendChild","renderDeleteConfirmDialog","treeGrid","recordDoubleClick","bind","showDeleteConfirmDialog","allowNextRowEdit","updateDefaultColumnEditors","prototype","getModuleName","customEditorColumns","progress","resourceInfo","i","length","column","getColumnByField","treeGridModule","treeGridColumns","field","updateIDColumnEditParams","updateProgessColumnEditParams","updateResourceColumnEditor","updateTaskTypeColumnEditor","editParam","min","decimals","validateDecimalOnType","format","showSpinButton","updateEditParams","max","edit","params","ganttColumn","ganttColumns","editType","getResourceEditor","_this","resourceSettings","resourceFields","editObject","editor","Inject","write","args","currentEditRow","dataSource","resources","fields","text","name","value","showDropDownIcon","popupHeight","delimiterChar","getResourceIds","rowData","appendTo","read","ej2_instances","resourcesName","j","push","join","destroy","getTaskTypeEditor","types","ganttProperties","key","reUpdateEditModules","editModule","undefined","isDestroyed","ganttData","row","rowIndex","currentViewData","openEditDialog","ganttChartModule","updateRecordByID","data","readOnly","tasks","viewType","flatData","getTaskIds","indexOf","getRecordByID","isOnEdit","validateUpdateValues","keys","Object","startDate","endDate","duration","dataOperation","calculateScheduledValues","taskData","updateWidthLeft","predecessorsName","updatePredecessor","action","initiateUpdateAction","isFromDialog","ganttObj","ganttPropByMapping","columnMapping","scheduleFieldNames","isScheduleValueUpdated","_i","_a","allowUnscheduledTasks","updateDurationValue","isMilestone","setRecordValue","updateMappingData","tempDate","Date","resourceData","setResourceInfo","JSON","stringify","isResourceUpdate","previousResource","slice","notes","durationUnit","expandState","milestone","baselineStartDate","baselineEndDate","segments","columnByField","getDateFromFormat","ganttPropKey","totDuration","sdate","edate","getEndDate","calculateBaselineLeft","calculateBaselineWidth","setSegmentsInfo","indicators","work","customColumns","manual","updateTaskScheduleModes","validateScheduleValues","updateResourceRelatedFields","currentData","ganttProp","taskType","isEffectDriven","isAutoSchedule","updateDurationWithWork","updateUnitWithWork","updateWorkWithDuration","fieldNames","validateScheduleByTwoValues","validateScheduleValuesByCurrentField","isUnscheduledTask","calculateDuration","isTaskbarMoved","isMoved","prevData","previousRecords","uniqueID","prevStart","prevEnd","prevDuration","prevDurationUnit","getTime","isPredecessorUpdated","hasOwnProperty","predecessor","isCheckPredecessor","isValidatePredecessor","isInPredecessorValidation","predecessorModule","getValidPredecessor","updateGanttProperties","updateData","skipProperty","forEach","property","isConnectorLineUpdate","addRemovePredecessor","validateObject","validateTypes","newArgs","validateTaskEvent","validateMode","preserveLinkWithEditing","removeLink","respectLink","openValidationDialog","applyPredecessorOption","updateEditedTask","editedEventArgs","resetValidateArgs","currentEditedArgs","cancel","requestType","dialogValidateMode","editEventArgs","actionBeginTask","ganttRecord","updateParentChildRecord","child","editedTaskBarItem","validatePredecessor","isMileStoneEdited","updateParentItemOnEditing","parentItem","taskMode","updateParentItems","initiateSaveAction","childRecord","hasChildRecords","updateChildItems","currentValue","autoStartDate","autoEndDate","calculateWidth","calculateLeft","getProgressWidth","width","calculateAutoDuration","updateAutoWidthLeft","dateValidationModule","checkStartDate","calculateEndDate","calculateDateByRoundOffDuration","newStartDate","projectStartDate","checkEndDate","updateTaskData","updateParentProgress","cloneParent","parentProgress","getParentTask","childRecords","childCount","totalProgress","milesStoneCount","taskCount","totalDuration","progressValues","getParentProgress","Math","round","isNaN","autoWidth","floor","revertCellEdit","reUpdatePreviousRecords","resetEditProperties","isRefreshChart","isRefreshGrid","collection","uniqueId","prevTask","originalData","getTaskByUniqueID","copyTaskData","chartRowsModule","refreshRow","dataId","taskId","rowUniqueID","grid","setRowData","getRowObjectFromUID","getDataRows","getAttribute","existing","newValue","updateScheduleDatesOnEditing","previousData","previousStartDate","currentStartDate","validStartDate","validEndDate","calcEndDate","isRightMove","durationDiff","getUpdatableChildRecords","getDuration","toString","getStartDate","parentRecord","childLists","showSpinner","eventArgs","modifiedRecords","editedRecords","target","modifiedTaskData","trigger","eventArg","refreshRecords","updatedData","changedRecords","query","crud","dataAdaptor","adaptor","batchUrl","saveChanges","update","then","e","dmSuccess","catch","dmFailure","saveSuccess","deleteRecords","d","isDelete","error","updateSharedTask","ids","sharedTaskUniqueIds","editRecord","updateResourceName","timelineSettings","updateTimescaleView","tempArray","timelineModule","updateTimeLineOnEditing","updateResoures","isTreeGridRefresh","k","updatedConnectorLineCollection","connectorLineIds","refreshEditedRecordConnectorLine","dependencyCancel","taskBarEditAction","endEditAction","parentData","refresh","prevResource","currentResource","updateRecord","flatRecords","currentLength","previousLength","index","recordIndex","resourceID","parseInt","addNewRecord","splice","prevLength","taskID","record","removeChildRecord","parentTask","taskName","localeObj","getConstant","checkWithUnassignedTask","unassignedTasks","unassignTaskObj","beforeEditStatus","cAddedRecord","createRecord","addRecordAsBottom","recordIndex1","level","updateTreeGridUniqueID","replace","parentID","getCloneParent","parentUniqId","addRecordAsChild","gObj","json","deletedRow","flatParentData","deleteChildRecords","childIndex","isOnDelete","uniqueIDIndex","deleteRecordIDs","removeFromDataSource","flatRecordIndex","idx","deletedRecordCount","getChildCount","droppedRecord","draggedRecord","childRecordsLength","addRowIndex","addRowPosition","dropChildRecord","position","recordId","dialog","dialogObj","hide","dialogClose","hideSpinner","initiateEditAction","saveFailed","isModal","visible","content","buttons","click","confirmDeleteOkButton","buttonModel","isPrimary","closeConfirmDialog","animationSettings","effect","deleteSelectedItems","focussedElement","querySelector","focus","startDeleteAction","show","deleteResourceRecords","selectedRecords","deleteRow","selectionSettings","selectionModule","getSelectedRecords","getCellSelectedRecords","deleteRecord","taskDetail","variableType","Array","isArray","valueOf","updateTargetedRecords","taskDetailArray","rowItems","addDeleteRecord","item","filteredRecord","filter","removePredecessorOnDelete","allowSelection","clearSelection","delereArgs","deletedRecordCollection","updatedRecordCollection","initiateDeleteAction","toolbarModule","refreshToolbarItems","predecessors","from","toRecord","connectorLineModule","to","toRecordPredcessor","t","toId","updatePredecessorValues","fromRecord","fromRecordPredcessor","fromId","predcessorArray","predecessorString","getPredecessorStringValue","updateTaskId","currentId","newId","cId","nId","cIndex","nIndex","thisRecord","count","currentGanttRecord","updatePredecessorOnUpdateId","pred","pre","c","removeData","dataCollection","data_1","timezone","updatedData_1","deletedRecords","query_1","deleteSuccess","deleteCrud","remove","updateCrud","getRecordFromFlatdata","selectedRowIndex","currentIndex","flatIndex","treeGridParentIndex","tempData","dataIndex","createConnectorLinesCollection","enableImmutableMode","refreshRecordInImmutableMode","getNewTaskId","maxId","aggregates","prepareNewlyAddedData","obj","rowPosition","taskModel","setDate","getDate","getFormatedDate","getDateFormat","updateNewlyAddedDataBeforeAjax","pIndex","backUpAndPushNewlyAddedRecord","ensurePredecessorCollectionHelper","updatePredecessorHelper","validatePredecessorDates","currentRecord","getVisibleChildRecordCount","updatePredecessorOnIndentOutdent","len","parentRecordTaskData","predecessorCollection","predecessorIndex","updatedPredecessor","predecessorCollections","prdcList","split","str","type","ind","temppredecessorCollection","predecessorToString","tem","offset","currentItemIndex","updatedCollectionIndex","addRowSelectedItem","recordCollectionUpdate","dataChildCount","expanded","enableMultiTaskbar","expandByID","Number","newlyAddedRecordBackup","constructTaskAddedEventArgs","event","newTaskData","addSuccess","updateRealDataSource","addedRecord","addDataInRealDataSource","addRecord","cAddedRecord_1","validateTaskPosition","data_2","updatedData_2","addedRecords","prevID_1","query_2","idsIndex","updateNewRecord","removeAddedRecord","_resetProperties","insertCrud","insert","idIndex","data_3","refreshNewlyAddedRecord","selectedRowIndexes","getSelectedRowCellIndexes","updatedRecords","newRowPosition","composeAddRecord","AddRecord","tabIndex","staticSelectedRowIndex","apply","flatRecordsIndex","currentViewDataIndex","parentIndex","getPrevRecordIndex","prevRecord","getSelectedRowIndexes","selectedRecord","getRootParent","prevIndex","indent","isSelected","dropIndex","indentOutdentRow","outdent","thisParent","fromIndexes","toIndex","pos","dropPosition","isByMethod_1","args_1","actionArgs","actionArg","reArrangeRows","isByMethod","draggedRec","dragRecords","droppedRec","dLength","deleteDragRow","treeGridData","parentUniqueID","updateChildRecordLevel","updateChildRecord","droppedRecordIndex","dropMiddle","parentRecords","newParentIndex","refreshDataSource","refreshRecord","isDrag","queryValue","indentSuccess","indentFailure","indentOutdentSuccess","proxy","indx","rowPos","delRow","removeRecords","childRec","recordLevel","levl","currentRec","flatParent","removeChildItem","gridIndx","recordIdx","i_1","childItem","createParentItem"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, isUndefined, extend, setValue, getValue, deleteObject, createElement } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil, Query, ODataAdaptor, WebApiAdaptor } from '@syncfusion/ej2-data';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { getSwapKey, isScheduledTask, getTaskData, isRemoteData, getIndex, isCountRequired, updateDates } from '../base/utils';\nimport { CellEdit } from './cell-edit';\nimport { TaskbarEdit } from './taskbar-edit';\nimport { DialogEdit } from './dialog-edit';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { MultiSelect, CheckBoxSelection, DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { ConnectorLineEdit } from './connector-line-edit';\n/**\n * The Edit Module is used to handle editing actions.\n *\n */\nvar Edit = /** @class */ (function () {\n    function Edit(parent) {\n        this.isFromDeleteMethod = false;\n        this.targetedRecords = [];\n        /** @hidden */\n        this.updateParentRecords = [];\n        /** @hidden */\n        this.isaddtoBottom = false;\n        this.confirmDialog = null;\n        this.taskbarMoved = false;\n        this.predecessorUpdated = false;\n        this.isBreakLoop = false;\n        /**\n         * @private\n         */\n        this.deletedTaskDetails = [];\n        this.parent = parent;\n        this.validatedChildItems = [];\n        if (this.parent.editSettings.allowEditing && this.parent.editSettings.mode === 'Auto') {\n            this.cellEditModule = new CellEdit(this.parent);\n        }\n        if (this.parent.taskFields.dependency) {\n            this.parent.connectorLineEditModule = new ConnectorLineEdit(this.parent);\n        }\n        if (this.parent.editSettings.allowAdding || (this.parent.editSettings.allowEditing &&\n            (this.parent.editSettings.mode === 'Dialog' || this.parent.editSettings.mode === 'Auto'))) {\n            this.dialogModule = new DialogEdit(this.parent);\n        }\n        if (this.parent.editSettings.allowTaskbarEditing) {\n            this.taskbarEditModule = new TaskbarEdit(this.parent);\n        }\n        if (this.parent.editSettings.allowDeleting) {\n            var confirmDialog = createElement('div', {\n                id: this.parent.element.id + '_deleteConfirmDialog'\n            });\n            this.parent.element.appendChild(confirmDialog);\n            this.renderDeleteConfirmDialog();\n        }\n        this.parent.treeGrid.recordDoubleClick = this.recordDoubleClick.bind(this);\n        this.parent.treeGrid.editSettings.allowAdding = this.parent.editSettings.allowAdding;\n        this.parent.treeGrid.editSettings.allowDeleting = this.parent.editSettings.allowDeleting;\n        this.parent.treeGrid.editSettings.showDeleteConfirmDialog = this.parent.editSettings.showDeleteConfirmDialog;\n        this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n        this.updateDefaultColumnEditors();\n    }\n    Edit.prototype.getModuleName = function () {\n        return 'edit';\n    };\n    /**\n     * Method to update default edit params and editors for Gantt\n     *\n     * @returns {void} .\n     */\n    Edit.prototype.updateDefaultColumnEditors = function () {\n        var customEditorColumns = [this.parent.taskFields.id, this.parent.taskFields.progress, this.parent.taskFields.resourceInfo, 'taskType'];\n        for (var i = 0; i < customEditorColumns.length; i++) {\n            if (!isNullOrUndefined(customEditorColumns[i]) && customEditorColumns[i].length > 0) {\n                // eslint-disable-next-line\n                var column = this.parent.getColumnByField(customEditorColumns[i], this.parent.treeGridModule.treeGridColumns);\n                if (column) {\n                    if (column.field === this.parent.taskFields.id) {\n                        this.updateIDColumnEditParams(column);\n                    }\n                    else if (column.field === this.parent.taskFields.progress) {\n                        this.updateProgessColumnEditParams(column);\n                    }\n                    else if (column.field === this.parent.taskFields.resourceInfo) {\n                        this.updateResourceColumnEditor(column);\n                    }\n                    else if (column.field === 'taskType') {\n                        this.updateTaskTypeColumnEditor(column);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Method to update editors for id column in Gantt\n     *\n     * @param {ColumnModel} column .\n     * @returns {void} .\n     */\n    Edit.prototype.updateIDColumnEditParams = function (column) {\n        var editParam = {\n            min: 0,\n            decimals: 0,\n            validateDecimalOnType: true,\n            format: 'n0',\n            showSpinButton: false\n        };\n        this.updateEditParams(column, editParam);\n    };\n    /**\n     * Method to update edit params of default progress column\n     *\n     * @param {ColumnModel} column .\n     * @returns {void} .\n     */\n    Edit.prototype.updateProgessColumnEditParams = function (column) {\n        var editParam = {\n            min: 0,\n            decimals: 0,\n            validateDecimalOnType: true,\n            max: 100,\n            format: 'n0'\n        };\n        this.updateEditParams(column, editParam);\n    };\n    /**\n     * Assign edit params for id and progress columns\n     *\n     * @param {ColumnModel} column .\n     * @param {object} editParam .\n     * @returns {void} .\n     */\n    Edit.prototype.updateEditParams = function (column, editParam) {\n        if (isNullOrUndefined(column.edit)) {\n            column.edit = {};\n            column.edit.params = {};\n        }\n        else if (isNullOrUndefined(column.edit.params)) {\n            column.edit.params = {};\n        }\n        extend(editParam, column.edit.params);\n        column.edit.params = editParam;\n        var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n        ganttColumn.edit = column.edit;\n    };\n    /**\n     * Method to update resource column editor for default resource column\n     *\n     * @param {ColumnModel} column .\n     * @returns {void} .\n     */\n    Edit.prototype.updateResourceColumnEditor = function (column) {\n        if (this.parent.editSettings.allowEditing && isNullOrUndefined(column.edit) && this.parent.editSettings.mode === 'Auto') {\n            column.editType = 'dropdownedit';\n            column.edit = this.getResourceEditor();\n            var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n            ganttColumn.editType = 'dropdownedit';\n            ganttColumn.edit = column.edit;\n        }\n    };\n    /**\n     * Method to create resource custom editor\n     *\n     * @returns {IEditCell} .\n     */\n    Edit.prototype.getResourceEditor = function () {\n        var _this = this;\n        var resourceSettings = this.parent.resourceFields;\n        var editObject = {};\n        var editor;\n        MultiSelect.Inject(CheckBoxSelection);\n        editObject.write = function (args) {\n            _this.parent.treeGridModule.currentEditRow = {};\n            editor = new MultiSelect({\n                dataSource: new DataManager(_this.parent.resources),\n                fields: { text: resourceSettings.name, value: resourceSettings.id },\n                mode: 'CheckBox',\n                showDropDownIcon: true,\n                popupHeight: '350px',\n                delimiterChar: ',',\n                value: _this.parent.treeGridModule.getResourceIds(args.rowData)\n            });\n            editor.appendTo(args.element);\n        };\n        editObject.read = function (element) {\n            var value = element.ej2_instances[0].value;\n            var resourcesName = [];\n            if (isNullOrUndefined(value)) {\n                value = [];\n            }\n            for (var i = 0; i < value.length; i++) {\n                for (var j = 0; j < _this.parent.resources.length; j++) {\n                    if (_this.parent.resources[j][resourceSettings.id] === value[i]) {\n                        resourcesName.push(_this.parent.resources[j][resourceSettings.name]);\n                        break;\n                    }\n                }\n            }\n            _this.parent.treeGridModule.currentEditRow[_this.parent.taskFields.resourceInfo] = value;\n            return resourcesName.join(',');\n        };\n        editObject.destroy = function () {\n            if (editor) {\n                editor.destroy();\n            }\n        };\n        return editObject;\n    };\n    /**\n     * Method to update task type column editor for task type\n     *\n     * @param {ColumnModel} column .\n     * @returns {void} .\n     */\n    Edit.prototype.updateTaskTypeColumnEditor = function (column) {\n        if (this.parent.editSettings.allowEditing && isNullOrUndefined(column.edit) && this.parent.editSettings.mode === 'Auto') {\n            column.editType = 'dropdownedit';\n            column.edit = this.getTaskTypeEditor();\n            var ganttColumn = this.parent.getColumnByField(column.field, this.parent.ganttColumns);\n            ganttColumn.editType = 'dropdownedit';\n            ganttColumn.edit = column.edit;\n        }\n    };\n    /**\n     * Method to create task type custom editor\n     *\n     * @returns {IEditCell} .\n     */\n    Edit.prototype.getTaskTypeEditor = function () {\n        var _this = this;\n        var editObject = {};\n        var editor;\n        var types = [{ 'ID': 1, 'Value': 'FixedUnit' }, { 'ID': 2, 'Value': 'FixedWork' }, { 'ID': 3, 'Value': 'FixedDuration' }];\n        editObject.write = function (args) {\n            _this.parent.treeGridModule.currentEditRow = {};\n            editor = new DropDownList({\n                dataSource: new DataManager(types),\n                fields: { value: 'Value' },\n                popupHeight: '350px',\n                value: getValue('taskType', args.rowData.ganttProperties)\n            });\n            editor.appendTo(args.element);\n        };\n        editObject.read = function (element) {\n            var value = element.ej2_instances[0].value;\n            var key = 'taskType';\n            _this.parent.treeGridModule.currentEditRow[key] = value;\n            return value;\n        };\n        editObject.destroy = function () {\n            if (editor) {\n                editor.destroy();\n            }\n        };\n        return editObject;\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.reUpdateEditModules = function () {\n        var editSettings = this.parent.editSettings;\n        if (editSettings.allowEditing) {\n            if (this.parent.editModule.cellEditModule && editSettings.mode === 'Dialog') {\n                this.cellEditModule.destroy();\n                this.parent.treeGrid.recordDoubleClick = this.recordDoubleClick.bind(this);\n            }\n            else if (isNullOrUndefined(this.parent.editModule.cellEditModule) && editSettings.mode === 'Auto') {\n                this.cellEditModule = new CellEdit(this.parent);\n            }\n            if (this.parent.editModule.dialogModule && editSettings.mode === 'Auto') {\n                this.parent.treeGrid.recordDoubleClick = undefined;\n            }\n            else if (isNullOrUndefined(this.parent.editModule.dialogModule)) {\n                this.dialogModule = new DialogEdit(this.parent);\n            }\n        }\n        else {\n            if (this.cellEditModule) {\n                this.cellEditModule.destroy();\n            }\n            if (this.dialogModule) {\n                this.dialogModule.destroy();\n            }\n        }\n        if (editSettings.allowDeleting && editSettings.showDeleteConfirmDialog) {\n            if (isNullOrUndefined(this.confirmDialog)) {\n                var confirmDialog = createElement('div', {\n                    id: this.parent.element.id + '_deleteConfirmDialog'\n                });\n                this.parent.element.appendChild(confirmDialog);\n                this.renderDeleteConfirmDialog();\n            }\n        }\n        else if (!editSettings.allowDeleting || !editSettings.showDeleteConfirmDialog) {\n            if (this.confirmDialog && !this.confirmDialog.isDestroyed) {\n                this.confirmDialog.destroy();\n            }\n        }\n        if (editSettings.allowTaskbarEditing) {\n            if (isNullOrUndefined(this.parent.editModule.taskbarEditModule)) {\n                this.taskbarEditModule = new TaskbarEdit(this.parent);\n            }\n        }\n        else {\n            if (this.taskbarEditModule) {\n                this.taskbarEditModule.destroy();\n            }\n        }\n    };\n    Edit.prototype.recordDoubleClick = function (args) {\n        if (this.parent.editSettings.allowEditing && this.parent.editSettings.mode === 'Dialog') {\n            var ganttData = void 0;\n            if (args.row) {\n                var rowIndex = getValue('rowIndex', args.row);\n                ganttData = this.parent.currentViewData[rowIndex];\n            }\n            if (!isNullOrUndefined(ganttData)) {\n                this.dialogModule.openEditDialog(ganttData);\n            }\n        }\n        this.parent.ganttChartModule.recordDoubleClick(args);\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.destroy = function () {\n        if (this.cellEditModule) {\n            this.cellEditModule.destroy();\n        }\n        if (this.taskbarEditModule) {\n            this.taskbarEditModule.destroy();\n        }\n        if (this.dialogModule) {\n            this.dialogModule.destroy();\n        }\n        if (this.confirmDialog && !this.confirmDialog.isDestroyed) {\n            this.confirmDialog.destroy();\n        }\n    };\n    /**\n     * Method to update record with new values.\n     *\n     * @param {Object} data - Defines new data to update.\n     * @returns {void} .\n     */\n    Edit.prototype.updateRecordByID = function (data) {\n        if (!this.parent.readOnly) {\n            var tasks = this.parent.taskFields;\n            if (isNullOrUndefined(data) || isNullOrUndefined(data[tasks.id])) {\n                return;\n            }\n            var ganttData = this.parent.viewType === 'ResourceView' ?\n                this.parent.flatData[this.parent.getTaskIds().indexOf('T' + data[tasks.id])] : this.parent.getRecordByID(data[tasks.id]);\n            if (!isNullOrUndefined(this.parent.editModule) && ganttData) {\n                this.parent.isOnEdit = true;\n                this.validateUpdateValues(data, ganttData, true);\n                var keys = Object.keys(data);\n                if (keys.indexOf(tasks.startDate) !== -1 || keys.indexOf(tasks.endDate) !== -1 ||\n                    keys.indexOf(tasks.duration) !== -1) {\n                    this.parent.dataOperation.calculateScheduledValues(ganttData, ganttData.taskData, false);\n                }\n                this.parent.dataOperation.updateWidthLeft(ganttData);\n                if (!isUndefined(data[this.parent.taskFields.dependency]) &&\n                    data[this.parent.taskFields.dependency] !== ganttData.ganttProperties.predecessorsName) {\n                    this.parent.connectorLineEditModule.updatePredecessor(ganttData, data[this.parent.taskFields.dependency]);\n                }\n                else {\n                    var args = {};\n                    args.data = ganttData;\n                    if (this.parent.viewType === 'ResourceView') {\n                        args.action = 'methodUpdate';\n                    }\n                    this.parent.editModule.initiateUpdateAction(args);\n                }\n            }\n        }\n    };\n    /**\n     *\n     * @param {object} data .\n     * @param {IGanttData} ganttData .\n     * @param {boolean} isFromDialog .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.validateUpdateValues = function (data, ganttData, isFromDialog) {\n        var ganttObj = this.parent;\n        var tasks = ganttObj.taskFields;\n        var ganttPropByMapping = getSwapKey(ganttObj.columnMapping);\n        var scheduleFieldNames = [];\n        var isScheduleValueUpdated = false;\n        for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if ([tasks.startDate, tasks.endDate, tasks.duration].indexOf(key) !== -1) {\n                if (isNullOrUndefined(data[key]) && !ganttObj.allowUnscheduledTasks) {\n                    continue;\n                }\n                if (isFromDialog) {\n                    if (tasks.duration === key) {\n                        ganttObj.dataOperation.updateDurationValue(data[key], ganttData.ganttProperties);\n                        if (ganttData.ganttProperties.duration > 0 && ganttData.ganttProperties.isMilestone) {\n                            this.parent.setRecordValue('isMilestone', false, ganttData.ganttProperties, true);\n                        }\n                        ganttObj.dataOperation.updateMappingData(ganttData, ganttPropByMapping[key]);\n                    }\n                    else {\n                        var tempDate = typeof data[key] === 'string' ? new Date(data[key]) : data[key];\n                        ganttObj.setRecordValue(ganttPropByMapping[key], tempDate, ganttData.ganttProperties, true);\n                        ganttObj.dataOperation.updateMappingData(ganttData, ganttPropByMapping[key]);\n                    }\n                }\n                else {\n                    scheduleFieldNames.push(key);\n                    isScheduleValueUpdated = true;\n                }\n            }\n            else if (tasks.resourceInfo === key) {\n                var resourceData = ganttObj.dataOperation.setResourceInfo(data);\n                if (this.parent.viewType === 'ResourceView') {\n                    if (JSON.stringify(resourceData) !== JSON.stringify(ganttData.ganttProperties.resourceInfo)) {\n                        this.parent.editModule.dialogModule.isResourceUpdate = true;\n                        this.parent.editModule.dialogModule.previousResource = !isNullOrUndefined(ganttData.ganttProperties.resourceInfo) ? ganttData.ganttProperties.resourceInfo.slice() : [];\n                    }\n                    else {\n                        this.parent.editModule.dialogModule.isResourceUpdate = false;\n                    }\n                }\n                ganttData.ganttProperties.resourceInfo = resourceData;\n                ganttObj.dataOperation.updateMappingData(ganttData, 'resourceInfo');\n            }\n            else if (tasks.dependency === key) {\n                //..\n            }\n            else if ([tasks.progress, tasks.notes, tasks.durationUnit, tasks.expandState,\n                tasks.milestone, tasks.name, tasks.baselineStartDate,\n                tasks.baselineEndDate, tasks.id, tasks.segments].indexOf(key) !== -1) {\n                var column = ganttObj.columnByField[key];\n                /* eslint-disable-next-line */\n                var value = data[key];\n                if (!isNullOrUndefined(column) && (column.editType === 'datepickeredit' || column.editType === 'datetimepickeredit')) {\n                    value = ganttObj.dataOperation.getDateFromFormat(value);\n                }\n                var ganttPropKey = ganttPropByMapping[key];\n                if (key === tasks.id) {\n                    ganttPropKey = 'taskId';\n                }\n                else if (key === tasks.name) {\n                    ganttPropKey = 'taskName';\n                }\n                else if (key === tasks.segments) {\n                    ganttPropKey = 'segments';\n                    /* eslint-disable-next-line */\n                    if (data && !isNullOrUndefined(data[this.parent.taskFields.segments]) && data[this.parent.taskFields.segments].length > 0) {\n                        var totDuration = 0;\n                        for (var i = 0; i < ganttData.ganttProperties.segments.length; i++) {\n                            totDuration = totDuration + ganttData.ganttProperties.segments[i].duration;\n                        }\n                        var sdate = ganttData.ganttProperties.startDate;\n                        /* eslint-disable-next-line */\n                        var edate = this.parent.dataOperation.getEndDate(sdate, totDuration, ganttData.ganttProperties.durationUnit, ganttData.ganttProperties, false);\n                        ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(edate), ganttData.ganttProperties, true);\n                    }\n                }\n                if (!isNullOrUndefined(ganttPropKey)) {\n                    ganttObj.setRecordValue(ganttPropKey, value, ganttData.ganttProperties, true);\n                }\n                if ((key === tasks.baselineStartDate || key === tasks.baselineEndDate) &&\n                    (ganttData.ganttProperties.baselineStartDate && ganttData.ganttProperties.baselineEndDate)) {\n                    ganttObj.setRecordValue('baselineLeft', ganttObj.dataOperation.calculateBaselineLeft(ganttData.ganttProperties), ganttData.ganttProperties, true);\n                    ganttObj.setRecordValue('baselineWidth', ganttObj.dataOperation.calculateBaselineWidth(ganttData.ganttProperties), ganttData.ganttProperties, true);\n                }\n                ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n                /* eslint-disable-next-line */\n                if (key === tasks.segments && data && !isNullOrUndefined(data[this.parent.taskFields.segments]) && data[this.parent.taskFields.segments].length > 0) {\n                    ganttObj.dataOperation.setSegmentsInfo(ganttData, true);\n                }\n                ganttObj.setRecordValue(key, value, ganttData);\n            }\n            else if (tasks.indicators === key) {\n                var value = data[key];\n                ganttObj.setRecordValue('indicators', value, ganttData.ganttProperties, true);\n                ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n                ganttObj.setRecordValue(key, value, ganttData);\n            }\n            else if (tasks.work === key) {\n                ganttObj.setRecordValue('work', data[key], ganttData.ganttProperties, true);\n                this.parent.dataOperation.updateMappingData(ganttData, 'work');\n                this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n                this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n            }\n            else if (key === 'taskType') {\n                ganttObj.setRecordValue('taskType', data[key], ganttData.ganttProperties, true);\n                //this.parent.dataOperation.updateMappingData(ganttData, 'taskType');\n            }\n            else if (ganttObj.customColumns.indexOf(key) !== -1) {\n                var column = ganttObj.columnByField[key];\n                /* eslint-disable-next-line */\n                var value = data[key];\n                if (isNullOrUndefined(column.edit)) {\n                    if (column.editType === 'datepickeredit' || column.editType === 'datetimepickeredit') {\n                        value = ganttObj.dataOperation.getDateFromFormat(value);\n                    }\n                }\n                ganttObj.setRecordValue('taskData.' + key, value, ganttData);\n                ganttObj.setRecordValue(key, value, ganttData);\n            }\n            else if (tasks.manual === key) {\n                ganttObj.setRecordValue('isAutoSchedule', !data[key], ganttData.ganttProperties, true);\n                this.parent.setRecordValue(key, data[key], ganttData);\n                this.updateTaskScheduleModes(ganttData);\n            }\n        }\n        if (isScheduleValueUpdated) {\n            this.validateScheduleValues(scheduleFieldNames, ganttData, data);\n        }\n    };\n    /**\n     * To update duration, work, resource unit\n     *\n     * @param {IGanttData} currentData .\n     * @param {string} column .\n     * @returns {void} .\n     */\n    Edit.prototype.updateResourceRelatedFields = function (currentData, column) {\n        var ganttProp = currentData.ganttProperties;\n        var taskType = ganttProp.taskType;\n        var isEffectDriven;\n        var isAutoSchedule = ganttProp.isAutoSchedule;\n        if (!isNullOrUndefined(ganttProp.resourceInfo)) {\n            if (ganttProp.work > 0 || column === 'work') {\n                switch (taskType) {\n                    case 'FixedUnit':\n                        if (ganttProp.resourceInfo.length === 0) {\n                            return;\n                        }\n                        else if (isAutoSchedule && ganttProp.resourceInfo.length &&\n                            (column === 'work' || (column === 'resource'))) {\n                            this.parent.dataOperation.updateDurationWithWork(currentData);\n                        }\n                        else if (!isAutoSchedule && column === 'work') {\n                            this.parent.dataOperation.updateUnitWithWork(currentData);\n                        }\n                        else {\n                            this.parent.dataOperation.updateWorkWithDuration(currentData);\n                        }\n                        break;\n                    case 'FixedWork':\n                        if (ganttProp.resourceInfo.length === 0) {\n                            return;\n                        }\n                        else if (isAutoSchedule) {\n                            if (column === 'duration' || column === 'endDate') {\n                                this.parent.dataOperation.updateUnitWithWork(currentData);\n                                if (ganttProp.duration === 0) {\n                                    this.parent.setRecordValue('work', 0, ganttProp, true);\n                                    if (!isNullOrUndefined(this.parent.taskFields.work)) {\n                                        this.parent.dataOperation.updateMappingData(currentData, 'work');\n                                    }\n                                }\n                            }\n                            else {\n                                this.parent.dataOperation.updateDurationWithWork(currentData);\n                            }\n                        }\n                        else {\n                            if (column === 'work') {\n                                this.parent.dataOperation.updateUnitWithWork(currentData);\n                            }\n                            else {\n                                this.parent.dataOperation.updateWorkWithDuration(currentData);\n                            }\n                        }\n                        break;\n                    case 'FixedDuration':\n                        if (ganttProp.resourceInfo.length && (column === 'work' || (isAutoSchedule &&\n                            isEffectDriven && (column === 'resource')))) {\n                            this.parent.dataOperation.updateUnitWithWork(currentData);\n                        }\n                        else {\n                            this.parent.dataOperation.updateWorkWithDuration(currentData);\n                        }\n                        break;\n                }\n            }\n            else {\n                this.parent.dataOperation.updateWorkWithDuration(currentData);\n            }\n        }\n    };\n    Edit.prototype.validateScheduleValues = function (fieldNames, ganttData, data) {\n        var ganttObj = this.parent;\n        if (fieldNames.length > 2) {\n            ganttObj.dataOperation.calculateScheduledValues(ganttData, data, false);\n        }\n        else if (fieldNames.length > 1) {\n            this.validateScheduleByTwoValues(data, fieldNames, ganttData);\n        }\n        else {\n            this.dialogModule.validateScheduleValuesByCurrentField(fieldNames[0], data[fieldNames[0]], ganttData);\n        }\n    };\n    Edit.prototype.validateScheduleByTwoValues = function (data, fieldNames, ganttData) {\n        var ganttObj = this.parent;\n        var startDate;\n        var endDate;\n        var duration;\n        var tasks = ganttObj.taskFields;\n        var ganttProp = ganttData.ganttProperties;\n        var isUnscheduledTask = ganttObj.allowUnscheduledTasks;\n        if (fieldNames.indexOf(tasks.startDate) !== -1) {\n            startDate = data[tasks.startDate];\n        }\n        if (fieldNames.indexOf(tasks.endDate) !== -1) {\n            endDate = data[tasks.endDate];\n        }\n        if (fieldNames.indexOf(tasks.duration) !== -1) {\n            duration = data[tasks.duration];\n        }\n        if (startDate && endDate || (isUnscheduledTask && (fieldNames.indexOf(tasks.startDate) !== -1) &&\n            (fieldNames.indexOf(tasks.endDate) !== -1))) {\n            ganttObj.setRecordValue('startDate', ganttObj.dataOperation.getDateFromFormat(startDate), ganttProp, true);\n            ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(endDate), ganttProp, true);\n            ganttObj.dataOperation.calculateDuration(ganttData);\n        }\n        else if (endDate && duration || (isUnscheduledTask &&\n            (fieldNames.indexOf(tasks.endDate) !== -1) && (fieldNames.indexOf(tasks.duration) !== -1))) {\n            ganttObj.setRecordValue('endDate', ganttObj.dataOperation.getDateFromFormat(endDate), ganttProp, true);\n            ganttObj.dataOperation.updateDurationValue(duration, ganttProp);\n        }\n        else if (startDate && duration || (isUnscheduledTask && (fieldNames.indexOf(tasks.startDate) !== -1)\n            && (fieldNames.indexOf(tasks.duration) !== -1))) {\n            ganttObj.setRecordValue('startDate', ganttObj.dataOperation.getDateFromFormat(startDate), ganttProp, true);\n            ganttObj.dataOperation.updateDurationValue(duration, ganttProp);\n        }\n    };\n    Edit.prototype.isTaskbarMoved = function (data) {\n        var isMoved = false;\n        var taskData = data.ganttProperties;\n        var prevData = this.parent.previousRecords &&\n            this.parent.previousRecords[data.uniqueID];\n        if (prevData && prevData.ganttProperties) {\n            var prevStart = getValue('ganttProperties.startDate', prevData);\n            var prevEnd = getValue('ganttProperties.endDate', prevData);\n            var prevDuration = getValue('ganttProperties.duration', prevData);\n            var prevDurationUnit = getValue('ganttProperties.durationUnit', prevData);\n            var keys = Object.keys(prevData.ganttProperties);\n            if (keys.indexOf('startDate') !== -1 || keys.indexOf('endDate') !== -1 ||\n                keys.indexOf('duration') !== -1 || keys.indexOf('durationUnit') !== -1) {\n                if ((isNullOrUndefined(prevStart) && !isNullOrUndefined(taskData.startDate)) ||\n                    (isNullOrUndefined(prevEnd) && !isNullOrUndefined(taskData.endDate)) ||\n                    (isNullOrUndefined(taskData.startDate) && !isNullOrUndefined(prevStart)) ||\n                    (isNullOrUndefined(taskData.endDate) && !isNullOrUndefined(prevEnd)) ||\n                    (prevStart && prevStart.getTime() !== taskData.startDate.getTime())\n                    || (prevEnd && prevEnd.getTime() !== taskData.endDate.getTime())\n                    || (!isNullOrUndefined(prevDuration) && prevDuration !== taskData.duration)\n                    || (!isNullOrUndefined(prevDuration) && prevDuration === taskData.duration &&\n                        prevDurationUnit !== taskData.durationUnit)) {\n                    isMoved = true;\n                }\n            }\n        }\n        return isMoved;\n    };\n    Edit.prototype.isPredecessorUpdated = function (data) {\n        var isPredecessorUpdated = false;\n        var prevData = this.parent.previousRecords[data.uniqueID];\n        // eslint-disable-next-line\n        if (prevData && prevData.ganttProperties && prevData.ganttProperties.hasOwnProperty('predecessor')) {\n            if (data.ganttProperties.predecessorsName !== prevData.ganttProperties.predecessorsName) {\n                isPredecessorUpdated = true;\n            }\n            else {\n                this.parent.setRecordValue('predecessor', prevData.ganttProperties.predecessor, data.ganttProperties, true);\n            }\n        }\n        return isPredecessorUpdated;\n    };\n    /**\n     * Method to check need to open predecessor validate dialog\n     *\n     * @param {IGanttData} data .\n     * @returns {boolean} .\n     */\n    Edit.prototype.isCheckPredecessor = function (data) {\n        var isValidatePredecessor = false;\n        var prevData = this.parent.previousRecords[data.uniqueID];\n        if (prevData && this.parent.taskFields.dependency && this.parent.isInPredecessorValidation &&\n            this.parent.predecessorModule.getValidPredecessor(data).length > 0) {\n            if (this.isTaskbarMoved(data)) {\n                isValidatePredecessor = true;\n            }\n        }\n        return isValidatePredecessor;\n    };\n    /**\n     * Method to copy the ganttProperties values\n     *\n     * @param {IGanttData} data .\n     * @param {IGanttData} updateData .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateGanttProperties = function (data, updateData) {\n        var skipProperty = ['taskId', 'uniqueID', 'rowUniqueID', 'parentId'];\n        Object.keys(data.ganttProperties).forEach(function (property) {\n            if (skipProperty.indexOf(property) === -1) {\n                updateData.ganttProperties[property] = data.ganttProperties[property];\n            }\n        });\n    };\n    /**\n     * Method to update all dependent record on edit action\n     *\n     * @param {ITaskAddedEventArgs} args .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.initiateUpdateAction = function (args) {\n        var isValidatePredecessor = this.isCheckPredecessor(args.data);\n        this.taskbarMoved = this.isTaskbarMoved(args.data);\n        this.predecessorUpdated = this.isPredecessorUpdated(args.data);\n        if (this.predecessorUpdated) {\n            this.parent.isConnectorLineUpdate = true;\n            this.parent.connectorLineEditModule.addRemovePredecessor(args.data);\n        }\n        var validateObject = {};\n        if (isValidatePredecessor) {\n            validateObject = this.parent.connectorLineEditModule.validateTypes(args.data);\n            this.parent.isConnectorLineUpdate = true;\n            if (!isNullOrUndefined(getValue('violationType', validateObject))) {\n                var newArgs = this.validateTaskEvent(args);\n                if (newArgs.validateMode.preserveLinkWithEditing === false &&\n                    newArgs.validateMode.removeLink === false &&\n                    newArgs.validateMode.respectLink === false) {\n                    this.parent.connectorLineEditModule.openValidationDialog(validateObject);\n                }\n                else {\n                    this.parent.connectorLineEditModule.applyPredecessorOption();\n                }\n            }\n            else {\n                this.updateEditedTask(args);\n            }\n        }\n        else {\n            if (this.taskbarMoved) {\n                this.parent.isConnectorLineUpdate = true;\n            }\n            this.updateEditedTask(args);\n        }\n    };\n    /**\n     *\n     * @param {ITaskbarEditedEventArgs} editedEventArgs method to trigger validate predecessor link by dialog\n     * @returns {IValidateArgs} .\n     */\n    Edit.prototype.validateTaskEvent = function (editedEventArgs) {\n        var newArgs = {};\n        this.resetValidateArgs();\n        this.parent.currentEditedArgs = newArgs;\n        newArgs.cancel = false;\n        newArgs.data = editedEventArgs.data;\n        newArgs.requestType = 'validateLinkedTask';\n        newArgs.validateMode = this.parent.dialogValidateMode;\n        newArgs.editEventArgs = editedEventArgs;\n        this.parent.actionBeginTask(newArgs);\n        return newArgs;\n    };\n    Edit.prototype.resetValidateArgs = function () {\n        this.parent.dialogValidateMode.preserveLinkWithEditing = true;\n        this.parent.dialogValidateMode.removeLink = false;\n        this.parent.dialogValidateMode.respectLink = false;\n    };\n    /**\n     *\n     * @param {ITaskAddedEventArgs} args - Edited event args like taskbar editing, dialog editing, cell editing\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateEditedTask = function (args) {\n        var ganttRecord = args.data;\n        this.updateParentChildRecord(ganttRecord);\n        if (this.parent.isConnectorLineUpdate) {\n            /* validating predecessor for updated child items */\n            for (var i = 0; i < this.validatedChildItems.length; i++) {\n                var child = this.validatedChildItems[i];\n                if (child.ganttProperties.predecessor && child.ganttProperties.predecessor.length > 0) {\n                    this.parent.editedTaskBarItem = child;\n                    this.parent.predecessorModule.validatePredecessor(child, [], '');\n                }\n            }\n            /** validating predecessor for current edited records */\n            if (ganttRecord.ganttProperties.predecessor) {\n                this.parent.isMileStoneEdited = ganttRecord.ganttProperties.isMilestone;\n                if (this.taskbarMoved) {\n                    this.parent.editedTaskBarItem = ganttRecord;\n                }\n                this.parent.predecessorModule.validatePredecessor(ganttRecord, [], '');\n            }\n            this.updateParentItemOnEditing();\n        }\n        /** Update parent up-to zeroth level */\n        if (ganttRecord.parentItem || this.parent.taskMode !== 'Auto') {\n            this.parent.dataOperation.updateParentItems(ganttRecord, true);\n        }\n        this.initiateSaveAction(args);\n    };\n    Edit.prototype.updateParentItemOnEditing = function () {\n        var childRecord = getValue('parentRecord', this.parent.predecessorModule);\n        for (var i = 0; i < childRecord.length; i++) {\n            this.parent.dataOperation.updateParentItems(childRecord[i]);\n        }\n        setValue('parentRecord', [], this.parent.predecessorModule);\n        setValue('parentIds', [], this.parent.predecessorModule);\n    };\n    /**\n     * To update parent records while perform drag action.\n     *\n     * @param {IGanttData} data .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateParentChildRecord = function (data) {\n        var ganttRecord = data;\n        if (ganttRecord.hasChildRecords && this.taskbarMoved && this.parent.taskMode === 'Auto') {\n            this.updateChildItems(ganttRecord);\n        }\n    };\n    /**\n     * To update records while changing schedule mode.\n     *\n     * @param {IGanttData} data .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateTaskScheduleModes = function (data) {\n        var currentValue = data[this.parent.taskFields.startDate];\n        var ganttProp = data.ganttProperties;\n        if (data.hasChildRecords && ganttProp.isAutoSchedule) {\n            this.parent.setRecordValue('startDate', ganttProp.autoStartDate, ganttProp, true);\n            this.parent.setRecordValue('endDate', ganttProp.autoEndDate, ganttProp, true);\n            this.parent.setRecordValue('width', this.parent.dataOperation.calculateWidth(data, true), ganttProp, true);\n            this.parent.setRecordValue('left', this.parent.dataOperation.calculateLeft(ganttProp, true), ganttProp, true);\n            this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(ganttProp.width, ganttProp.progress), ganttProp, true);\n            this.parent.dataOperation.calculateDuration(data);\n        }\n        else if (data.hasChildRecords && !ganttProp.isAutoSchedule) {\n            this.parent.dataOperation.updateWidthLeft(data);\n            this.parent.dataOperation.calculateDuration(data);\n            this.parent.setRecordValue('autoStartDate', ganttProp.startDate, ganttProp, true);\n            this.parent.setRecordValue('autoEndDate', ganttProp.endDate, ganttProp, true);\n            this.parent.setRecordValue('autoDuration', this.parent.dataOperation.calculateAutoDuration(data), ganttProp, true);\n            this.parent.dataOperation.updateAutoWidthLeft(data);\n        }\n        else {\n            var startDate = this.parent.dateValidationModule.checkStartDate(currentValue, data.ganttProperties);\n            this.parent.setRecordValue('startDate', startDate, data.ganttProperties, true);\n            this.parent.dataOperation.updateMappingData(data, 'startDate');\n            this.parent.dateValidationModule.calculateEndDate(data);\n            this.parent.setRecordValue('taskData.' + this.parent.taskFields.manual, data[this.parent.taskFields.manual], data);\n            this.parent.dataOperation.updateWidthLeft(data);\n        }\n    };\n    /**\n     *\n     * @param {IGanttData} data .\n     * @param {Date} newStartDate .\n     * @returns {void} .\n     */\n    Edit.prototype.calculateDateByRoundOffDuration = function (data, newStartDate) {\n        var ganttRecord = data;\n        var taskData = ganttRecord.ganttProperties;\n        var projectStartDate = new Date(newStartDate.getTime());\n        if (!isNullOrUndefined(taskData.endDate) && isNullOrUndefined(taskData.startDate)) {\n            var endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, taskData, null);\n            this.parent.setRecordValue('endDate', this.parent.dateValidationModule.checkEndDate(endDate, ganttRecord.ganttProperties), taskData, true);\n        }\n        else {\n            this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, taskData, false), taskData, true);\n            if (!isNullOrUndefined(taskData.duration)) {\n                this.parent.dateValidationModule.calculateEndDate(ganttRecord);\n            }\n        }\n        this.parent.dataOperation.updateWidthLeft(data);\n        this.parent.dataOperation.updateTaskData(ganttRecord);\n    };\n    /**\n     * To update progress value of parent tasks\n     *\n     * @param {IParent} cloneParent .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateParentProgress = function (cloneParent) {\n        var parentProgress = 0;\n        var parent = this.parent.getParentTask(cloneParent);\n        var childRecords = parent.childRecords;\n        var childCount = childRecords ? childRecords.length : 0;\n        var totalProgress = 0;\n        var milesStoneCount = 0;\n        var taskCount = 0;\n        var totalDuration = 0;\n        var progressValues = {};\n        if (childRecords) {\n            for (var i = 0; i < childCount; i++) {\n                if ((!childRecords[i].ganttProperties.isMilestone || childRecords[i].hasChildRecords) &&\n                    isScheduledTask(childRecords[i].ganttProperties)) {\n                    progressValues = this.parent.dataOperation.getParentProgress(childRecords[i]);\n                    totalProgress += getValue('totalProgress', progressValues);\n                    totalDuration += getValue('totalDuration', progressValues);\n                }\n                else {\n                    milesStoneCount += 1;\n                }\n            }\n            taskCount = childCount - milesStoneCount;\n            parentProgress = taskCount > 0 ? Math.round(totalProgress / totalDuration) : 0;\n            if (isNaN(parentProgress)) {\n                parentProgress = 0;\n            }\n            this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(parent.ganttProperties.isAutoSchedule ? parent.ganttProperties.width : parent.ganttProperties.autoWidth, parentProgress), parent.ganttProperties, true);\n            this.parent.setRecordValue('progress', Math.floor(parentProgress), parent.ganttProperties, true);\n            this.parent.setRecordValue('totalProgress', totalProgress, parent.ganttProperties, true);\n            this.parent.setRecordValue('totalDuration', totalDuration, parent.ganttProperties, true);\n        }\n        this.parent.dataOperation.updateTaskData(parent);\n        if (parent.parentItem) {\n            this.updateParentProgress(parent.parentItem);\n        }\n    };\n    /**\n     * Method to revert cell edit action\n     *\n     * @param {object} args .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    Edit.prototype.revertCellEdit = function (args) {\n        this.parent.editModule.reUpdatePreviousRecords(false, true);\n        this.resetEditProperties();\n    };\n    /**\n     * @param {boolean} isRefreshChart .\n     * @param {boolean} isRefreshGrid .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.reUpdatePreviousRecords = function (isRefreshChart, isRefreshGrid) {\n        var collection = this.parent.previousRecords;\n        var keys = Object.keys(collection);\n        for (var i = 0; i < keys.length; i++) {\n            var uniqueId = keys[i];\n            var prevTask = collection[uniqueId];\n            var originalData = this.parent.getTaskByUniqueID(uniqueId);\n            this.copyTaskData(originalData.taskData, prevTask.taskData);\n            delete prevTask.taskData;\n            this.copyTaskData(originalData.ganttProperties, prevTask.ganttProperties);\n            delete prevTask.ganttProperties;\n            this.copyTaskData(originalData, prevTask);\n            var rowIndex = this.parent.currentViewData.indexOf(originalData);\n            if (isRefreshChart) {\n                this.parent.chartRowsModule.refreshRow(rowIndex);\n            }\n            if (isRefreshGrid) {\n                var dataId = this.parent.viewType === 'ProjectView' ? originalData.ganttProperties.taskId : originalData.ganttProperties.rowUniqueID;\n                this.parent.treeGrid.grid.setRowData(dataId, originalData);\n                var row = this.parent.treeGrid.grid.getRowObjectFromUID(this.parent.treeGrid.grid.getDataRows()[rowIndex].getAttribute('data-uid'));\n                row.data = originalData;\n            }\n        }\n    };\n    /**\n     * Copy previous task data value to edited task data\n     *\n     * @param {object} existing .\n     * @param {object} newValue .\n     * @returns {void} .\n     */\n    Edit.prototype.copyTaskData = function (existing, newValue) {\n        if (!isNullOrUndefined(newValue)) {\n            extend(existing, newValue);\n        }\n    };\n    /**\n     * To update schedule date on editing.\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    Edit.prototype.updateScheduleDatesOnEditing = function (args) {\n        //..\n    };\n    /**\n     *\n     * @param {IGanttData} ganttRecord .\n     * @returns {void} .\n     */\n    Edit.prototype.updateChildItems = function (ganttRecord) {\n        var previousData = this.parent.previousRecords[ganttRecord.uniqueID];\n        var previousStartDate;\n        if (isNullOrUndefined(previousData) ||\n            (isNullOrUndefined(previousData) && !isNullOrUndefined(previousData.ganttProperties))) {\n            previousStartDate = new Date(ganttRecord.ganttProperties.startDate.getTime());\n        }\n        else {\n            previousStartDate = new Date(previousData.ganttProperties.startDate.getTime());\n        }\n        var currentStartDate = ganttRecord.ganttProperties.startDate;\n        var childRecords = [];\n        var validStartDate;\n        var validEndDate;\n        var calcEndDate;\n        var isRightMove;\n        var durationDiff;\n        this.getUpdatableChildRecords(ganttRecord, childRecords);\n        if (childRecords.length === 0) {\n            return;\n        }\n        if (previousStartDate.getTime() > currentStartDate.getTime()) {\n            validStartDate = this.parent.dateValidationModule.checkStartDate(currentStartDate);\n            validEndDate = this.parent.dateValidationModule.checkEndDate(previousStartDate, ganttRecord.ganttProperties);\n            isRightMove = false;\n        }\n        else {\n            validStartDate = this.parent.dateValidationModule.checkStartDate(previousStartDate);\n            validEndDate = this.parent.dateValidationModule.checkEndDate(currentStartDate, ganttRecord.ganttProperties);\n            isRightMove = true;\n        }\n        //Get Duration\n        if (validStartDate.getTime() >= validEndDate.getTime()) {\n            durationDiff = 0;\n        }\n        else {\n            durationDiff = this.parent.dateValidationModule.getDuration(validStartDate, validEndDate, 'minute', true, false);\n        }\n        for (var i = 0; i < childRecords.length; i++) {\n            if (childRecords[i].ganttProperties.isAutoSchedule) {\n                if (durationDiff > 0) {\n                    var startDate = isScheduledTask(childRecords[i].ganttProperties) ?\n                        childRecords[i].ganttProperties.startDate : childRecords[i].ganttProperties.startDate ?\n                        childRecords[i].ganttProperties.startDate : childRecords[i].ganttProperties.endDate ?\n                        childRecords[i].ganttProperties.endDate : new Date(previousStartDate.toString());\n                    if (isRightMove) {\n                        calcEndDate = this.parent.dateValidationModule.getEndDate(this.parent.dateValidationModule.checkStartDate(startDate, childRecords[i].ganttProperties, childRecords[i].ganttProperties.isMilestone), durationDiff, 'minute', childRecords[i].ganttProperties, false);\n                    }\n                    else {\n                        calcEndDate = this.parent.dateValidationModule.getStartDate(this.parent.dateValidationModule.checkEndDate(startDate, childRecords[i].ganttProperties), durationDiff, 'minute', childRecords[i].ganttProperties);\n                    }\n                    this.calculateDateByRoundOffDuration(childRecords[i], calcEndDate);\n                    if (this.parent.isOnEdit && this.validatedChildItems.indexOf(childRecords[i]) === -1) {\n                        this.validatedChildItems.push(childRecords[i]);\n                    }\n                }\n                else if (isNullOrUndefined(previousData)) {\n                    calcEndDate = previousStartDate;\n                    this.calculateDateByRoundOffDuration(childRecords[i], calcEndDate);\n                    if (this.parent.isOnEdit && this.validatedChildItems.indexOf(childRecords[i]) === -1) {\n                        this.validatedChildItems.push(childRecords[i]);\n                    }\n                }\n            }\n        }\n        if (childRecords.length) {\n            this.parent.dataOperation.updateParentItems(ganttRecord, true);\n        }\n    };\n    /**\n     * To get updated child records.\n     *\n     * @param {IGanttData} parentRecord .\n     * @param {IGanttData} childLists .\n     * @returns {void} .\n     */\n    Edit.prototype.getUpdatableChildRecords = function (parentRecord, childLists) {\n        var childRecords = parentRecord.childRecords;\n        for (var i = 0; i < childRecords.length; i++) {\n            if (childRecords[i].ganttProperties.isAutoSchedule) {\n                childLists.push(childRecords[i]);\n                if (childRecords[i].hasChildRecords) {\n                    this.getUpdatableChildRecords(childRecords[i], childLists);\n                }\n            }\n        }\n    };\n    /**\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.initiateSaveAction = function (args) {\n        var _this = this;\n        this.parent.showSpinner();\n        var eventArgs = {};\n        eventArgs.requestType = 'beforeSave';\n        eventArgs.data = args.data;\n        eventArgs.cancel = false;\n        eventArgs.modifiedRecords = this.parent.editedRecords;\n        if (!isNullOrUndefined(args.target)) {\n            eventArgs.target = args.target;\n        }\n        eventArgs.modifiedTaskData = getTaskData(this.parent.editedRecords, true);\n        if (args.action && args.action === 'DrawConnectorLine') {\n            eventArgs.action = 'DrawConnectorLine';\n        }\n        this.parent.trigger('actionBegin', eventArgs, function (eventArg) {\n            if (eventArg.cancel) {\n                _this.reUpdatePreviousRecords();\n                _this.parent.chartRowsModule.refreshRecords([args.data]);\n                _this.resetEditProperties(eventArgs);\n                // Trigger action complete event with save canceled request type\n            }\n            else {\n                eventArg.modifiedTaskData = getTaskData(eventArg.modifiedRecords, null, null, _this.parent);\n                if (isRemoteData(_this.parent.dataSource)) {\n                    var data = _this.parent.dataSource;\n                    var updatedData = {\n                        changedRecords: eventArg.modifiedTaskData\n                    };\n                    var query = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n                    var crud = null;\n                    var dataAdaptor = data.adaptor;\n                    if (!(dataAdaptor instanceof WebApiAdaptor && dataAdaptor instanceof ODataAdaptor) || data.dataSource.batchUrl) {\n                        crud = data.saveChanges(updatedData, _this.parent.taskFields.id, null, query);\n                    }\n                    else {\n                        var changedRecords = 'changedRecords';\n                        crud = data.update(_this.parent.taskFields.id, updatedData[changedRecords], null, query);\n                    }\n                    crud.then(function (e) { return _this.dmSuccess(e, args); })\n                        .catch(function (e) { return _this.dmFailure(e, args); });\n                }\n                else {\n                    _this.saveSuccess(args);\n                }\n            }\n        });\n    };\n    Edit.prototype.dmSuccess = function (e, args) {\n        this.saveSuccess(args);\n    };\n    Edit.prototype.dmFailure = function (e, args) {\n        if (this.deletedTaskDetails.length) {\n            var deleteRecords = this.deletedTaskDetails;\n            for (var d = 0; d < deleteRecords.length; d++) {\n                deleteRecords[d].isDelete = false;\n            }\n            this.deletedTaskDetails = [];\n        }\n        this.reUpdatePreviousRecords(true, true);\n        this.resetEditProperties();\n        this.parent.trigger('actionFailure', { error: e });\n    };\n    Edit.prototype.updateSharedTask = function (data) {\n        var ids = data.ganttProperties.sharedTaskUniqueIds;\n        for (var i = 0; i < ids.length; i++) {\n            var editRecord = this.parent.flatData[this.parent.ids.indexOf(ids[i].toString())];\n            if (editRecord.uniqueID !== data.uniqueID) {\n                this.updateGanttProperties(data, editRecord);\n                this.parent.setRecordValue('taskData', data.taskData, editRecord, true);\n                this.parent.dataOperation.updateTaskData(editRecord);\n                this.parent.dataOperation.updateResourceName(editRecord);\n                if (!isNullOrUndefined(editRecord.parentItem)) {\n                    this.parent.dataOperation.updateParentItems(editRecord.parentItem);\n                }\n            }\n        }\n    };\n    /**\n     * Method for save action success for local and remote data\n     *\n     * @param {ITaskAddedEventArgs} args .\n     * @returns {void} .\n     */\n    Edit.prototype.saveSuccess = function (args) {\n        var eventArgs = {};\n        if (this.parent.timelineSettings.updateTimescaleView) {\n            var tempArray = this.parent.editedRecords;\n            this.parent.timelineModule.updateTimeLineOnEditing([tempArray], args.action);\n        }\n        if (this.parent.viewType === 'ResourceView') {\n            if (args.action === 'TaskbarEditing') {\n                this.updateSharedTask(args.data);\n            }\n            else if (args.action === 'DialogEditing' || args.action === 'CellEditing' || args.action === 'methodUpdate') {\n                if (this.parent.editModule.dialogModule.isResourceUpdate) {\n                    /* eslint-disable-next-line */\n                    this.updateResoures(this.parent.editModule.dialogModule.previousResource, args.data.ganttProperties.resourceInfo, args.data);\n                    this.updateSharedTask(args.data);\n                    this.isTreeGridRefresh = true;\n                }\n                else {\n                    this.updateSharedTask(args.data);\n                }\n            }\n            // method to update the edited parent records\n            for (var k = 0; k < this.updateParentRecords.length; k++) {\n                this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n            }\n            this.updateParentRecords = [];\n            this.parent.editModule.dialogModule.isResourceUpdate = false;\n            this.parent.editModule.dialogModule.previousResource = [];\n        }\n        if (!this.isTreeGridRefresh) {\n            this.parent.chartRowsModule.refreshRecords(this.parent.editedRecords);\n            if (this.parent.isConnectorLineUpdate && !isNullOrUndefined(this.parent.connectorLineEditModule)) {\n                this.parent.updatedConnectorLineCollection = [];\n                this.parent.connectorLineIds = [];\n                this.parent.connectorLineEditModule.refreshEditedRecordConnectorLine(this.parent.editedRecords);\n                this.updateScheduleDatesOnEditing(args);\n            }\n        }\n        if (!this.parent.editSettings.allowTaskbarEditing || (this.parent.editSettings.allowTaskbarEditing &&\n            !this.taskbarEditModule.dependencyCancel)) {\n            eventArgs.requestType = 'save';\n            eventArgs.data = args.data;\n            eventArgs.modifiedRecords = this.parent.editedRecords;\n            eventArgs.modifiedTaskData = getTaskData(this.parent.editedRecords, null, null, this.parent);\n            if (!isNullOrUndefined(args.action)) {\n                setValue('action', args.action, eventArgs);\n            }\n            if (args.action === 'TaskbarEditing') {\n                eventArgs.taskBarEditAction = args.taskBarEditAction;\n            }\n            this.endEditAction(args);\n            this.parent.trigger('actionComplete', eventArgs);\n        }\n        else {\n            this.taskbarEditModule.dependencyCancel = false;\n            this.resetEditProperties();\n        }\n        if (this.parent.viewType === 'ResourceView' && this.isTreeGridRefresh) {\n            this.parent.treeGrid.parentData = [];\n            this.parent.treeGrid.refresh();\n            this.isTreeGridRefresh = false;\n        }\n    };\n    Edit.prototype.updateResoures = function (prevResource, currentResource, updateRecord) {\n        var flatRecords = this.parent.flatData;\n        var currentLength = currentResource ? currentResource.length : 0;\n        var previousLength = prevResource ? prevResource.length : 0;\n        if (currentLength === 0 && previousLength === 0) {\n            return;\n        }\n        for (var index = 0; index < currentLength; index++) {\n            var recordIndex = [];\n            var resourceID = parseInt(currentResource[index][this.parent.resourceFields.id], 10);\n            for (var i = 0; i < prevResource.length; i++) {\n                if (parseInt(prevResource[i][this.parent.resourceFields.id], 10) === resourceID) {\n                    recordIndex.push(i);\n                    break;\n                }\n            }\n            if (recordIndex.length === 0) {\n                var parentRecord = flatRecords[this.parent.getTaskIds().indexOf('R' + resourceID)];\n                if (parentRecord) {\n                    this.addNewRecord(updateRecord, parentRecord);\n                }\n            }\n            else {\n                prevResource.splice(parseInt(recordIndex[0].toString(), 10), 1);\n            }\n        }\n        var prevLength = prevResource ? prevResource.length : 0;\n        for (var index = 0; index < prevLength; index++) {\n            var taskID = updateRecord.ganttProperties.taskId;\n            var resourceID = prevResource[index][this.parent.resourceFields.id];\n            var record = flatRecords[this.parent.getTaskIds().indexOf('R' + resourceID)];\n            for (var j = 0; j < record.childRecords.length; j++) {\n                if (record.childRecords[j].ganttProperties.taskId === taskID) {\n                    this.removeChildRecord(record.childRecords[j]);\n                }\n            }\n        }\n        if (currentLength > 0) {\n            var parentTask = this.parent.getParentTask(updateRecord.parentItem);\n            if (parentTask) {\n                if (parentTask.ganttProperties.taskName === this.parent.localeObj.getConstant('unassignedTask')) {\n                    this.removeChildRecord(updateRecord);\n                }\n            }\n        }\n        //Assign resource to unassigned task\n        if (currentLength === 0) {\n            this.checkWithUnassignedTask(updateRecord);\n        }\n    };\n    /**\n     * @param {IGanttData} updateRecord .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.checkWithUnassignedTask = function (updateRecord) {\n        var unassignedTasks = null;\n        // Block for check the unassigned task.\n        for (var i = 0; i < this.parent.flatData.length; i++) {\n            if (this.parent.flatData[i].ganttProperties.taskName === this.parent.localeObj.getConstant('unassignedTask')) {\n                unassignedTasks = this.parent.flatData[i];\n            }\n        }\n        if (!isNullOrUndefined(unassignedTasks)) {\n            this.addNewRecord(updateRecord, unassignedTasks);\n        }\n        else {\n            // Block for create the unassigned task.\n            var unassignTaskObj = {};\n            unassignTaskObj[this.parent.taskFields.id] = 0;\n            unassignTaskObj[this.parent.taskFields.name] = this.parent.localeObj.getConstant('unassignedTask');\n            var beforeEditStatus = this.parent.isOnEdit;\n            this.parent.isOnEdit = false;\n            var cAddedRecord = this.parent.dataOperation.createRecord(unassignTaskObj, 0);\n            this.parent.isOnEdit = beforeEditStatus;\n            this.addRecordAsBottom(cAddedRecord);\n            var parentRecord = this.parent.flatData[this.parent.flatData.length - 1];\n            this.addNewRecord(updateRecord, parentRecord);\n        }\n    };\n    Edit.prototype.addRecordAsBottom = function (cAddedRecord) {\n        var recordIndex1 = this.parent.flatData.length;\n        this.parent.currentViewData.splice(recordIndex1 + 1, 0, cAddedRecord);\n        this.parent.flatData.splice(recordIndex1 + 1, 0, cAddedRecord);\n        this.parent.ids.splice(recordIndex1 + 1, 0, cAddedRecord.ganttProperties.rowUniqueID.toString());\n        var taskId = cAddedRecord.level === 0 ? 'R' + cAddedRecord.ganttProperties.taskId : 'T' + cAddedRecord.ganttProperties.taskId;\n        this.parent.getTaskIds().splice(recordIndex1 + 1, 0, taskId);\n        this.updateTreeGridUniqueID(cAddedRecord, 'add');\n    };\n    Edit.prototype.addNewRecord = function (updateRecord, parentRecord) {\n        var cAddedRecord = null;\n        cAddedRecord = extend({}, {}, updateRecord, true);\n        this.parent.setRecordValue('uniqueID', getUid(this.parent.element.id + '_data_'), cAddedRecord);\n        this.parent.setRecordValue('uniqueID', cAddedRecord.uniqueID, cAddedRecord.ganttProperties, true);\n        var uniqueId = cAddedRecord.uniqueID.replace(this.parent.element.id + '_data_', '');\n        this.parent.setRecordValue('rowUniqueID', uniqueId, cAddedRecord);\n        this.parent.setRecordValue('rowUniqueID', uniqueId, cAddedRecord.ganttProperties, true);\n        this.parent.setRecordValue('level', 1, cAddedRecord);\n        if (this.parent.taskFields.parentID) {\n            this.parent.setRecordValue('parentId', parentRecord.ganttProperties.taskId, cAddedRecord.ganttProperties, true);\n        }\n        this.parent.setRecordValue('parentItem', this.parent.dataOperation.getCloneParent(parentRecord), cAddedRecord);\n        var parentUniqId = cAddedRecord.parentItem ? cAddedRecord.parentItem.uniqueID : null;\n        this.parent.setRecordValue('parentUniqueID', parentUniqId, cAddedRecord);\n        updateRecord.ganttProperties.sharedTaskUniqueIds.push(uniqueId);\n        cAddedRecord.ganttProperties.sharedTaskUniqueIds = updateRecord.ganttProperties.sharedTaskUniqueIds;\n        this.addRecordAsChild(parentRecord, cAddedRecord);\n    };\n    Edit.prototype.removeChildRecord = function (record) {\n        var gObj = this.parent;\n        var data = [];\n        if (this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.json.length > 0) {\n            data = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            data = this.parent.currentViewData;\n        }\n        var dataSource = this.parent.dataSource;\n        var deletedRow = record;\n        var flatParentData = this.parent.getParentTask(deletedRow.parentItem);\n        if (deletedRow) {\n            if (deletedRow.parentItem) {\n                var deleteChildRecords = flatParentData ? flatParentData.childRecords : [];\n                var childIndex = 0;\n                if (deleteChildRecords && deleteChildRecords.length > 0) {\n                    if (deleteChildRecords.length === 1) {\n                        //For updating the parent record which has no child reords.\n                        this.parent.isOnDelete = true;\n                        deleteChildRecords[0].isDelete = true;\n                        this.parent.dataOperation.updateParentItems(flatParentData);\n                        this.parent.isOnDelete = false;\n                        deleteChildRecords[0].isDelete = false;\n                    }\n                    childIndex = deleteChildRecords.indexOf(deletedRow);\n                    flatParentData.childRecords.splice(childIndex, 1);\n                    // collection for updating parent record\n                    this.updateParentRecords.push(flatParentData);\n                }\n            }\n            if (deletedRow.ganttProperties.sharedTaskUniqueIds.length) {\n                var uniqueIDIndex = deletedRow.ganttProperties.sharedTaskUniqueIds.indexOf(deletedRow.ganttProperties.rowUniqueID);\n                deletedRow.ganttProperties.sharedTaskUniqueIds.splice(uniqueIDIndex, 1);\n            }\n            this.updateTreeGridUniqueID(deletedRow, 'delete');\n            //method to delete the record from datasource collection\n            if (!this.parent.taskFields.parentID) {\n                var deleteRecordIDs = [];\n                deleteRecordIDs.push(deletedRow.ganttProperties.rowUniqueID.toString());\n                this.parent.editModule.removeFromDataSource(deleteRecordIDs);\n            }\n            var flatRecordIndex = this.parent.flatData.indexOf(deletedRow);\n            if (gObj.taskFields.parentID) {\n                var idx = void 0;\n                var ganttData = this.parent.currentViewData;\n                for (var i = 0; i < ganttData.length; i++) {\n                    if (ganttData[i].ganttProperties.rowUniqueID === deletedRow.ganttProperties.rowUniqueID) {\n                        idx = i;\n                    }\n                }\n                if (idx !== -1) {\n                    if (dataSource.length > 0) {\n                        dataSource.splice(idx, 1);\n                    }\n                    data.splice(idx, 1);\n                    this.parent.flatData.splice(flatRecordIndex, 1);\n                    this.parent.ids.splice(flatRecordIndex, 1);\n                    this.parent.getTaskIds().splice(flatRecordIndex, 1);\n                }\n            }\n            var recordIndex = data.indexOf(deletedRow);\n            if (!gObj.taskFields.parentID) {\n                var deletedRecordCount = this.parent.editModule.getChildCount(deletedRow, 0);\n                data.splice(recordIndex, deletedRecordCount + 1);\n                this.parent.flatData.splice(flatRecordIndex, deletedRecordCount + 1);\n                this.parent.ids.splice(flatRecordIndex, deletedRecordCount + 1);\n                this.parent.getTaskIds().splice(flatRecordIndex, deletedRecordCount + 1);\n            }\n            if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n                this.parent.setRecordValue('expanded', false, flatParentData);\n                this.parent.setRecordValue('hasChildRecords', false, flatParentData);\n            }\n        }\n    };\n    // Method to add new record after resource edit\n    Edit.prototype.addRecordAsChild = function (droppedRecord, draggedRecord) {\n        var gObj = this.parent;\n        var recordIndex1 = this.parent.flatData.indexOf(droppedRecord);\n        var childRecords = this.parent.editModule.getChildCount(droppedRecord, 0);\n        var childRecordsLength;\n        if (!isNullOrUndefined(this.addRowIndex) && this.addRowPosition && droppedRecord.childRecords && this.addRowPosition !== 'Child') {\n            var dropChildRecord = droppedRecord.childRecords[this.addRowIndex];\n            var position = this.addRowPosition === 'Above' || this.addRowPosition === 'Below' ? this.addRowPosition :\n                'Child';\n            childRecordsLength = dropChildRecord ? this.addRowIndex + recordIndex1 + 1 :\n                childRecords + recordIndex1 + 1;\n            childRecordsLength = position === 'Above' ? childRecordsLength : childRecordsLength + 1;\n        }\n        else {\n            childRecordsLength = (isNullOrUndefined(childRecords) ||\n                childRecords === 0) ? recordIndex1 + 1 :\n                childRecords + recordIndex1 + 1;\n        }\n        //this.ganttData.splice(childRecordsLength, 0, this.draggedRecord);\n        this.parent.currentViewData.splice(childRecordsLength, 0, draggedRecord);\n        this.parent.flatData.splice(childRecordsLength, 0, draggedRecord);\n        this.parent.ids.splice(childRecordsLength, 0, draggedRecord.ganttProperties.rowUniqueID.toString());\n        this.updateTreeGridUniqueID(draggedRecord, 'add');\n        var recordId = draggedRecord.level === 0 ? 'R' + draggedRecord.ganttProperties.taskId : 'T' + draggedRecord.ganttProperties.taskId;\n        this.parent.getTaskIds().splice(childRecordsLength, 0, recordId);\n        if (!droppedRecord.hasChildRecords) {\n            this.parent.setRecordValue('hasChildRecords', true, droppedRecord);\n            this.parent.setRecordValue('expanded', true, droppedRecord);\n            if (!droppedRecord.childRecords.length) {\n                droppedRecord.childRecords = [];\n                if (!gObj.taskFields.parentID && isNullOrUndefined(droppedRecord.taskData[this.parent.taskFields.child])) {\n                    droppedRecord.taskData[this.parent.taskFields.child] = [];\n                }\n            }\n        }\n        droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n        if (!isNullOrUndefined(draggedRecord) && !this.parent.taskFields.parentID\n            && !isNullOrUndefined(droppedRecord.taskData[this.parent.taskFields.child])) {\n            droppedRecord.taskData[this.parent.taskFields.child].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n        }\n        if (!isNullOrUndefined(draggedRecord.parentItem)) {\n            //collection to update the parent records\n            this.updateParentRecords.push(droppedRecord);\n        }\n    };\n    Edit.prototype.resetEditProperties = function (args) {\n        this.parent.currentEditedArgs = {};\n        this.resetValidateArgs();\n        this.parent.editedTaskBarItem = null;\n        this.parent.isOnEdit = false;\n        this.validatedChildItems = [];\n        this.parent.isConnectorLineUpdate = false;\n        this.parent.editedTaskBarItem = null;\n        this.taskbarMoved = false;\n        this.predecessorUpdated = false;\n        if (!isNullOrUndefined(this.dialogModule) && (isNullOrUndefined(args) ||\n            (!isNullOrUndefined(args) && args['requestType'] === 'beforeSave' && !args['cancel']))) {\n            if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n                this.dialogModule.dialogObj.hide();\n            }\n            this.dialogModule.dialogClose();\n        }\n        this.parent.hideSpinner();\n        this.parent.initiateEditAction(false);\n    };\n    /**\n     * @param {ITaskAddedEventArgs} args .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.endEditAction = function (args) {\n        this.resetEditProperties();\n        if (args.action === 'TaskbarEditing') {\n            this.parent.trigger('taskbarEdited', args);\n        }\n        else if (args.action === 'CellEditing') {\n            this.parent.trigger('endEdit', args);\n        }\n        else if (args.action === 'DialogEditing') {\n            if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n                this.dialogModule.dialogObj.hide();\n            }\n            this.dialogModule.dialogClose();\n        }\n    };\n    // eslint-disable-next-line\n    Edit.prototype.saveFailed = function (args) {\n        this.reUpdatePreviousRecords();\n        this.parent.hideSpinner();\n        //action failure event trigger\n    };\n    /**\n     * To render delete confirmation dialog\n     *\n     * @returns {void} .\n     */\n    Edit.prototype.renderDeleteConfirmDialog = function () {\n        var dialogObj = new Dialog({\n            width: '320px',\n            isModal: true,\n            visible: false,\n            content: this.parent.localeObj.getConstant('confirmDelete'),\n            buttons: [\n                {\n                    click: this.confirmDeleteOkButton.bind(this),\n                    buttonModel: { content: this.parent.localeObj.getConstant('okText'), isPrimary: true }\n                },\n                {\n                    click: this.closeConfirmDialog.bind(this),\n                    buttonModel: { content: this.parent.localeObj.getConstant('cancel') }\n                }\n            ],\n            target: this.parent.element,\n            animationSettings: { effect: 'None' }\n        });\n        dialogObj.appendTo('#' + this.parent.element.id + '_deleteConfirmDialog');\n        this.confirmDialog = dialogObj;\n    };\n    Edit.prototype.closeConfirmDialog = function () {\n        this.confirmDialog.hide();\n    };\n    Edit.prototype.confirmDeleteOkButton = function () {\n        this.deleteSelectedItems();\n        this.confirmDialog.hide();\n        var focussedElement = this.parent.element.querySelector('.e-treegrid');\n        focussedElement.focus();\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.startDeleteAction = function () {\n        if (this.parent.editSettings.allowDeleting && !this.parent.readOnly) {\n            if (this.parent.editSettings.showDeleteConfirmDialog) {\n                this.confirmDialog.show();\n            }\n            else {\n                this.deleteSelectedItems();\n            }\n        }\n    };\n    /**\n     *\n     * @param {IGanttData[]} selectedRecords - Defines the deleted records\n     * @returns {void} .\n     * Method to delete the records from resource view Gantt.\n     */\n    Edit.prototype.deleteResourceRecords = function (selectedRecords) {\n        var deleteRecords = [];\n        for (var i = 0; i < selectedRecords.length; i++) {\n            if (selectedRecords[i].parentItem) {\n                var data = selectedRecords[i];\n                var ids = data.ganttProperties.sharedTaskUniqueIds;\n                for (var j = 0; j < ids.length; j++) {\n                    deleteRecords.push(this.parent.flatData[this.parent.ids.indexOf(ids[j].toString())]);\n                }\n            }\n        }\n        this.deleteRow(deleteRecords);\n    };\n    Edit.prototype.deleteSelectedItems = function () {\n        if (!this.isFromDeleteMethod) {\n            var selectedRecords = [];\n            if (this.parent.selectionSettings.mode !== 'Cell') {\n                selectedRecords = this.parent.selectionModule.getSelectedRecords();\n            }\n            else if (this.parent.selectionSettings.mode === 'Cell') {\n                selectedRecords = this.parent.selectionModule.getCellSelectedRecords();\n            }\n            if (this.parent.viewType === 'ResourceView') {\n                this.deleteResourceRecords(selectedRecords);\n            }\n            else {\n                this.deleteRow(selectedRecords);\n            }\n        }\n        else {\n            if (this.targetedRecords.length) {\n                if (this.parent.viewType === 'ResourceView') {\n                    this.deleteResourceRecords(this.targetedRecords);\n                }\n                else {\n                    this.deleteRow(this.targetedRecords);\n                }\n            }\n            this.isFromDeleteMethod = false;\n        }\n    };\n    /**\n     * Method to delete record.\n     *\n     * @param {number | string | number[] | string[] | IGanttData | IGanttData[]} taskDetail - Defines the details of data to delete.\n     * @returns {void} .\n     * @public\n     */\n    Edit.prototype.deleteRecord = function (taskDetail) {\n        this.isFromDeleteMethod = true;\n        var variableType = typeof (taskDetail);\n        this.targetedRecords = [];\n        switch (variableType) {\n            case 'number':\n            case 'string':\n                {\n                    var taskId = taskDetail.toString();\n                    if (this.parent.viewType === 'ResourceView') {\n                        if (!isNullOrUndefined(taskId) && this.parent.getTaskIds().indexOf('T' + taskId) !== -1) {\n                            this.targetedRecords.push(this.parent.flatData[this.parent.getTaskIds().indexOf('T' + taskId)]);\n                        }\n                    }\n                    else {\n                        if (!isNullOrUndefined(taskId) && this.parent.ids.indexOf(taskId) !== -1) {\n                            this.targetedRecords.push(this.parent.getRecordByID(taskId));\n                        }\n                    }\n                    break;\n                }\n            case 'object':\n                if (!Array.isArray(taskDetail)) {\n                    this.targetedRecords.push(taskDetail.valueOf());\n                }\n                else {\n                    this.updateTargetedRecords(taskDetail);\n                }\n                break;\n            default:\n        }\n        this.startDeleteAction();\n    };\n    /**\n     * To update 'targetedRecords collection' from given array collection\n     *\n     * @param {object[]} taskDetailArray .\n     * @returns {void} .\n     */\n    Edit.prototype.updateTargetedRecords = function (taskDetailArray) {\n        if (taskDetailArray.length) {\n            var variableType = typeof (taskDetailArray[0]);\n            if (variableType === 'object') {\n                this.targetedRecords = taskDetailArray;\n            }\n            else {\n                // Get record from array of task ids\n                for (var i = 0; i < taskDetailArray.length; i++) {\n                    var id = taskDetailArray[i].toString();\n                    if (this.parent.viewType === 'ResourceView') {\n                        if (!isNullOrUndefined(id) && this.parent.getTaskIds().indexOf('T' + id) !== -1) {\n                            this.targetedRecords.push(this.parent.flatData[this.parent.getTaskIds().indexOf('T' + id)]);\n                        }\n                    }\n                    else if (!isNullOrUndefined(id) && this.parent.ids.indexOf(id) !== -1) {\n                        this.targetedRecords.push(this.parent.getRecordByID(id));\n                    }\n                }\n            }\n        }\n    };\n    Edit.prototype.deleteRow = function (tasks) {\n        var rowItems = tasks && tasks.length ? tasks :\n            this.parent.selectionModule.getSelectedRecords();\n        this.parent.addDeleteRecord = true;\n        if (rowItems.length) {\n            this.parent.isOnDelete = true;\n            rowItems.forEach(function (item) {\n                item.isDelete = true;\n            });\n            if (this.parent.viewType === 'ResourceView' && !tasks.length) {\n                rowItems = [];\n            }\n            for (var i = 0; i < rowItems.length; i++) {\n                var deleteRecord = rowItems[i];\n                if (this.deletedTaskDetails.indexOf(deleteRecord) !== -1) {\n                    continue;\n                }\n                if (deleteRecord.parentItem) {\n                    var childRecord = this.parent.getParentTask(deleteRecord.parentItem).childRecords;\n                    var filteredRecord = childRecord.length === 1 ?\n                        childRecord : childRecord.filter(function (data) {\n                        return !data.isDelete;\n                    });\n                    if (filteredRecord.length > 0) {\n                        this.parent.dataOperation.updateParentItems(deleteRecord.parentItem);\n                    }\n                }\n                var predecessor = deleteRecord.ganttProperties.predecessor;\n                if (predecessor && predecessor.length) {\n                    this.removePredecessorOnDelete(deleteRecord);\n                }\n                this.deletedTaskDetails.push(deleteRecord);\n                if (deleteRecord.hasChildRecords) {\n                    this.deleteChildRecords(deleteRecord);\n                }\n            }\n            if (this.parent.selectionModule && this.parent.allowSelection) {\n                // clear selection\n                this.parent.selectionModule.clearSelection();\n            }\n            var delereArgs = {};\n            delereArgs.deletedRecordCollection = this.deletedTaskDetails;\n            delereArgs.updatedRecordCollection = this.parent.editedRecords;\n            delereArgs.cancel = false;\n            delereArgs.action = 'delete';\n            this.initiateDeleteAction(delereArgs);\n            this.parent.isOnDelete = false;\n        }\n        if (!isNullOrUndefined(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    Edit.prototype.removePredecessorOnDelete = function (record) {\n        var predecessors = record.ganttProperties.predecessor;\n        for (var i = 0; i < predecessors.length; i++) {\n            var predecessor = predecessors[i];\n            var recordId = this.parent.viewType === 'ResourceView' ? record.ganttProperties.taskId :\n                record.ganttProperties.rowUniqueID;\n            if (predecessor.from.toString() === recordId.toString()) {\n                var toRecord = this.parent.connectorLineModule.getRecordByID(predecessor.to.toString());\n                if (!isNullOrUndefined(toRecord)) {\n                    var toRecordPredcessor = extend([], [], toRecord.ganttProperties.predecessor, true);\n                    var index = void 0;\n                    for (var t = 0; t < toRecordPredcessor.length; t++) {\n                        var toId = this.parent.viewType === 'ResourceView' ? toRecord.ganttProperties.taskId :\n                            toRecord.ganttProperties.rowUniqueID;\n                        if (toRecordPredcessor[t].to.toString() === toId.toString()\n                            && toRecordPredcessor[t].from.toString() === recordId.toString()) {\n                            index = t;\n                            break;\n                        }\n                    }\n                    toRecordPredcessor.splice(index, 1);\n                    this.updatePredecessorValues(toRecord, toRecordPredcessor);\n                }\n            }\n            else if (predecessor.to.toString() === recordId.toString()) {\n                var fromRecord = this.parent.connectorLineModule.getRecordByID(predecessor.from.toString());\n                if (!isNullOrUndefined(fromRecord)) {\n                    var fromRecordPredcessor = extend([], [], fromRecord.ganttProperties.predecessor, true);\n                    var index = void 0;\n                    for (var t = 0; t < fromRecordPredcessor.length; t++) {\n                        var fromId = this.parent.viewType === 'ResourceView' ? fromRecord.ganttProperties.taskId :\n                            fromRecord.ganttProperties.rowUniqueID;\n                        if (fromRecordPredcessor[t].from.toString() === fromId.toString()\n                            && fromRecordPredcessor[t].to.toString() === recordId.toString()) {\n                            index = t;\n                            break;\n                        }\n                    }\n                    fromRecordPredcessor.splice(index, 1);\n                    this.updatePredecessorValues(fromRecord, fromRecordPredcessor);\n                }\n            }\n        }\n    };\n    Edit.prototype.updatePredecessorValues = function (record, predcessorArray) {\n        this.parent.setRecordValue('predecessor', predcessorArray, record.ganttProperties, true);\n        var predecessorString = this.parent.predecessorModule.getPredecessorStringValue(record);\n        this.parent.setRecordValue('predecessorsName', predecessorString, record.ganttProperties, true);\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.dependency, predecessorString, record);\n        this.parent.setRecordValue(this.parent.taskFields.dependency, predecessorString, record);\n    };\n    /**\n     * Method to update TaskID of a gantt record\n     *\n     * @param {string | number} currentId .\n     * @param {number | string} newId .\n     * @returns {void} .\n     */\n    Edit.prototype.updateTaskId = function (currentId, newId) {\n        if (!this.parent.readOnly) {\n            var cId = typeof currentId === 'number' ? currentId.toString() : currentId;\n            var nId = typeof newId === 'number' ? newId.toString() : newId;\n            var ids = this.parent.ids;\n            if (!isNullOrUndefined(cId) && !isNullOrUndefined(nId)) {\n                var cIndex = ids.indexOf(cId);\n                var nIndex = ids.indexOf(nId);\n                // return false for invalid taskID\n                if (cIndex === -1 || nIndex > -1) {\n                    return;\n                }\n                var thisRecord = this.parent.flatData[cIndex];\n                thisRecord.ganttProperties.taskId = thisRecord.ganttProperties.rowUniqueID = nId;\n                thisRecord.taskData[this.parent.taskFields.id] = nId;\n                thisRecord[this.parent.taskFields.id] = nId;\n                ids[cIndex] = nId;\n                if (thisRecord.hasChildRecords && this.parent.taskFields.parentID) {\n                    var childRecords = thisRecord.childRecords;\n                    for (var count = 0; count < childRecords.length; count++) {\n                        var childRecord = childRecords[count];\n                        childRecord[this.parent.taskFields.parentID] = newId;\n                        this.parent.chartRowsModule.refreshRecords([childRecord]);\n                    }\n                }\n                if (this.parent.taskFields.dependency && !isNullOrUndefined(thisRecord.ganttProperties.predecessor)) {\n                    var predecessors = thisRecord.ganttProperties.predecessor;\n                    var currentGanttRecord = void 0;\n                    for (var i = 0; i < predecessors.length; i++) {\n                        var predecessor = predecessors[i];\n                        if (predecessor.to === cId) {\n                            currentGanttRecord = this.parent.flatData[ids.indexOf(predecessor.from)];\n                        }\n                        else if (predecessor.from === cId) {\n                            currentGanttRecord = this.parent.flatData[ids.indexOf(predecessor.to)];\n                        }\n                        this.updatePredecessorOnUpdateId(currentGanttRecord, cId, nId);\n                    }\n                }\n                this.parent.treeGrid.parentData = [];\n                this.parent.treeGrid.refresh();\n            }\n        }\n    };\n    Edit.prototype.updatePredecessorOnUpdateId = function (currentGanttRecord, cId, nId) {\n        if (this.parent.flatData.indexOf(currentGanttRecord) > -1) {\n            var pred = currentGanttRecord.ganttProperties.predecessor;\n            for (var j = 0; j < pred.length; j++) {\n                var pre = pred[j];\n                if (pre.to === cId) {\n                    pre.to = nId;\n                }\n                else if (pre.from === cId) {\n                    pre.from = nId;\n                }\n            }\n        }\n        this.updatePredecessorValues(currentGanttRecord, currentGanttRecord.ganttProperties.predecessor);\n    };\n    Edit.prototype.deleteChildRecords = function (record) {\n        var childRecords = record.childRecords;\n        for (var c = 0; c < childRecords.length; c++) {\n            var childRecord = childRecords[c];\n            if (this.deletedTaskDetails.indexOf(childRecord) !== -1) {\n                continue;\n            }\n            var predecessor = childRecord.ganttProperties.predecessor;\n            if (predecessor && predecessor.length) {\n                this.removePredecessorOnDelete(childRecord);\n            }\n            this.deletedTaskDetails.push(childRecord);\n            if (childRecord.hasChildRecords) {\n                this.deleteChildRecords(childRecord);\n            }\n        }\n    };\n    Edit.prototype.removeFromDataSource = function (deleteRecordIDs) {\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        this.removeData(dataSource, deleteRecordIDs);\n        this.isBreakLoop = false;\n    };\n    Edit.prototype.removeData = function (dataCollection, record) {\n        for (var i = 0; i < dataCollection.length; i++) {\n            if (this.isBreakLoop) {\n                break;\n            }\n            if (record.indexOf(getValue(this.parent.taskFields.id, dataCollection[i]).toString()) !== -1) {\n                if (dataCollection[i][this.parent.taskFields.child]) {\n                    var childRecords = dataCollection[i][this.parent.taskFields.child];\n                    this.removeData(childRecords, record);\n                }\n                record.splice(record.indexOf(getValue(this.parent.taskFields.id, dataCollection[i]).toString()), 1);\n                dataCollection.splice(i, 1);\n                if (record.length === 0) {\n                    this.isBreakLoop = true;\n                    break;\n                }\n            }\n            else if (dataCollection[i][this.parent.taskFields.child]) {\n                var childRecords = dataCollection[i][this.parent.taskFields.child];\n                this.removeData(childRecords, record);\n            }\n        }\n    };\n    Edit.prototype.initiateDeleteAction = function (args) {\n        var _this = this;\n        this.parent.showSpinner();\n        var eventArgs = {};\n        eventArgs.requestType = 'beforeDelete';\n        eventArgs.data = args.deletedRecordCollection;\n        eventArgs.modifiedRecords = args.updatedRecordCollection;\n        eventArgs.modifiedTaskData = getTaskData(args.updatedRecordCollection, null, null, this.parent);\n        this.parent.trigger('actionBegin', eventArgs, function (eventArg) {\n            if (eventArg.cancel) {\n                var deleteRecords = _this.deletedTaskDetails;\n                for (var d = 0; d < deleteRecords.length; d++) {\n                    deleteRecords[d].isDelete = false;\n                }\n                _this.deletedTaskDetails = [];\n                _this.reUpdatePreviousRecords();\n                _this.parent.initiateEditAction(false);\n                _this.parent.hideSpinner();\n            }\n            else {\n                if (isRemoteData(_this.parent.dataSource)) {\n                    var data_1 = _this.parent.dataSource;\n                    if (_this.parent.timezone) {\n                        updateDates(eventArg.modifiedTaskData, _this.parent);\n                    }\n                    var updatedData_1 = {\n                        deletedRecords: getTaskData(eventArg.data, null, null, _this.parent),\n                        changedRecords: eventArg.modifiedTaskData\n                    };\n                    var adaptor = data_1.adaptor;\n                    var query_1 = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n                    if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data_1.dataSource.batchUrl) {\n                        var crud = data_1.saveChanges(updatedData_1, _this.parent.taskFields.id, null, query_1);\n                        crud.then(function () { return _this.deleteSuccess(args); })\n                            .catch(function (e) { return _this.dmFailure(e, args); });\n                    }\n                    else {\n                        var deletedRecords = 'deletedRecords';\n                        var deleteCrud = null;\n                        for (var i = 0; i < updatedData_1[deletedRecords].length; i++) {\n                            deleteCrud = data_1.remove(_this.parent.taskFields.id, updatedData_1[deletedRecords][i], null, query_1);\n                        }\n                        deleteCrud.then(function () {\n                            var changedRecords = 'changedRecords';\n                            var updateCrud = data_1.update(_this.parent.taskFields.id, updatedData_1[changedRecords], null, query_1);\n                            updateCrud.then(function () { return _this.deleteSuccess(args); })\n                                .catch(function (e) { return _this.dmFailure(e, args); });\n                        }).catch(function (e) { return _this.dmFailure(e, args); });\n                    }\n                }\n                else {\n                    _this.deleteSuccess(args);\n                }\n            }\n        });\n    };\n    Edit.prototype.deleteSuccess = function (args) {\n        var flatData = this.parent.flatData;\n        var currentData = this.parent.currentViewData;\n        var deletedRecords = this.parent.getRecordFromFlatdata(args.deletedRecordCollection);\n        var deleteRecordIDs = [];\n        if (deletedRecords.length > 0) {\n            this.parent.selectedRowIndex = deletedRecords[deletedRecords.length - 1].index;\n        }\n        for (var i = 0; i < deletedRecords.length; i++) {\n            var deleteRecord = deletedRecords[i];\n            var currentIndex = currentData.indexOf(deleteRecord);\n            var flatIndex = flatData.indexOf(deleteRecord);\n            var treeGridParentIndex = this.parent.treeGrid.parentData.indexOf(deleteRecord);\n            var tempData = getValue('dataOperation.dataArray', this.parent);\n            var dataIndex = tempData.indexOf(deleteRecord.taskData);\n            var childIndex = void 0;\n            if (currentIndex !== -1) {\n                currentData.splice(currentIndex, 1);\n            }\n            if (flatIndex !== -1) {\n                flatData.splice(flatIndex, 1);\n            }\n            if (dataIndex !== -1) {\n                tempData.splice(dataIndex, 1);\n            }\n            if (!isNullOrUndefined(deleteRecord)) {\n                deleteRecordIDs.push(deleteRecord.ganttProperties.taskId.toString());\n                if (flatIndex !== -1) {\n                    this.parent.ids.splice(flatIndex, 1);\n                    if (this.parent.viewType === 'ResourceView') {\n                        this.parent.getTaskIds().splice(flatIndex, 1);\n                    }\n                }\n                if (deleteRecord.level === 0 && treeGridParentIndex !== -1) {\n                    this.parent.treeGrid.parentData.splice(treeGridParentIndex, 1);\n                }\n                if (deleteRecord.parentItem) {\n                    var parentItem = this.parent.getParentTask(deleteRecord.parentItem);\n                    if (parentItem) {\n                        var childRecords = parentItem.childRecords;\n                        childIndex = childRecords.indexOf(deleteRecord);\n                        if (childIndex !== -1) {\n                            childRecords.splice(childIndex, 1);\n                        }\n                        if (!childRecords.length) {\n                            this.parent.setRecordValue('hasChildRecords', false, parentItem);\n                        }\n                    }\n                }\n                this.updateTreeGridUniqueID(deleteRecord, 'delete');\n            }\n        }\n        if (deleteRecordIDs.length > 0) {\n            this.removeFromDataSource(deleteRecordIDs);\n        }\n        var eventArgs = {};\n        this.parent.updatedConnectorLineCollection = [];\n        this.parent.connectorLineIds = [];\n        this.parent.predecessorModule.createConnectorLinesCollection(this.parent.flatData);\n        this.parent.treeGrid.parentData = [];\n        this.parent.treeGrid.refresh();\n        if (this.parent.enableImmutableMode) {\n            this.refreshRecordInImmutableMode();\n        }\n        // Trigger actioncomplete event for delete action\n        eventArgs.requestType = 'delete';\n        eventArgs.data = args.deletedRecordCollection;\n        eventArgs.modifiedRecords = args.updatedRecordCollection;\n        eventArgs.modifiedTaskData = getTaskData(args.updatedRecordCollection, null, null, this.parent);\n        setValue('action', args.action, eventArgs);\n        this.parent.trigger('actionComplete', eventArgs);\n        this.deletedTaskDetails = [];\n        this.parent.initiateEditAction(false);\n        this.parent.hideSpinner();\n    };\n    /**\n     *\n     * @returns {number | string} .\n     * @private\n     */\n    Edit.prototype.getNewTaskId = function () {\n        var maxId = DataUtil.aggregates.max(this.parent.flatData, this.parent.taskFields.id);\n        if (!isNullOrUndefined(maxId)) {\n            return parseInt(maxId.toString(), 10) + 1;\n        }\n        else {\n            return 1;\n        }\n    };\n    /**\n     * @param {object} obj .\n     * @param {RowPosition} rowPosition .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    Edit.prototype.prepareNewlyAddedData = function (obj, rowPosition) {\n        var taskModel = this.parent.taskFields;\n        var id;\n        var ids = this.parent.ids;\n        /*Validate Task Id of data*/\n        if (obj[taskModel.id]) {\n            if (ids.indexOf(obj[taskModel.id].toString()) !== -1) {\n                obj[taskModel.id] = null;\n            }\n            else {\n                obj[taskModel.id] = isNullOrUndefined(obj[taskModel.id]) ? null : parseInt(obj[taskModel.id], 10);\n            }\n        }\n        if (!obj[taskModel.id]) {\n            id = this.getNewTaskId();\n            obj[taskModel.id] = id;\n        }\n        if (!this.parent.allowUnscheduledTasks && !obj[taskModel.startDate]) {\n            obj[taskModel.startDate] = this.parent.projectStartDate;\n        }\n        if (!this.parent.allowUnscheduledTasks && taskModel.duration && isNullOrUndefined(obj[taskModel.duration])) {\n            if (!obj[taskModel.endDate]) {\n                obj[taskModel.duration] = '5';\n            }\n        }\n        if (taskModel.progress) {\n            obj[taskModel.progress] = obj[taskModel.progress] ? (obj[taskModel.progress] > 100 ? 100 : obj[taskModel.progress]) : 0;\n        }\n        if (!this.parent.allowUnscheduledTasks && !obj[taskModel.endDate] && taskModel.endDate) {\n            if (!obj[taskModel.duration]) {\n                var startDate = this.parent.dataOperation.getDateFromFormat(this.parent.projectStartDate);\n                startDate.setDate(startDate.getDate() + 4);\n                obj[taskModel.endDate] = this.parent.getFormatedDate(startDate, this.parent.getDateFormat());\n            }\n        }\n    };\n    /**\n     * @param {object} obj .\n     * @param {number} level .\n     * @param {RowPosition} rowPosition .\n     * @param {IGanttData} parentItem .\n     * @returns {IGanttData} .\n     * @private\n     */\n    Edit.prototype.updateNewlyAddedDataBeforeAjax = function (obj, level, rowPosition, parentItem) {\n        var cAddedRecord = this.parent.dataOperation.createRecord(obj, level);\n        cAddedRecord.index = parseInt(cAddedRecord.ganttProperties.rowUniqueID.toString(), 10) - 1;\n        if (!isNullOrUndefined(parentItem)) {\n            this.parent.setRecordValue('parentItem', this.parent.dataOperation.getCloneParent(parentItem), cAddedRecord);\n            var pIndex = cAddedRecord.parentItem ? cAddedRecord.parentItem.index : null;\n            this.parent.setRecordValue('parentIndex', pIndex, cAddedRecord);\n            var parentUniqId = cAddedRecord.parentItem ? cAddedRecord.parentItem.uniqueID : null;\n            this.parent.setRecordValue('parentUniqueID', parentUniqId, cAddedRecord);\n            if (!isNullOrUndefined(this.parent.taskFields.id) &&\n                !isNullOrUndefined(this.parent.taskFields.parentID) && cAddedRecord.parentItem) {\n                if (this.parent.viewType === 'ProjectView') {\n                    this.parent.setRecordValue(this.parent.taskFields.parentID, cAddedRecord.parentItem.taskId, cAddedRecord.taskData, true);\n                }\n                this.parent.setRecordValue('parentId', cAddedRecord.parentItem.taskId, cAddedRecord.ganttProperties, true);\n                this.parent.setRecordValue(this.parent.taskFields.parentID, cAddedRecord.parentItem.taskId, cAddedRecord, true);\n            }\n        }\n        this.parent.isOnEdit = true;\n        this.backUpAndPushNewlyAddedRecord(cAddedRecord, rowPosition, parentItem);\n        // need to push in dataSource also.\n        if (this.parent.taskFields.dependency && cAddedRecord.ganttProperties.predecessorsName) {\n            this.parent.predecessorModule.ensurePredecessorCollectionHelper(cAddedRecord, cAddedRecord.ganttProperties);\n            this.parent.predecessorModule.updatePredecessorHelper(cAddedRecord);\n            this.parent.predecessorModule.validatePredecessorDates(cAddedRecord);\n        }\n        if (cAddedRecord.parentItem && this.parent.getParentTask(cAddedRecord.parentItem).ganttProperties.isAutoSchedule) {\n            this.parent.dataOperation.updateParentItems(cAddedRecord.parentItem);\n        }\n        this.parent.isOnEdit = false;\n        return cAddedRecord;\n    };\n    /**\n     * @param {IGanttData} record .\n     * @param {number} count .\n     * @returns {number} .\n     * @private\n     */\n    Edit.prototype.getChildCount = function (record, count) {\n        var currentRecord;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[i];\n            count++;\n            if (currentRecord.hasChildRecords) {\n                count = this.getChildCount(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    /**\n     * @param {IGanttData} data .\n     * @param {number} count .\n     * @param {IGanttData[]} collection .\n     * @returns {number} .\n     * @private\n     */\n    Edit.prototype.getVisibleChildRecordCount = function (data, count, collection) {\n        var childRecords;\n        var length;\n        if (data.hasChildRecords) {\n            childRecords = data.childRecords;\n            length = childRecords.length;\n            for (var i = 0; i < length; i++) {\n                if (collection.indexOf(childRecords[i]) !== -1) {\n                    count++;\n                }\n                if (childRecords[i].hasChildRecords) {\n                    count = this.getVisibleChildRecordCount(childRecords[i], count, collection);\n                }\n            }\n        }\n        else {\n            if (collection.indexOf(data) !== -1) {\n                count++;\n            }\n        }\n        return count;\n    };\n    /**\n     * @param {IGanttData} parentRecord .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updatePredecessorOnIndentOutdent = function (parentRecord) {\n        var len = parentRecord.ganttProperties.predecessor.length;\n        var parentRecordTaskData = parentRecord.ganttProperties;\n        var predecessorCollection = parentRecordTaskData.predecessor;\n        var childRecord;\n        var predecessorIndex;\n        var updatedPredecessor = [];\n        for (var count = 0; count < len; count++) {\n            if (predecessorCollection[count].to === parentRecordTaskData.rowUniqueID.toString()) {\n                childRecord = this.parent.getRecordByID(predecessorCollection[count].from);\n                predecessorIndex = getIndex(predecessorCollection[count], 'from', childRecord.ganttProperties.predecessor, 'to');\n                // eslint-disable-next-line\n                var predecessorCollections = (extend([], childRecord.ganttProperties.predecessor, [], true));\n                predecessorCollections.splice(predecessorIndex, 1);\n                this.parent.setRecordValue('predecessor', predecessorCollections, childRecord.ganttProperties, true);\n            }\n            else if (predecessorCollection[count].from === parentRecordTaskData.rowUniqueID.toString()) {\n                childRecord = this.parent.getRecordByID(predecessorCollection[count].to);\n                var prdcList = (childRecord.ganttProperties.predecessorsName.toString()).split(',');\n                var str = predecessorCollection[count].from + predecessorCollection[count].type;\n                var ind = prdcList.indexOf(str);\n                prdcList.splice(ind, 1);\n                this.parent.setRecordValue('predecessorsName', prdcList.join(','), childRecord.ganttProperties, true);\n                this.parent.setRecordValue(this.parent.taskFields.dependency, prdcList.join(','), childRecord);\n                predecessorIndex = getIndex(predecessorCollection[count], 'from', childRecord.ganttProperties.predecessor, 'to');\n                // eslint-disable-next-line\n                var temppredecessorCollection = (extend([], childRecord.ganttProperties.predecessor, [], true));\n                temppredecessorCollection.splice(predecessorIndex, 1);\n                this.parent.setRecordValue('predecessor', temppredecessorCollection, childRecord.ganttProperties, true);\n                this.parent.predecessorModule.validatePredecessorDates(childRecord);\n            }\n        }\n        this.parent.setRecordValue('predecessor', updatedPredecessor, parentRecord.ganttProperties, true);\n        this.parent.setRecordValue('predecessorsName', '', parentRecord.ganttProperties, true);\n    };\n    /**\n     * @param {IPredecessor[]} predecessorCollection .\n     * @param {IGanttData} record .\n     * @returns {string} .\n     * @private\n     */\n    Edit.prototype.predecessorToString = function (predecessorCollection, record) {\n        var predecessorString = [];\n        var count = 0;\n        var length = predecessorCollection.length;\n        for (count; count < length; count++) {\n            if (record.ganttProperties.rowUniqueID.toString() !== predecessorCollection[count].from) {\n                var tem = predecessorCollection[count].from + predecessorCollection[count].type;\n                predecessorCollection[count].offset =\n                    isNaN(predecessorCollection[count].offset) ? 0 : predecessorCollection[count].offset;\n                if (predecessorCollection[count].offset !== 0) {\n                    if (predecessorCollection[count].offset < 0) {\n                        tem += predecessorCollection[count].offset.toString() + 'd';\n                    }\n                    else if (predecessorCollection[count].offset > 0) {\n                        tem += '+' + predecessorCollection[count].offset.toString() + 'd';\n                    }\n                }\n                predecessorString.push(tem);\n            }\n        }\n        return predecessorString.join(',');\n    };\n    /**\n     * @param {IGanttData} record .\n     * @param {RowPosition} rowPosition .\n     * @param {IGanttData} parentItem .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.backUpAndPushNewlyAddedRecord = function (record, rowPosition, parentItem) {\n        var flatRecords = this.parent.flatData;\n        var currentViewData = this.parent.currentViewData;\n        var ids = this.parent.ids;\n        var currentItemIndex;\n        var recordIndex;\n        var updatedCollectionIndex;\n        var childIndex;\n        switch (rowPosition) {\n            case 'Top':\n                flatRecords.splice(0, 0, record);\n                currentViewData.splice(0, 0, record);\n                ids.splice(0, 0, record.ganttProperties.rowUniqueID.toString()); // need to check NAN\n                break;\n            case 'Bottom':\n                flatRecords.push(record);\n                currentViewData.push(record);\n                ids.push(record.ganttProperties.rowUniqueID.toString()); // need to check NAN\n                if (this.parent.viewType === 'ResourceView') {\n                    var taskId = record.level === 0 ? 'R' + record.ganttProperties.taskId : 'T' + record.ganttProperties.taskId;\n                    this.parent.getTaskIds().push(taskId);\n                }\n                break;\n            case 'Above':\n                /*Record Updates*/\n                recordIndex = flatRecords.indexOf(this.addRowSelectedItem);\n                updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem);\n                this.recordCollectionUpdate(childIndex, recordIndex, updatedCollectionIndex, record, parentItem);\n                break;\n            case 'Below':\n                currentItemIndex = flatRecords.indexOf(this.addRowSelectedItem);\n                if (this.addRowSelectedItem.hasChildRecords) {\n                    var dataChildCount = this.getChildCount(this.addRowSelectedItem, 0);\n                    recordIndex = currentItemIndex + dataChildCount + 1;\n                    updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) +\n                        this.getVisibleChildRecordCount(this.addRowSelectedItem, 0, currentViewData) + 1;\n                }\n                else {\n                    recordIndex = currentItemIndex + 1;\n                    updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + 1;\n                }\n                this.recordCollectionUpdate(childIndex + 1, recordIndex, updatedCollectionIndex, record, parentItem);\n                break;\n            case 'Child':\n                currentItemIndex = flatRecords.indexOf(this.addRowSelectedItem);\n                if (this.addRowSelectedItem.hasChildRecords) {\n                    var dataChildCount = this.getChildCount(this.addRowSelectedItem, 0);\n                    recordIndex = currentItemIndex + dataChildCount + 1;\n                    //Expand Add record's parent item for project view\n                    if (!this.addRowSelectedItem.expanded && !this.parent.enableMultiTaskbar) {\n                        this.parent.expandByID(Number(this.addRowSelectedItem.ganttProperties.rowUniqueID));\n                    }\n                    updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) +\n                        this.getVisibleChildRecordCount(this.addRowSelectedItem, 0, currentViewData) + 1;\n                }\n                else {\n                    this.parent.setRecordValue('hasChildRecords', true, this.addRowSelectedItem);\n                    this.parent.setRecordValue('isMilestone', false, this.addRowSelectedItem.ganttProperties, true);\n                    this.parent.setRecordValue('expanded', true, this.addRowSelectedItem);\n                    this.parent.setRecordValue('childRecords', [], this.addRowSelectedItem);\n                    recordIndex = currentItemIndex + 1;\n                    updatedCollectionIndex = currentViewData.indexOf(this.addRowSelectedItem) + 1;\n                    if (this.addRowSelectedItem.ganttProperties.predecessor) {\n                        this.updatePredecessorOnIndentOutdent(this.addRowSelectedItem);\n                    }\n                    if (!isNullOrUndefined(this.addRowSelectedItem.ganttProperties.segments)) {\n                        this.addRowSelectedItem.ganttProperties.segments = null;\n                    }\n                }\n                this.recordCollectionUpdate(childIndex + 1, recordIndex, updatedCollectionIndex, record, parentItem);\n                break;\n        }\n        this.newlyAddedRecordBackup = record;\n    };\n    /**\n     * @param {number} childIndex .\n     * @param {number} recordIndex .\n     * @param {number} updatedCollectionIndex .\n     * @param {IGanttData} record .\n     * @param {IGanttData} parentItem .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.recordCollectionUpdate = function (childIndex, recordIndex, updatedCollectionIndex, record, parentItem) {\n        var flatRecords = this.parent.flatData;\n        var currentViewData = this.parent.currentViewData;\n        var ids = this.parent.ids;\n        /* Record collection update */\n        flatRecords.splice(recordIndex, 0, record);\n        currentViewData.splice(updatedCollectionIndex, 0, record);\n        ids.splice(recordIndex, 0, record.ganttProperties.rowUniqueID.toString());\n        if (this.parent.viewType === 'ResourceView') {\n            var taskId = record.level === 0 ? 'R' + record.ganttProperties.taskId : 'T' + record.ganttProperties.taskId;\n            this.parent.getTaskIds().splice(recordIndex, 0, taskId);\n        }\n        /* data Source update */\n        if (!isNullOrUndefined(parentItem)) {\n            childIndex = parentItem.childRecords.indexOf(this.addRowSelectedItem);\n            /*Child collection update*/\n            parentItem.childRecords.splice(childIndex, 0, record);\n            if ((this.parent.dataSource instanceof DataManager &&\n                isNullOrUndefined(parentItem.taskData[this.parent.taskFields.parentID])) ||\n                !isNullOrUndefined(this.parent.dataSource)) {\n                var child = this.parent.taskFields.child;\n                if (parentItem.taskData[child] && parentItem.taskData[child].length > 0) {\n                    parentItem.taskData[child].push(record.taskData);\n                }\n                else {\n                    parentItem.taskData[child] = [];\n                    parentItem.taskData[child].push(record.taskData);\n                }\n            }\n        }\n    };\n    /**\n     * @param {IGanttData} cAddedRecord .\n     * @param {IGanttData} modifiedRecords .\n     * @param {string} event .\n     * @returns {ITaskAddedEventArgs} .\n     * @private\n     */\n    Edit.prototype.constructTaskAddedEventArgs = function (cAddedRecord, modifiedRecords, event) {\n        var eventArgs = {};\n        eventArgs.action = eventArgs.requestType = event;\n        if (cAddedRecord.length > 1) {\n            eventArgs.data = [];\n            eventArgs.newTaskData = [];\n            eventArgs.recordIndex = [];\n            for (var i = 0; i < cAddedRecord.length; i++) {\n                eventArgs.data[i] = cAddedRecord[i];\n                (eventArgs.newTaskData[i]) = (getTaskData([cAddedRecord[i]], eventArgs.data[i], eventArgs, this.parent));\n                eventArgs.recordIndex[i] = cAddedRecord[i].index;\n            }\n        }\n        else if (cAddedRecord.length === 1) {\n            for (var i = 0; i < cAddedRecord.length; i++) {\n                (eventArgs.data) = (cAddedRecord[i]);\n                (eventArgs.newTaskData) = (getTaskData([cAddedRecord[i]], eventArgs.data, eventArgs, this.parent));\n                eventArgs.recordIndex = cAddedRecord[i].index;\n            }\n        }\n        eventArgs.modifiedRecords = modifiedRecords;\n        eventArgs.modifiedTaskData = getTaskData(modifiedRecords, null, null, this.parent);\n        return eventArgs;\n    };\n    /**\n     * @param {ITaskAddedEventArgs} args .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    Edit.prototype.addSuccess = function (args) {\n        // let addedRecords: IGanttData = args.addedRecord;\n        // let eventArgs: IActionBeginEventArgs = {};\n        // this.parent.updatedConnectorLineCollection = [];\n        // this.parent.connectorLineIds = [];\n        // this.parent.predecessorModule.createConnectorLinesCollection(this.parent.flatData);\n        this.parent.treeGrid.parentData = [];\n        this.parent.addDeleteRecord = true;\n        this.parent.selectedRowIndex = 0;\n        this.parent.treeGrid.refresh();\n        if (this.parent.enableImmutableMode) {\n            this.parent.modifiedRecords = args.modifiedRecords;\n            this.parent.modifiedRecords.push(args.data);\n            this.refreshRecordInImmutableMode();\n        }\n    };\n    Edit.prototype.refreshRecordInImmutableMode = function () {\n        for (var i = 0; i < this.parent.modifiedRecords.length; i++) {\n            var originalData = this.parent.modifiedRecords[i];\n            var dataId = this.parent.viewType === 'ProjectView' ?\n                originalData.ganttProperties.taskId : originalData.ganttProperties.rowUniqueID;\n            this.parent.treeGrid.grid.setRowData(dataId, originalData);\n        }\n    };\n    /**\n     * @param {IGanttData} addedRecord .\n     * @param {RowPosition} rowPosition .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.updateRealDataSource = function (addedRecord, rowPosition) {\n        var taskFields = this.parent.taskFields;\n        var dataSource = isCountRequired(this.parent) ? getValue('result', this.parent.dataSource) :\n            this.parent.dataSource;\n        for (var i = 0; i < addedRecord.length; i++) {\n            if (isNullOrUndefined(rowPosition) || isNullOrUndefined(this.addRowSelectedItem)) {\n                rowPosition = 'Top';\n            }\n            if (rowPosition === 'Top') {\n                dataSource.splice(0, 0, addedRecord[i].taskData);\n            }\n            else if (rowPosition === 'Bottom') {\n                dataSource.push(addedRecord[i]);\n            }\n            else {\n                if (!isNullOrUndefined(taskFields.id) && !isNullOrUndefined(taskFields.parentID)) {\n                    dataSource.push(addedRecord[i].taskData);\n                }\n                else {\n                    this.addDataInRealDataSource(dataSource, addedRecord[i].taskData, rowPosition);\n                }\n            }\n            this.isBreakLoop = false;\n        }\n    };\n    /**\n     * @param {object[]} dataCollection .\n     * @param {IGanttData} record .\n     * @param {RowPosition} rowPosition .\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.addDataInRealDataSource = function (dataCollection, record, rowPosition) {\n        for (var i = 0; i < dataCollection.length; i++) {\n            var child = this.parent.taskFields.child;\n            if (this.isBreakLoop) {\n                break;\n            }\n            if (getValue(this.parent.taskFields.id, dataCollection[i]).toString() ===\n                this.addRowSelectedItem.ganttProperties.rowUniqueID.toString()) {\n                if (rowPosition === 'Above') {\n                    dataCollection.splice(i, 0, record);\n                }\n                else if (rowPosition === 'Below') {\n                    dataCollection.splice(i + 1, 0, record);\n                }\n                else if (rowPosition === 'Child') {\n                    if (dataCollection[i][child] && dataCollection[i][child].length > 0) {\n                        dataCollection[i][child].push(record);\n                    }\n                    else {\n                        dataCollection[i][child] = [];\n                        dataCollection[i][child].push(record);\n                    }\n                }\n                this.isBreakLoop = true;\n                break;\n            }\n            else if (dataCollection[i][child]) {\n                var childRecords = dataCollection[i][child];\n                this.addDataInRealDataSource(childRecords, record, rowPosition);\n            }\n        }\n    };\n    /**\n     * Method to add new record.\n     *\n     * @param {Object[] | Object} data - Defines the new data to add.\n     * @param {RowPosition} rowPosition - Defines the position of row.\n     * @param {number} rowIndex - Defines the row index.\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.addRecord = function (data, rowPosition, rowIndex) {\n        var _this = this;\n        if (this.parent.editModule && this.parent.editSettings.allowAdding) {\n            var cAddedRecord_1 = [];\n            if (isNullOrUndefined(data)) {\n                this.validateTaskPosition(data, rowPosition, rowIndex, cAddedRecord_1);\n            }\n            else if (data instanceof Array) {\n                for (var i = 0; i < data.length; i++) {\n                    this.validateTaskPosition(data[i], rowPosition, rowIndex, cAddedRecord_1);\n                }\n            }\n            else if (typeof (data) == 'object') {\n                this.validateTaskPosition(data, rowPosition, rowIndex, cAddedRecord_1);\n            }\n            else {\n                return;\n            }\n            var args = {};\n            args = this.constructTaskAddedEventArgs(cAddedRecord_1, this.parent.editedRecords, 'beforeAdd');\n            this.parent.showSpinner();\n            this.parent.trigger('actionBegin', args, function (args) {\n                if (!args.cancel) {\n                    if (isRemoteData(_this.parent.dataSource)) {\n                        var data_2 = _this.parent.dataSource;\n                        var updatedData_2 = {\n                            addedRecords: [args.newTaskData],\n                            changedRecords: args.modifiedTaskData\n                        };\n                        var prevID_1 = args.data.ganttProperties.taskId.toString();\n                        /* tslint:disable-next-line */\n                        var query_2 = _this.parent.query instanceof Query ? _this.parent.query : new Query();\n                        var adaptor = data_2.adaptor;\n                        if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data_2.dataSource.batchUrl) {\n                            /* tslint:disable-next-line */\n                            var crud = data_2.saveChanges(updatedData_2, _this.parent.taskFields.id, null, query_2);\n                            crud.then(function (e) {\n                                if (_this.parent.taskFields.id && !isNullOrUndefined(e.addedRecords[0][_this.parent.taskFields.id]) &&\n                                    e.addedRecords[0][_this.parent.taskFields.id].toString() !== prevID_1) {\n                                    _this.parent.setRecordValue('taskId', e.addedRecords[0][_this.parent.taskFields.id], args.data.ganttProperties, true);\n                                    _this.parent.setRecordValue('taskData.' + _this.parent.taskFields.id, e.addedRecords[0][_this.parent.taskFields.id], args.data);\n                                    _this.parent.setRecordValue(_this.parent.taskFields.id, e.addedRecords[0][_this.parent.taskFields.id], args.data);\n                                    _this.parent.setRecordValue('rowUniqueID', e.addedRecords[0][_this.parent.taskFields.id].toString(), args.data.ganttProperties, true);\n                                    var idsIndex = _this.parent.ids.indexOf(prevID_1);\n                                    if (idsIndex !== -1) {\n                                        _this.parent.ids[idsIndex] = e.addedRecords[0][_this.parent.taskFields.id].toString();\n                                    }\n                                }\n                                _this.updateNewRecord(cAddedRecord_1, args);\n                            }).catch(function (e) {\n                                _this.removeAddedRecord();\n                                _this.dmFailure(e, args);\n                                _this._resetProperties();\n                            });\n                        }\n                        else {\n                            var addedRecords = 'addedRecords';\n                            var insertCrud = data_2.insert(updatedData_2[addedRecords], null, query_2);\n                            insertCrud.then(function (e) {\n                                var changedRecords = 'changedRecords';\n                                var addedRecords = e[0];\n                                /* tslint:disable-next-line */\n                                var updateCrud = data_2.update(_this.parent.taskFields.id, updatedData_2[changedRecords], null, query_2);\n                                updateCrud.then(function () {\n                                    if (_this.parent.taskFields.id && !isNullOrUndefined(addedRecords[_this.parent.taskFields.id]) &&\n                                        addedRecords[_this.parent.taskFields.id].toString() !== prevID_1) {\n                                        _this.parent.setRecordValue('taskId', addedRecords[_this.parent.taskFields.id], args.data.ganttProperties, true);\n                                        _this.parent.setRecordValue('taskData.' + _this.parent.taskFields.id, addedRecords[_this.parent.taskFields.id], args.data);\n                                        _this.parent.setRecordValue(_this.parent.taskFields.id, addedRecords[_this.parent.taskFields.id], args.data);\n                                        _this.parent.setRecordValue('rowUniqueID', addedRecords[_this.parent.taskFields.id].toString(), args.data.ganttProperties, true);\n                                        var idIndex = _this.parent.ids.indexOf(prevID_1);\n                                        if (idIndex !== -1) {\n                                            _this.parent.ids[idIndex] = addedRecords[_this.parent.taskFields.id].toString();\n                                        }\n                                    }\n                                    _this.updateNewRecord(cAddedRecord_1, args);\n                                }).catch(function (e) {\n                                    _this.removeAddedRecord();\n                                    _this.dmFailure(e, args);\n                                    _this._resetProperties();\n                                });\n                            }).catch(function (e) {\n                                _this.removeAddedRecord();\n                                _this.dmFailure(e, args);\n                                _this._resetProperties();\n                            });\n                        }\n                    }\n                    else {\n                        if (_this.parent.viewType === 'ProjectView') {\n                            if ((rowPosition === 'Top' || rowPosition === 'Bottom') ||\n                                ((rowPosition === 'Above' || rowPosition === 'Below') && !args.data.parentItem)) {\n                                if (args.data instanceof Array) {\n                                    _this.updateRealDataSource(args.data, rowPosition);\n                                }\n                                else {\n                                    var data_3 = [];\n                                    data_3.push(args.data);\n                                    _this.updateRealDataSource(data_3, rowPosition);\n                                }\n                            }\n                        }\n                        else {\n                            var dataSource = isCountRequired(_this.parent) ? getValue('result', _this.parent.dataSource) :\n                                _this.parent.dataSource; // eslint-disable-line\n                            dataSource.push(args.data.taskData);\n                        }\n                        if (cAddedRecord_1.level === 0) {\n                            _this.parent.treeGrid.parentData.splice(0, 0, cAddedRecord_1);\n                        }\n                        _this.updateTreeGridUniqueID(cAddedRecord_1, 'add');\n                        _this.refreshNewlyAddedRecord(args, cAddedRecord_1);\n                        _this._resetProperties();\n                    }\n                }\n                else {\n                    args = args;\n                    _this.removeAddedRecord();\n                    _this.reUpdatePreviousRecords();\n                    _this._resetProperties();\n                }\n            });\n        }\n    };\n    /**\n     * Method to validateTaskPosition.\n     *\n     * @param {Object | object[] } data - Defines the new data to add.\n     * @param {RowPosition} rowPosition - Defines the position of row.\n     * @param {number} rowIndex - Defines the row index.\n     * @param {IGanttData} cAddedRecord - Defines the single data to validate.\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.validateTaskPosition = function (data, rowPosition, rowIndex, cAddedRecord) {\n        var selectedRowIndex = isNullOrUndefined(rowIndex) || isNaN(parseInt(rowIndex.toString(), 10)) ?\n            this.parent.selectionModule ?\n                (this.parent.selectionSettings.mode === 'Row' || this.parent.selectionSettings.mode === 'Both') &&\n                    this.parent.selectionModule.selectedRowIndexes.length === 1 ?\n                    this.parent.selectionModule.selectedRowIndexes[0] :\n                    this.parent.selectionSettings.mode === 'Cell' &&\n                        this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ?\n                        this.parent.selectionModule.getSelectedRowCellIndexes()[0].rowIndex : null : null : rowIndex;\n        this.addRowSelectedItem = isNullOrUndefined(selectedRowIndex) ? null : this.parent.updatedRecords[selectedRowIndex];\n        rowPosition = isNullOrUndefined(rowPosition) ? this.parent.editSettings.newRowPosition : rowPosition;\n        data = isNullOrUndefined(data) ? this.parent.editModule.dialogModule.composeAddRecord() : data;\n        if (((isNullOrUndefined(selectedRowIndex) || selectedRowIndex < 0 ||\n            isNullOrUndefined(this.addRowSelectedItem)) && (rowPosition === 'Above'\n            || rowPosition === 'Below'\n            || rowPosition === 'Child')) || !rowPosition || (rowPosition !== 'Above'\n            && rowPosition !== 'Below'\n            && rowPosition !== 'Child' && rowPosition !== 'Top' &&\n            rowPosition !== 'Bottom')) {\n            rowPosition = 'Top';\n        }\n        var level = 0;\n        var parentItem;\n        switch (rowPosition) {\n            case 'Top':\n            case 'Bottom':\n                if (this.parent.viewType === \"ResourceView\") {\n                    level = 1;\n                }\n                else {\n                    level = 0;\n                }\n                break;\n            case 'Above':\n            case 'Below':\n                level = this.addRowSelectedItem.level;\n                parentItem = this.parent.getParentTask(this.addRowSelectedItem.parentItem);\n                break;\n            case 'Child':\n                level = this.addRowSelectedItem.level + 1;\n                parentItem = this.addRowSelectedItem;\n                break;\n        }\n        this.prepareNewlyAddedData(data, rowPosition);\n        var AddRecord = (this.updateNewlyAddedDataBeforeAjax(data, level, rowPosition, parentItem));\n        cAddedRecord.push(AddRecord);\n    };\n    Edit.prototype.updateNewRecord = function (cAddedRecord, args) {\n        if (cAddedRecord.level === 0) {\n            this.parent.treeGrid.parentData.splice(0, 0, cAddedRecord);\n            var tempData = getValue('dataOperation.dataArray', this.parent);\n            tempData.splice(0, 0, cAddedRecord.taskData);\n        }\n        this.updateTreeGridUniqueID(cAddedRecord, 'add');\n        this.refreshNewlyAddedRecord(args, cAddedRecord);\n        this._resetProperties();\n    };\n    /**\n     * Method to reset the flag after adding new record\n     *\n     * @returns {void} .\n     */\n    Edit.prototype._resetProperties = function () {\n        this.parent.isOnEdit = false;\n        this.parent.hideSpinner();\n        this.addRowSelectedItem = null;\n        this.newlyAddedRecordBackup = null;\n        this.isBreakLoop = false;\n        this.parent.element.tabIndex = 0;\n        this.parent.initiateEditAction(false);\n    };\n    /**\n     * Method to update unique id collection in TreeGrid\n     *\n     * @param {IGanttData} data .\n     * @param {string} action .\n     * @returns {void} .\n     */\n    Edit.prototype.updateTreeGridUniqueID = function (data, action) {\n        if (action === 'add') {\n            setValue('uniqueIDCollection.' + data.uniqueID, data, this.parent.treeGrid);\n        }\n        else if (action === 'delete') {\n            deleteObject(getValue('uniqueIDCollection', this.parent.treeGrid), data.uniqueID);\n        }\n    };\n    Edit.prototype.refreshNewlyAddedRecord = function (args, cAddedRecord) {\n        if (this.parent.selectionModule && this.parent.allowSelection &&\n            (this.parent.selectionSettings.mode === 'Row' || this.parent.selectionSettings.mode === 'Both')) {\n            this.parent.staticSelectedRowIndex = this.parent.currentViewData.indexOf(args.data);\n        }\n        if (this.parent.timelineSettings.updateTimescaleView) {\n            var tempArray = [];\n            if (args.modifiedRecords.length > 0) {\n                tempArray = args.data.length > 0 ? args.data : [args.data];\n                // eslint-disable-next-line\n                tempArray.push.apply(tempArray, args.modifiedRecords);\n            }\n            else {\n                tempArray = args.data.length > 0 ? args.data : [args.data];\n            }\n            this.parent.timelineModule.updateTimeLineOnEditing([tempArray], args.action);\n        }\n        this.addSuccess(args);\n        args = this.constructTaskAddedEventArgs(cAddedRecord, args.modifiedRecords, 'add');\n        this.parent.trigger('actionComplete', args);\n        if (this.dialogModule.dialog && !this.dialogModule.dialogObj.isDestroyed) {\n            this.dialogModule.dialogObj.hide();\n        }\n        this.dialogModule.dialogClose();\n        if (this.parent.viewType === 'ResourceView') {\n            if (cAddedRecord.length > 1) {\n                for (var i = 0; i < cAddedRecord.length; i++) {\n                    args.data[i].ganttProperties.sharedTaskUniqueIds.push(args.data[i]\n                        .ganttProperties.rowUniqueID);\n                    if (args.data[i].ganttProperties.resourceInfo) {\n                        // if ((args.data[i] as IGanttData).ganttProperties.resourceInfo.length > 1) {\n                        var resources = extend([], [], args.data[i].ganttProperties.resourceInfo, true);\n                        resources.splice(0, 1);\n                        this.updateResoures([], resources, args.data[i]);\n                        // }\n                    }\n                    else {\n                        this.removeChildRecord(args.data[i]);\n                        this.parent.editModule.checkWithUnassignedTask(args.data[i]);\n                    }\n                    for (var k = 0; k < this.updateParentRecords.length; k++) {\n                        this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n                    }\n                    this.updateParentRecords = [];\n                }\n            }\n            else {\n                args.data.ganttProperties.sharedTaskUniqueIds.push(args.data.ganttProperties.rowUniqueID);\n                // eslint-disable-next-line\n                if (args.data.ganttProperties.resourceInfo && args.data.ganttProperties.resourceInfo.length) {\n                    if (args.data.ganttProperties.resourceInfo.length > 1) {\n                        // eslint-disable-next-line\n                        var resources = extend([], [], args.data.ganttProperties.resourceInfo, true);\n                        resources.splice(0, 1);\n                        this.updateResoures([], resources, args.data);\n                    }\n                }\n                else {\n                    this.removeChildRecord(args.data);\n                    this.parent.editModule.checkWithUnassignedTask(args.data);\n                }\n                for (var k = 0; k < this.updateParentRecords.length; k++) {\n                    this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n                }\n                this.updateParentRecords = [];\n            }\n        }\n    };\n    /**\n     *\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.removeAddedRecord = function () {\n        var flatRecords = this.parent.flatData;\n        var currentViewData = this.parent.currentViewData;\n        var ids = this.parent.ids;\n        var flatRecordsIndex = flatRecords.indexOf(this.newlyAddedRecordBackup);\n        var currentViewDataIndex = currentViewData.indexOf(this.newlyAddedRecordBackup);\n        var idsIndex = ids.indexOf(this.newlyAddedRecordBackup.ganttProperties.rowUniqueID.toString());\n        deleteObject(this.parent.previousRecords, flatRecords[flatRecordsIndex].uniqueID);\n        if (this.newlyAddedRecordBackup.parentItem) {\n            var parentItem = this.parent.getParentTask(this.newlyAddedRecordBackup.parentItem);\n            var parentIndex = parentItem.childRecords.indexOf(this.newlyAddedRecordBackup);\n            parentItem.childRecords.splice(parentIndex, 1);\n        }\n        flatRecords.splice(flatRecordsIndex, 1);\n        currentViewData.splice(currentViewDataIndex, 1);\n        ids.splice(idsIndex, 1);\n    };\n    Edit.prototype.getPrevRecordIndex = function () {\n        var prevRecord = this.parent.updatedRecords[this.parent.selectionModule.getSelectedRowIndexes()[0] - 1];\n        var selectedRecord = this.parent.selectionModule.getSelectedRecords()[0];\n        var parent = this.parent.getRootParent(prevRecord, selectedRecord.level);\n        var prevIndex = this.parent.updatedRecords.indexOf(parent);\n        return prevIndex;\n    };\n    /**\n     * indent a selected record\n     *\n     * @returns {void} .\n     */\n    Edit.prototype.indent = function () {\n        var index = this.parent.selectedRowIndex;\n        var isSelected = this.parent.selectionModule ? this.parent.selectionModule.selectedRowIndexes.length === 1 ||\n            this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ? true : false : false;\n        var dropIndex;\n        var prevRecord = this.parent.updatedRecords[this.parent.selectionModule.getSelectedRowIndexes()[0] - 1];\n        var selectedRecord = this.parent.selectionModule.getSelectedRecords()[0];\n        if (!this.parent.editSettings.allowEditing || index === 0 || index === -1 || !isSelected ||\n            this.parent.viewType === 'ResourceView' || this.parent.updatedRecords[index].level - prevRecord.level === 1) {\n            return;\n        }\n        else {\n            if (prevRecord.level - selectedRecord.level === 0) {\n                dropIndex = this.parent.selectionModule.getSelectedRowIndexes()[0] - 1;\n            }\n            else {\n                dropIndex = this.getPrevRecordIndex();\n            }\n            this.indentOutdentRow([this.parent.selectionModule.getSelectedRowIndexes()[0]], dropIndex, 'child');\n        }\n    };\n    /**\n     * To perform outdent operation for selected row\n     *\n     * @returns {void} .\n     */\n    Edit.prototype.outdent = function () {\n        var index = this.parent.selectionModule.getSelectedRowIndexes()[0];\n        var dropIndex;\n        var isSelected = this.parent.selectionModule ? this.parent.selectionModule.selectedRowIndexes.length === 1 ||\n            this.parent.selectionModule.getSelectedRowCellIndexes().length === 1 ? true : false : false;\n        if (!this.parent.editSettings.allowEditing || index === -1 || index === 0 || !isSelected ||\n            this.parent.viewType === 'ResourceView' || this.parent.updatedRecords[index].level === 0) {\n            return;\n        }\n        else {\n            var thisParent = this.parent.getTaskByUniqueID(this.parent.selectionModule.getSelectedRecords()[0].parentItem.uniqueID);\n            dropIndex = this.parent.updatedRecords.indexOf(thisParent);\n            this.indentOutdentRow([index], dropIndex, 'below');\n        }\n    };\n    Edit.prototype.indentOutdentRow = function (fromIndexes, toIndex, pos) {\n        var _this = this;\n        // eslint-disable-next-line\n        if (fromIndexes[0] !== toIndex && pos === 'above' || 'below' || 'child') {\n            if (pos === 'above') {\n                this.dropPosition = 'topSegment';\n            }\n            if (pos === 'below') {\n                this.dropPosition = 'bottomSegment';\n            }\n            if (pos === 'child') {\n                this.dropPosition = 'middleSegment';\n            }\n            var action = void 0;\n            var record = [];\n            for (var i = 0; i < fromIndexes.length; i++) {\n                record[i] = this.parent.updatedRecords[fromIndexes[i]];\n            }\n            var isByMethod_1 = true;\n            var args_1 = {\n                data: record,\n                dropIndex: toIndex,\n                dropPosition: this.dropPosition\n            };\n            if (this.dropPosition === 'middleSegment') {\n                action = 'indenting';\n            }\n            else if (this.dropPosition === 'bottomSegment') {\n                action = 'outdenting';\n            }\n            var actionArgs = {\n                action: action,\n                data: record[0],\n                cancel: false\n            };\n            this.parent.trigger('actionBegin', actionArgs, function (actionArg) {\n                if (!actionArg.cancel) {\n                    _this.reArrangeRows(args_1, isByMethod_1);\n                }\n                else {\n                    return;\n                }\n            });\n        }\n        else {\n            return;\n        }\n    };\n    Edit.prototype.reArrangeRows = function (args, isByMethod) {\n        this.dropPosition = args.dropPosition;\n        if (args.dropPosition !== 'Invalid' && this.parent.editModule) {\n            var obj = this.parent;\n            var draggedRec = void 0;\n            this.droppedRecord = obj.updatedRecords[args.dropIndex];\n            var dragRecords = [];\n            var droppedRec = this.droppedRecord;\n            if (!args.data[0]) {\n                dragRecords.push(args.data);\n            }\n            else {\n                dragRecords = args.data;\n            }\n            var c = 0;\n            var dLength = dragRecords.length;\n            for (var i = 0; i < dLength; i++) {\n                this.parent.isOnEdit = true;\n                draggedRec = dragRecords[i];\n                this.draggedRecord = draggedRec;\n                if (this.dropPosition !== 'Invalid') {\n                    if (isByMethod) {\n                        this.deleteDragRow();\n                    }\n                    var recordIndex1 = this.treeGridData.indexOf(droppedRec);\n                    if (this.dropPosition === 'bottomSegment') {\n                        if (!droppedRec.hasChildRecords) {\n                            if (this.parent.taskFields.parentID && this.ganttData.length > 0) {\n                                this.ganttData.splice(recordIndex1 + 1, 0, this.draggedRecord.taskData);\n                            }\n                            this.treeGridData.splice(recordIndex1 + 1, 0, this.draggedRecord);\n                            this.parent.ids.splice(recordIndex1 + 1, 0, this.draggedRecord.ganttProperties.rowUniqueID.toString());\n                        }\n                        else {\n                            c = this.parent.editModule.getChildCount(droppedRec, 0);\n                            if (this.parent.taskFields.parentID && this.ganttData.length > 0) {\n                                this.ganttData.splice(recordIndex1 + c + 1, 0, this.draggedRecord.taskData);\n                            }\n                            this.treeGridData.splice(recordIndex1 + c + 1, 0, this.draggedRecord);\n                            this.parent.ids.splice(recordIndex1 + c + 1, 0, this.draggedRecord.ganttProperties.rowUniqueID.toString());\n                            var idIndex = this.parent.ids.indexOf(this.draggedRecord[this.parent.taskFields.id].toString());\n                            if (idIndex !== recordIndex1 + c + 1) {\n                                this.parent.ids.splice(idIndex, 1);\n                                this.parent.ids.splice(recordIndex1 + c + 1, 0, this.draggedRecord[this.parent.taskFields.id].toString());\n                            }\n                        }\n                        this.parent.setRecordValue('parentItem', this.treeGridData[recordIndex1].parentItem, draggedRec);\n                        this.parent.setRecordValue('parentUniqueID', this.treeGridData[recordIndex1].parentUniqueID, draggedRec);\n                        this.parent.setRecordValue('level', this.treeGridData[recordIndex1].level, draggedRec);\n                        if (draggedRec.hasChildRecords) {\n                            var level = 1;\n                            this.updateChildRecordLevel(draggedRec, level);\n                            this.updateChildRecord(draggedRec, recordIndex1 + c + 1);\n                        }\n                        if (droppedRec.parentItem) {\n                            var record = this.parent.getParentTask(droppedRec.parentItem).childRecords;\n                            var childRecords = record;\n                            var droppedRecordIndex = childRecords.indexOf(droppedRec) + 1;\n                            childRecords.splice(droppedRecordIndex, 0, draggedRec);\n                        }\n                    }\n                    if (this.dropPosition === 'middleSegment') {\n                        this.dropMiddle(recordIndex1);\n                    }\n                    if (!isNullOrUndefined(draggedRec.parentItem && this.updateParentRecords.indexOf(draggedRec.parentItem) !== -1)) {\n                        this.updateParentRecords.push(draggedRec.parentItem);\n                    }\n                }\n                if (isNullOrUndefined(draggedRec.parentItem)) {\n                    var parentRecords = this.parent.treeGrid.parentData;\n                    var newParentIndex = parentRecords.indexOf(this.droppedRecord);\n                    if (this.dropPosition === 'bottomSegment') {\n                        parentRecords.splice(newParentIndex + 1, 0, draggedRec);\n                    }\n                }\n                this.refreshDataSource();\n            }\n            if (this.dropPosition === 'middleSegment') {\n                if (droppedRec.ganttProperties.predecessor) {\n                    this.parent.editModule.removePredecessorOnDelete(droppedRec);\n                    droppedRec.ganttProperties.predecessor = null;\n                    droppedRec.ganttProperties.predecessorsName = null;\n                    droppedRec[this.parent.taskFields.dependency] = null;\n                    droppedRec.taskData[this.parent.taskFields.dependency] = null;\n                }\n                if (droppedRec.ganttProperties.isMilestone) {\n                    this.parent.setRecordValue('isMilestone', false, droppedRec.ganttProperties, true);\n                    if (!isNullOrUndefined(droppedRec.taskData[this.parent.taskFields.milestone])) {\n                        if (droppedRec.taskData[this.parent.taskFields.milestone] === true) {\n                            droppedRec.taskData[this.parent.taskFields.milestone] = false;\n                        }\n                    }\n                }\n            }\n            for (var k = 0; k < this.updateParentRecords.length; k++) {\n                this.parent.dataOperation.updateParentItems(this.updateParentRecords[k]);\n            }\n            this.updateParentRecords = [];\n            this.parent.isOnEdit = false;\n        }\n        this.refreshRecord(args);\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Edit.prototype.refreshRecord = function (args, isDrag) {\n        var _this = this;\n        if (isRemoteData(this.parent.dataSource)) {\n            var data = this.parent.dataSource;\n            var updatedData = {\n                changedRecords: getTaskData(this.parent.editedRecords, null, null, this.parent)\n            };\n            var queryValue = this.parent.query instanceof Query ? this.parent.query : new Query();\n            var crud = null;\n            var adaptor = data.adaptor;\n            if (!(adaptor instanceof WebApiAdaptor && adaptor instanceof ODataAdaptor) || data.dataSource.batchUrl) {\n                crud = data.saveChanges(updatedData, this.parent.taskFields.id, null, queryValue);\n            }\n            else {\n                var changedRecords = 'changedRecords';\n                crud = data.update(this.parent.taskFields.id, updatedData[changedRecords], null, queryValue);\n            }\n            crud.then(function (e) { return _this.indentSuccess(e, args, isDrag); })\n                .catch(function (e) { return _this.indentFailure(e); });\n        }\n        else {\n            this.indentOutdentSuccess(args, isDrag);\n        }\n    };\n    Edit.prototype.indentSuccess = function (e, args, isDrag) {\n        this.indentOutdentSuccess(args, isDrag);\n    };\n    Edit.prototype.indentFailure = function (e) {\n        this.parent.trigger('actionFailure', { error: e });\n    };\n    Edit.prototype.indentOutdentSuccess = function (args, isDrag) {\n        this.parent.treeGrid.parentData = [];\n        this.parent.treeGrid.refresh();\n        if (this.parent.enableImmutableMode) {\n            this.refreshRecordInImmutableMode();\n        }\n        if (isDrag) {\n            args.requestType = 'rowDropped';\n        }\n        else {\n            if (this.dropPosition === 'middleSegment') {\n                args.requestType = 'indented';\n            }\n            else if (this.dropPosition === 'bottomSegment') {\n                args.requestType = 'outdented';\n            }\n        }\n        args.modifiedRecords = this.parent.editedRecords;\n        if (this.parent.timezone) {\n            for (var i = 0; i < args.modifiedRecords.length; i++) {\n                updateDates(args.modifiedRecords[i], this.parent);\n            }\n        }\n        this.parent.trigger('actionComplete', args);\n        this.parent.editedRecords = [];\n    };\n    Edit.prototype.refreshDataSource = function () {\n        var draggedRec = this.draggedRecord;\n        var droppedRec = this.droppedRecord;\n        var proxy = this.parent;\n        var tempData;\n        var indx;\n        if (this.parent.dataSource instanceof DataManager) {\n            tempData = getValue('dataOperation.dataArray', this.parent);\n        }\n        else {\n            tempData = proxy.dataSource;\n        }\n        if (tempData.length > 0 && (!isNullOrUndefined(droppedRec) && !droppedRec.parentItem)) {\n            for (var i = 0; i < Object.keys(tempData).length; i++) {\n                if (tempData[i][this.parent.taskFields.child] === droppedRec.taskData[this.parent.taskFields.child]) {\n                    indx = i;\n                }\n            }\n            if (this.dropPosition === 'topSegment') {\n                if (!this.parent.taskFields.parentID) {\n                    tempData.splice(indx, 0, draggedRec.taskData);\n                }\n            }\n            else if (this.dropPosition === 'bottomSegment') {\n                if (!this.parent.taskFields.parentID) {\n                    tempData.splice(indx + 1, 0, draggedRec.taskData);\n                }\n            }\n        }\n        else if (!this.parent.taskFields.parentID && (!isNullOrUndefined(droppedRec) && droppedRec.parentItem)) {\n            if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                var rowPos = this.dropPosition === 'topSegment' ? 'Above' : 'Below';\n                this.parent.editModule.addRowSelectedItem = droppedRec;\n                this.parent.editModule.updateRealDataSource(draggedRec, rowPos);\n                delete this.parent.editModule.addRowSelectedItem;\n            }\n        }\n        if (this.parent.taskFields.parentID) {\n            if (draggedRec.parentItem) {\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    draggedRec[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.parentID];\n                    draggedRec.taskData[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.parentID];\n                }\n                else {\n                    draggedRec[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.id];\n                    draggedRec.taskData[this.parent.taskFields.parentID] = droppedRec[this.parent.taskFields.id];\n                }\n            }\n            else {\n                draggedRec[this.parent.taskFields.parentID] = null;\n                draggedRec.taskData[this.parent.taskFields.parentID] = null;\n            }\n        }\n    };\n    Edit.prototype.deleteDragRow = function () {\n        if (this.parent.dataSource instanceof DataManager) {\n            this.ganttData = getValue('dataOperation.dataArray', this.parent);\n        }\n        else {\n            this.ganttData = isCountRequired(this.parent) ? getValue('result', this.parent.dataSource) :\n                this.parent.dataSource;\n        }\n        this.treeGridData = isCountRequired(this.parent) ?\n            getValue('result', this.parent.treeGrid.dataSource) : this.parent.treeGrid.dataSource;\n        var delRow = this.parent.getTaskByUniqueID(this.draggedRecord.uniqueID);\n        this.removeRecords(delRow);\n    };\n    Edit.prototype.dropMiddle = function (recordIndex1) {\n        var obj = this.parent;\n        var childRec = this.parent.editModule.getChildCount(this.droppedRecord, 0);\n        var childRecordsLength = (isNullOrUndefined(childRec) ||\n            childRec === 0) ? recordIndex1 + 1 :\n            childRec + recordIndex1 + 1;\n        if (this.dropPosition === 'middleSegment') {\n            if (obj.taskFields.parentID && this.ganttData.length > 0) {\n                this.ganttData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n            }\n            this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            this.parent.ids.splice(childRecordsLength, 0, this.draggedRecord[this.parent.taskFields.id].toString());\n            this.recordLevel();\n            if (this.draggedRecord.hasChildRecords) {\n                this.updateChildRecord(this.draggedRecord, childRecordsLength, this.droppedRecord.expanded);\n            }\n            if (isNullOrUndefined(this.draggedRecord.parentItem &&\n                this.updateParentRecords.indexOf(this.draggedRecord.parentItem) !== -1)) {\n                this.updateParentRecords.push(this.draggedRecord.parentItem);\n            }\n        }\n    };\n    Edit.prototype.updateChildRecordLevel = function (record, levl) {\n        var length = 0;\n        var currentRec;\n        levl++;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var j = 0; j < length; j++) {\n            currentRec = record.childRecords[j];\n            var parentData = void 0;\n            if (record.parentItem) {\n                var id = 'uniqueIDCollection';\n                parentData = this.parent.treeGrid[id][record.parentItem.uniqueID];\n            }\n            currentRec.level = record.parentItem ? parentData.level + levl : record.level + 1;\n            if (currentRec.hasChildRecords) {\n                levl--;\n                levl = this.updateChildRecordLevel(currentRec, levl);\n            }\n        }\n        return levl;\n    };\n    /* eslint-disable-next-line */\n    Edit.prototype.updateChildRecord = function (record, count, expanded) {\n        var currentRec;\n        var obj = this.parent;\n        var length = 0;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            currentRec = record.childRecords[i];\n            count++;\n            obj.flatData.splice(count, 0, currentRec);\n            this.parent.ids.splice(count, 0, currentRec.ganttProperties.rowUniqueID.toString());\n            if (obj.taskFields.parentID && this.ganttData.length > 0) {\n                this.ganttData.splice(count, 0, currentRec.taskData);\n            }\n            if (currentRec.hasChildRecords) {\n                count = this.updateChildRecord(currentRec, count);\n            }\n        }\n        return count;\n    };\n    Edit.prototype.removeRecords = function (record) {\n        var obj = this.parent;\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager) {\n            dataSource = getValue('dataOperation.dataArray', this.parent);\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        var delRow = record;\n        var flatParent = this.parent.getParentTask(delRow.parentItem);\n        if (delRow) {\n            if (delRow.parentItem) {\n                var childRecords = flatParent ? flatParent.childRecords : [];\n                var childIndex = 0;\n                if (childRecords && childRecords.length > 0) {\n                    childIndex = childRecords.indexOf(delRow);\n                    flatParent.childRecords.splice(childIndex, 1);\n                    if (!this.parent.taskFields.parentID) {\n                        flatParent.taskData[this.parent.taskFields.child].splice(childIndex, 1);\n                    }\n                    // collection for updating parent record\n                    this.updateParentRecords.push(flatParent);\n                }\n            }\n            if (obj.taskFields.parentID) {\n                if (delRow.hasChildRecords && delRow.childRecords.length > 0) {\n                    this.removeChildItem(delRow);\n                }\n                var indx = void 0;\n                var ganttData = dataSource.length > 0 ?\n                    dataSource : this.parent.currentViewData;\n                for (var i = 0; i < ganttData.length; i++) {\n                    if (ganttData[i][this.parent.taskFields.id] === delRow.taskData[this.parent.taskFields.id]) {\n                        indx = i;\n                    }\n                }\n                if (indx !== -1) {\n                    if (dataSource.length > 0) {\n                        dataSource.splice(indx, 1);\n                    }\n                    var gridIndx = void 0;\n                    for (var i = 0; i < this.treeGridData.length; i++) {\n                        if (this.treeGridData[i][this.parent.taskFields.id] === delRow.taskData[this.parent.taskFields.id]) {\n                            gridIndx = i;\n                        }\n                    }\n                    this.treeGridData.splice(gridIndx, 1);\n                    this.parent.ids.splice(gridIndx, 1);\n                    if (this.parent.treeGrid.parentData.indexOf(delRow) !== -1) {\n                        this.parent.treeGrid.parentData.splice(this.parent.treeGrid.parentData.indexOf(delRow), 1);\n                    }\n                }\n            }\n            var recordIdx = this.treeGridData.indexOf(delRow);\n            if (!obj.taskFields.parentID) {\n                var deletedRecordCount = this.getChildCount(delRow, 0);\n                this.treeGridData.splice(recordIdx, deletedRecordCount + 1);\n                this.parent.ids.splice(recordIdx, deletedRecordCount + 1);\n                var parentIndex = this.ganttData.indexOf(delRow.taskData);\n                if (parentIndex !== -1) {\n                    this.ganttData.splice(parentIndex, 1);\n                    this.parent.treeGrid.parentData.splice(parentIndex, 1);\n                }\n            }\n            if (delRow.parentItem && flatParent && flatParent.childRecords && !flatParent.childRecords.length) {\n                this.parent.setRecordValue('expanded', false, flatParent);\n                this.parent.setRecordValue('hasChildRecords', false, flatParent);\n            }\n        }\n    };\n    Edit.prototype.removeChildItem = function (record) {\n        var currentRec;\n        var indx;\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRec = record.childRecords[i];\n            var data = void 0;\n            if (this.parent.dataSource instanceof DataManager) {\n                data = getValue('dataOperation.dataArray', this.parent);\n            }\n            else {\n                data = this.parent.dataSource;\n            }\n            for (var j = 0; j < data.length; j++) {\n                if (data[j][this.parent.taskFields.id] === currentRec.taskData[this.parent.taskFields.id]) {\n                    indx = j;\n                }\n            }\n            if (indx !== -1) {\n                if (data.length > 0) {\n                    data.splice(indx, 1);\n                }\n                var gridIndx = void 0;\n                for (var i_1 = 0; i_1 < this.treeGridData.length; i_1++) {\n                    if (this.treeGridData[i_1][this.parent.taskFields.id] === currentRec.taskData[this.parent.taskFields.id]) {\n                        gridIndx = i_1;\n                    }\n                }\n                this.treeGridData.splice(gridIndx, 1);\n                this.parent.ids.splice(gridIndx, 1);\n            }\n            if (currentRec.hasChildRecords) {\n                this.removeChildItem(currentRec);\n            }\n        }\n    };\n    Edit.prototype.recordLevel = function () {\n        var obj = this.parent;\n        var draggedRec = this.draggedRecord;\n        var droppedRec = this.droppedRecord;\n        var childItem = obj.taskFields.child;\n        if (!droppedRec.hasChildRecords) {\n            droppedRec.hasChildRecords = true;\n            if (!droppedRec.childRecords.length) {\n                droppedRec.childRecords = [];\n                if (!obj.taskFields.parentID && isNullOrUndefined(droppedRec.taskData[childItem])) {\n                    droppedRec.taskData[childItem] = [];\n                }\n            }\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var parentItem = extend({}, droppedRec);\n            delete parentItem.childRecords;\n            var createParentItem = {\n                uniqueID: parentItem.uniqueID,\n                expanded: parentItem.expanded,\n                level: parentItem.level,\n                index: parentItem.index,\n                taskId: parentItem.ganttProperties.rowUniqueID\n            };\n            this.parent.setRecordValue('parentItem', createParentItem, draggedRec);\n            this.parent.setRecordValue('parentUniqueID', droppedRec.uniqueID, draggedRec);\n            droppedRec.childRecords.splice(droppedRec.childRecords.length, 0, draggedRec);\n            if (!isNullOrUndefined(draggedRec) && !obj.taskFields.parentID && !isNullOrUndefined(droppedRec.taskData[childItem])) {\n                droppedRec.taskData[obj.taskFields.child].splice(droppedRec.childRecords.length, 0, draggedRec.taskData);\n            }\n            if (!isNullOrUndefined(droppedRec.ganttProperties.segments) && droppedRec.ganttProperties.segments.length > 0) {\n                droppedRec.ganttProperties.segments = null;\n                droppedRec.taskData[obj.taskFields.segments] = null;\n            }\n            if (!draggedRec.hasChildRecords) {\n                draggedRec.level = droppedRec.level + 1;\n            }\n            else {\n                var level = 1;\n                draggedRec.level = droppedRec.level + 1;\n                this.updateChildRecordLevel(draggedRec, level);\n            }\n            droppedRec.expanded = true;\n        }\n    };\n    return Edit;\n}());\nexport { Edit };\n"]},"metadata":{},"sourceType":"module"}