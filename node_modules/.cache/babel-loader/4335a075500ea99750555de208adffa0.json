{"ast":null,"code":"import { TreeGrid, Sort as TreeGrdSort } from '@syncfusion/ej2-treegrid';\nimport { getActualProperties } from '@syncfusion/ej2-grids';\n/**\n * The Sort module is used to handle sorting action.\n */\n\nvar Sort =\n/** @class */\nfunction () {\n  function Sort(gantt) {\n    this.parent = gantt;\n    TreeGrid.Inject(TreeGrdSort);\n    this.parent.treeGrid.allowSorting = this.parent.allowSorting;\n    this.parent.treeGrid.sortSettings = getActualProperties(this.parent.sortSettings);\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} .\n   * @private\n   */\n\n\n  Sort.prototype.getModuleName = function () {\n    return 'sort';\n  };\n  /**\n   * @returns {void} .\n   * @private\n   */\n\n\n  Sort.prototype.addEventListener = function () {\n    this.parent.on('updateModel', this.updateModel, this);\n  };\n  /**\n   *\n   * @returns {void} .\n   * @hidden\n   */\n\n\n  Sort.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('updateModel', this.updateModel);\n  };\n  /**\n   * Destroys the Sorting of TreeGrid.\n   *\n   * @returns {void} .\n   * @private\n   */\n\n\n  Sort.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  /**\n   * Sort a column with given options.\n   *\n   * @param {string} columnName - Defines the column name to sort.\n   * @param {SortDirection} direction - Defines the direction of sort.\n   * @param {boolean} isMultiSort - Defines whether the previously sorted columns are to be maintained.\n   * @returns {void} .\n   */\n\n\n  Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n    this.parent.treeGrid.sortByColumn(columnName, direction, isMultiSort);\n  };\n  /**\n   * Method to clear all sorted columns.\n   *\n   * @returns {void} .\n   */\n\n\n  Sort.prototype.clearSorting = function () {\n    this.parent.treeGrid.clearSorting();\n  };\n  /**\n   * The function used to update sortSettings of TreeGrid.\n   *\n   * @returns {void} .\n   * @hidden\n   */\n\n\n  Sort.prototype.updateModel = function () {\n    this.parent.sortSettings = this.parent.treeGrid.sortSettings;\n  };\n  /**\n   * To clear sorting for specific column.\n   *\n   * @param {string} columnName - Defines the sorted column name to remove.\n   * @returns {void} .\n   */\n\n\n  Sort.prototype.removeSortColumn = function (columnName) {\n    this.parent.treeGrid.grid.removeSortColumn(columnName);\n  };\n\n  return Sort;\n}();\n\nexport { Sort };","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/node_modules/@syncfusion/ej2-gantt/src/gantt/actions/sort.js"],"names":["TreeGrid","Sort","TreeGrdSort","getActualProperties","gantt","parent","Inject","treeGrid","allowSorting","sortSettings","addEventListener","prototype","getModuleName","on","updateModel","removeEventListener","isDestroyed","off","destroy","sortColumn","columnName","direction","isMultiSort","sortByColumn","clearSorting","removeSortColumn","grid"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAI,IAAIC,WAA3B,QAA8C,0BAA9C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;;AACA,IAAIF,IAAI;AAAG;AAAe,YAAY;AAClC,WAASA,IAAT,CAAcG,KAAd,EAAqB;AACjB,SAAKC,MAAL,GAAcD,KAAd;AACAJ,IAAAA,QAAQ,CAACM,MAAT,CAAgBJ,WAAhB;AACA,SAAKG,MAAL,CAAYE,QAAZ,CAAqBC,YAArB,GAAoC,KAAKH,MAAL,CAAYG,YAAhD;AACA,SAAKH,MAAL,CAAYE,QAAZ,CAAqBE,YAArB,GAAoCN,mBAAmB,CAAC,KAAKE,MAAL,CAAYI,YAAb,CAAvD;AACA,SAAKC,gBAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,IAAI,CAACU,SAAL,CAAeC,aAAf,GAA+B,YAAY;AACvC,WAAO,MAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIX,EAAAA,IAAI,CAACU,SAAL,CAAeD,gBAAf,GAAkC,YAAY;AAC1C,SAAKL,MAAL,CAAYQ,EAAZ,CAAe,aAAf,EAA8B,KAAKC,WAAnC,EAAgD,IAAhD;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIb,EAAAA,IAAI,CAACU,SAAL,CAAeI,mBAAf,GAAqC,YAAY;AAC7C,QAAI,KAAKV,MAAL,CAAYW,WAAhB,EAA6B;AACzB;AACH;;AACD,SAAKX,MAAL,CAAYY,GAAZ,CAAgB,aAAhB,EAA+B,KAAKH,WAApC;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;;;AACIb,EAAAA,IAAI,CAACU,SAAL,CAAeO,OAAf,GAAyB,YAAY;AACjC,SAAKH,mBAAL;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACId,EAAAA,IAAI,CAACU,SAAL,CAAeQ,UAAf,GAA4B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiCC,WAAjC,EAA8C;AACtE,SAAKjB,MAAL,CAAYE,QAAZ,CAAqBgB,YAArB,CAAkCH,UAAlC,EAA8CC,SAA9C,EAAyDC,WAAzD;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIrB,EAAAA,IAAI,CAACU,SAAL,CAAea,YAAf,GAA8B,YAAY;AACtC,SAAKnB,MAAL,CAAYE,QAAZ,CAAqBiB,YAArB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIvB,EAAAA,IAAI,CAACU,SAAL,CAAeG,WAAf,GAA6B,YAAY;AACrC,SAAKT,MAAL,CAAYI,YAAZ,GAA2B,KAAKJ,MAAL,CAAYE,QAAZ,CAAqBE,YAAhD;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIR,EAAAA,IAAI,CAACU,SAAL,CAAec,gBAAf,GAAkC,UAAUL,UAAV,EAAsB;AACpD,SAAKf,MAAL,CAAYE,QAAZ,CAAqBmB,IAArB,CAA0BD,gBAA1B,CAA2CL,UAA3C;AACH,GAFD;;AAGA,SAAOnB,IAAP;AACH,CAlFyB,EAA1B;;AAmFA,SAASA,IAAT","sourcesContent":["import { TreeGrid, Sort as TreeGrdSort } from '@syncfusion/ej2-treegrid';\nimport { getActualProperties } from '@syncfusion/ej2-grids';\n/**\n * The Sort module is used to handle sorting action.\n */\nvar Sort = /** @class */ (function () {\n    function Sort(gantt) {\n        this.parent = gantt;\n        TreeGrid.Inject(TreeGrdSort);\n        this.parent.treeGrid.allowSorting = this.parent.allowSorting;\n        this.parent.treeGrid.sortSettings = getActualProperties(this.parent.sortSettings);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} .\n     * @private\n     */\n    Sort.prototype.getModuleName = function () {\n        return 'sort';\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    Sort.prototype.addEventListener = function () {\n        this.parent.on('updateModel', this.updateModel, this);\n    };\n    /**\n     *\n     * @returns {void} .\n     * @hidden\n     */\n    Sort.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateModel', this.updateModel);\n    };\n    /**\n     * Destroys the Sorting of TreeGrid.\n     *\n     * @returns {void} .\n     * @private\n     */\n    Sort.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * Sort a column with given options.\n     *\n     * @param {string} columnName - Defines the column name to sort.\n     * @param {SortDirection} direction - Defines the direction of sort.\n     * @param {boolean} isMultiSort - Defines whether the previously sorted columns are to be maintained.\n     * @returns {void} .\n     */\n    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        this.parent.treeGrid.sortByColumn(columnName, direction, isMultiSort);\n    };\n    /**\n     * Method to clear all sorted columns.\n     *\n     * @returns {void} .\n     */\n    Sort.prototype.clearSorting = function () {\n        this.parent.treeGrid.clearSorting();\n    };\n    /**\n     * The function used to update sortSettings of TreeGrid.\n     *\n     * @returns {void} .\n     * @hidden\n     */\n    Sort.prototype.updateModel = function () {\n        this.parent.sortSettings = this.parent.treeGrid.sortSettings;\n    };\n    /**\n     * To clear sorting for specific column.\n     *\n     * @param {string} columnName - Defines the sorted column name to remove.\n     * @returns {void} .\n     */\n    Sort.prototype.removeSortColumn = function (columnName) {\n        this.parent.treeGrid.grid.removeSortColumn(columnName);\n    };\n    return Sort;\n}());\nexport { Sort };\n"]},"metadata":{},"sourceType":"module"}