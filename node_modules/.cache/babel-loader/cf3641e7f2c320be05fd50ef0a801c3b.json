{"ast":null,"code":"var _jsxFileName = \"/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js\";\nimport React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Graph extends Component {\n  componentWillReceiveProps(nextProps) {\n    // used to pass the dataframe when loaded by parent page\n    this.setState({\n      dataframe: nextProps.dataframe\n    });\n  } // {\n  //     TaskID: 1,\n  //     TaskName: 'Project initiation',\n  //     StartDate: new Date('04/02/2019'),\n  //     EndDate: new Date('04/21/2019'),\n  //     subtasks: [\n\n\n  async getGanttGraph(criterions) {\n    if (this.state.dataframe == null) return [];\n    let df = this.getGanttInfoAsDataframe([\"STR-1.07\", \"STR-1.C09\", \"STR-1.16\", \"STR-3.C06\", \"STR-3.C05\", \"STR-3.07\"]);\n    let cycleLifeCategories = ['Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', 'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation'];\n    let graph = [];\n    let day = 1000 * 60 * 60 * 24;\n    let baseXPosition = new Date(2014, 2, 22);\n    let widthOfCycleLife = 4;\n    let i = 1;\n    df.chain(row => {\n      let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"));\n      let begXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day);\n      let endXPosition = new Date(baseXPosition.getTime() + widthOfCycleLife * cycleLifeIndex * day + widthOfCycleLife * day);\n      graph.push({\n        TaskID: i++,\n        TaskName: row.get(\"Use Case\"),\n        StartDate: begXPosition,\n        EndDate: endXPosition,\n        subtasks: []\n      }); // graph.push([\n      // row.get(\"CRITERES\"),\n      // row.get(\"Use Case\"),\n      // row.get(\"Etape Cycle de Vie\"),\n      // begXPosition,\n      // endXPosition,\n      // null,\n      // 100,\n      // null,\n      // ])\n\n      console.log(row.get(\"Etape Cycle de Vie\"));\n    });\n    this.setState({\n      graph: graph\n    });\n    return graph;\n  }\n\n  getGanttInfoAsDataframe(ids) {\n    let dfs = []; // for each id, fetch the required column infos \n\n    ids.forEach(id => {\n      let df = this.state.dataframe.filter(row => row.get(\"ID\") === id).select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n      dfs.push(df);\n    }); // merge all the rows dataframes in one dataframe\n\n    let totalDf = new DataFrame([]);\n    dfs.forEach(df => {\n      totalDf = totalDf.union(df);\n    }); // parse the priority to integers\n\n    totalDf = totalDf.chain(this.translatePriorityToInteger);\n    totalDf = this.sortDataframe(totalDf);\n    return totalDf;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataframe: null\n    };\n    this.taskFields = {\n      id: 'TaskID',\n      name: 'TaskName',\n      startDate: 'StartDate',\n      endDate: 'EndDate',\n      duration: 'Duration',\n      progress: 'Progress',\n      dependency: 'Predecessor',\n      child: 'subtasks',\n      resourceInfo: 'resources'\n    };\n    this.resourceFields = {\n      id: 'resourceId',\n      name: 'resourceName'\n    };\n    this.splitterSettings = {\n      columnIndex: 2\n    };\n    this.projectStartDate = new Date('03/25/2019');\n    this.projectEndDate = new Date('07/28/2019');\n    this.gridLines = 'Both';\n    this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n    this.timelineSettings = {\n      topTier: {\n        unit: 'Week',\n        format: 'MMM dd, y'\n      },\n      bottomTier: {\n        unit: 'Day'\n      }\n    };\n    this.labelSettings = {\n      leftLabel: 'TaskName',\n      rightLabel: 'resources'\n    };\n  }\n\n  toolbarClick(args) {\n    if (args.item.id === \"GanttExport_excelexport\") {\n      this.ganttInstance.excelExport();\n    } else if (args.item.id === \"GanttExport_csvexport\") {\n      this.ganttInstance.csvExport();\n    } else if (args.item.id === \"GanttExport_pdfexport\") {\n      this.ganttInstance.pdfExport();\n    }\n  }\n\n  render() {\n    console.log(this.state.dataframe);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-pane\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: /*#__PURE__*/_jsxDEV(GanttComponent, {\n          id: \"GanttExport\",\n          ref: gantt => this.ganttInstance = gantt,\n          dataSource: editingData,\n          dateFormat: 'MMM dd, y',\n          treeColumnIndex: 1,\n          allowExcelExport: true,\n          allowPdfExport: true,\n          allowSelection: true,\n          showColumnMenu: false,\n          highlightWeekends: true,\n          allowUnscheduledTasks: true,\n          projectStartDate: this.projectStartDate,\n          projectEndDate: this.projectEndDate,\n          splitterSettings: this.splitterSettings,\n          taskFields: this.taskFields,\n          timelineSettings: this.timelineSettings,\n          labelSettings: this.labelSettings,\n          toolbarClick: this.toolbarClick.bind(this),\n          height: \"410px\",\n          gridLines: this.gridLines,\n          toolbar: this.toolbar,\n          resourceFields: this.resourceFields,\n          resources: editingResources,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskID\",\n              width: \"60\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"TaskName\",\n              width: \"250\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"StartDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"EndDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Predecessor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"resources\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Selection, Toolbar, ExcelExport, PdfExport]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/tristanbilot/Desktop/Design4green/design4green/src/Components/Graph.js"],"names":["React","Component","GanttComponent","Inject","Selection","Toolbar","ExcelExport","PdfExport","ColumnsDirective","ColumnDirective","editingData","editingResources","Graph","componentWillReceiveProps","nextProps","setState","dataframe","getGanttGraph","criterions","state","df","getGanttInfoAsDataframe","cycleLifeCategories","graph","day","baseXPosition","Date","widthOfCycleLife","i","chain","row","cycleLifeIndex","indexOf","get","begXPosition","getTime","endXPosition","push","TaskID","TaskName","StartDate","EndDate","subtasks","console","log","ids","dfs","forEach","id","filter","select","totalDf","DataFrame","union","translatePriorityToInteger","sortDataframe","constructor","props","taskFields","name","startDate","endDate","duration","progress","dependency","child","resourceInfo","resourceFields","splitterSettings","columnIndex","projectStartDate","projectEndDate","gridLines","toolbar","timelineSettings","topTier","unit","format","bottomTier","labelSettings","leftLabel","rightLabel","toolbarClick","args","item","ganttInstance","excelExport","csvExport","pdfExport","render","gantt","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GanttComponent, Inject, Selection, Toolbar, ExcelExport, PdfExport, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-gantt';\nimport { editingData, editingResources } from './data';\n\nclass Graph extends Component {\n\n    componentWillReceiveProps(nextProps) {\n        // used to pass the dataframe when loaded by parent page\n        this.setState({ dataframe: nextProps.dataframe });  \n    }\n\n    // {\n    //     TaskID: 1,\n    //     TaskName: 'Project initiation',\n    //     StartDate: new Date('04/02/2019'),\n    //     EndDate: new Date('04/21/2019'),\n    //     subtasks: [\n\n    async getGanttGraph(criterions) {\n        if (this.state.dataframe == null)\n            return []\n    \n        let df = this.getGanttInfoAsDataframe([\n            \"STR-1.07\",\n            \"STR-1.C09\",\n            \"STR-1.16\",\n            \"STR-3.C06\",\n            \"STR-3.C05\",\n            \"STR-3.07\"\n        ])\n    \n        let cycleLifeCategories = [ 'Acquisition', 'Conception', 'Réalisation', 'Déploiement', 'Administration', \n            'Utilisation', 'Maintenance', 'Fin de Vie', 'Revalorisation' ]\n    \n        let graph = [\n            \n        ]\n    \n        let day = 1000*60*60*24\n        let baseXPosition = new Date(2014, 2, 22)\n        let widthOfCycleLife = 4\n        let i  = 1\n\n        df.chain(row => {\n            let cycleLifeIndex = cycleLifeCategories.indexOf(row.get(\"Etape Cycle de Vie\"))\n            let begXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day)\n            let endXPosition = new Date(baseXPosition.getTime() + (widthOfCycleLife * cycleLifeIndex) * day + widthOfCycleLife * day)\n    \n            graph.push({\n                TaskID: i++,\n                TaskName: row.get(\"Use Case\"),\n                StartDate: begXPosition,\n                EndDate: endXPosition,\n                subtasks: []\n            })\n            // graph.push([\n            // row.get(\"CRITERES\"),\n            // row.get(\"Use Case\"),\n            // row.get(\"Etape Cycle de Vie\"),\n            // begXPosition,\n            // endXPosition,\n            // null,\n            // 100,\n            // null,\n            // ])\n            console.log(row.get(\"Etape Cycle de Vie\"))\n        })\n    \n        this.setState({\n            graph: graph,\n        })\n        return graph\n        }\n\n    getGanttInfoAsDataframe(ids) {\n        let dfs = []\n    \n        // for each id, fetch the required column infos \n        ids.forEach(id => {\n            let df = this.state.dataframe.filter(row => row\n            .get(\"ID\") === id)\n            .select(\"CRITERES\", \"Etape Cycle de Vie\", \"incontournables\", \"Use Case\", \"JUSTIFICATIONS\", \"Priorité\");\n            dfs.push(df)\n        })\n        \n        // merge all the rows dataframes in one dataframe\n        let totalDf = new DataFrame([]);\n        dfs.forEach(df => {\n            totalDf = totalDf.union(df)\n        })\n    \n        // parse the priority to integers\n        totalDf = totalDf.chain(this.translatePriorityToInteger)\n        totalDf = this.sortDataframe(totalDf)\n        return totalDf\n        }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataframe: null,\n        }\n\n        this.taskFields = {\n            id: 'TaskID',\n            name: 'TaskName',\n            startDate: 'StartDate',\n            endDate: 'EndDate',\n            duration: 'Duration',\n            progress: 'Progress',\n            dependency: 'Predecessor',\n            child: 'subtasks',\n            resourceInfo: 'resources'\n        };\n        this.resourceFields = {\n            id: 'resourceId',\n            name: 'resourceName'\n        };\n        this.splitterSettings = {\n            columnIndex: 2\n        };\n        this.projectStartDate = new Date('03/25/2019');\n        this.projectEndDate = new Date('07/28/2019');\n        this.gridLines = 'Both';\n        this.toolbar = ['ExcelExport', 'CsvExport', 'PdfExport'];\n        this.timelineSettings = {\n            topTier: {\n                unit: 'Week',\n                format: 'MMM dd, y',\n            },\n            bottomTier: {\n                unit: 'Day',\n            },\n        };\n        this.labelSettings = {\n            leftLabel: 'TaskName',\n            rightLabel: 'resources'\n        };\n    }\n    toolbarClick(args) {\n        if (args.item.id === \"GanttExport_excelexport\") {\n            this.ganttInstance.excelExport();\n        }\n        else if (args.item.id === \"GanttExport_csvexport\") {\n            this.ganttInstance.csvExport();\n        }\n        else if (args.item.id === \"GanttExport_pdfexport\") {\n            this.ganttInstance.pdfExport();\n        }\n    }\n    render() {\n        console.log(this.state.dataframe)\n        return (<div className='control-pane'>\n        <div className='control-section'>\n          <GanttComponent id='GanttExport' ref={gantt => this.ganttInstance = gantt} dataSource={editingData} dateFormat={'MMM dd, y'} treeColumnIndex={1} allowExcelExport={true} allowPdfExport={true} allowSelection={true} showColumnMenu={false} highlightWeekends={true} allowUnscheduledTasks={true} projectStartDate={this.projectStartDate} projectEndDate={this.projectEndDate} splitterSettings={this.splitterSettings} taskFields={this.taskFields} timelineSettings={this.timelineSettings} labelSettings={this.labelSettings} toolbarClick={this.toolbarClick.bind(this)} height='410px' gridLines={this.gridLines} toolbar={this.toolbar} resourceFields={this.resourceFields} resources={editingResources}>\n            <ColumnsDirective>\n              <ColumnDirective field='TaskID' width='60'></ColumnDirective>\n              <ColumnDirective field='TaskName' width='250'></ColumnDirective>\n              <ColumnDirective field='StartDate'></ColumnDirective>\n              <ColumnDirective field='EndDate'></ColumnDirective>\n              <ColumnDirective field='Duration'></ColumnDirective>\n              <ColumnDirective field='Predecessor'></ColumnDirective>\n              <ColumnDirective field='resources'></ColumnDirective>\n              <ColumnDirective field='Progress'></ColumnDirective>\n            </ColumnsDirective>\n            <Inject services={[Selection, Toolbar, ExcelExport, PdfExport]}/>\n          </GanttComponent>\n        </div>\n      </div>);\n    }\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}